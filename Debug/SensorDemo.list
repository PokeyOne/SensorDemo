
SensorDemo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004368  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08004424  08004424  00014424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045d0  080045d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080045d0  080045d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045d0  080045d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045d0  080045d0  000145d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045d4  080045d4  000145d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080045d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000104  20000070  08004648  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000174  08004648  00020174  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aedd  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001829  00000000  00000000  0002af75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000940  00000000  00000000  0002c7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000898  00000000  00000000  0002d0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad87  00000000  00000000  0002d978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c73c  00000000  00000000  000486ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1822  00000000  00000000  00054e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f665d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025cc  00000000  00000000  000f66b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000070 	.word	0x20000070
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800440c 	.word	0x0800440c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000074 	.word	0x20000074
 8000100:	0800440c 	.word	0x0800440c

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <__aeabi_f2uiz>:
 8000240:	219e      	movs	r1, #158	; 0x9e
 8000242:	b510      	push	{r4, lr}
 8000244:	05c9      	lsls	r1, r1, #23
 8000246:	1c04      	adds	r4, r0, #0
 8000248:	f000 fc9c 	bl	8000b84 <__aeabi_fcmpge>
 800024c:	2800      	cmp	r0, #0
 800024e:	d103      	bne.n	8000258 <__aeabi_f2uiz+0x18>
 8000250:	1c20      	adds	r0, r4, #0
 8000252:	f000 fbf9 	bl	8000a48 <__aeabi_f2iz>
 8000256:	bd10      	pop	{r4, pc}
 8000258:	219e      	movs	r1, #158	; 0x9e
 800025a:	1c20      	adds	r0, r4, #0
 800025c:	05c9      	lsls	r1, r1, #23
 800025e:	f000 fa45 	bl	80006ec <__aeabi_fsub>
 8000262:	f000 fbf1 	bl	8000a48 <__aeabi_f2iz>
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	061b      	lsls	r3, r3, #24
 800026a:	469c      	mov	ip, r3
 800026c:	4460      	add	r0, ip
 800026e:	e7f2      	b.n	8000256 <__aeabi_f2uiz+0x16>

08000270 <__aeabi_fdiv>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	464f      	mov	r7, r9
 8000274:	4646      	mov	r6, r8
 8000276:	46d6      	mov	lr, sl
 8000278:	0245      	lsls	r5, r0, #9
 800027a:	b5c0      	push	{r6, r7, lr}
 800027c:	0047      	lsls	r7, r0, #1
 800027e:	1c0c      	adds	r4, r1, #0
 8000280:	0a6d      	lsrs	r5, r5, #9
 8000282:	0e3f      	lsrs	r7, r7, #24
 8000284:	0fc6      	lsrs	r6, r0, #31
 8000286:	2f00      	cmp	r7, #0
 8000288:	d100      	bne.n	800028c <__aeabi_fdiv+0x1c>
 800028a:	e070      	b.n	800036e <__aeabi_fdiv+0xfe>
 800028c:	2fff      	cmp	r7, #255	; 0xff
 800028e:	d100      	bne.n	8000292 <__aeabi_fdiv+0x22>
 8000290:	e075      	b.n	800037e <__aeabi_fdiv+0x10e>
 8000292:	00eb      	lsls	r3, r5, #3
 8000294:	2580      	movs	r5, #128	; 0x80
 8000296:	04ed      	lsls	r5, r5, #19
 8000298:	431d      	orrs	r5, r3
 800029a:	2300      	movs	r3, #0
 800029c:	4699      	mov	r9, r3
 800029e:	469a      	mov	sl, r3
 80002a0:	3f7f      	subs	r7, #127	; 0x7f
 80002a2:	0260      	lsls	r0, r4, #9
 80002a4:	0a43      	lsrs	r3, r0, #9
 80002a6:	4698      	mov	r8, r3
 80002a8:	0063      	lsls	r3, r4, #1
 80002aa:	0e1b      	lsrs	r3, r3, #24
 80002ac:	0fe4      	lsrs	r4, r4, #31
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d04e      	beq.n	8000350 <__aeabi_fdiv+0xe0>
 80002b2:	2bff      	cmp	r3, #255	; 0xff
 80002b4:	d046      	beq.n	8000344 <__aeabi_fdiv+0xd4>
 80002b6:	4642      	mov	r2, r8
 80002b8:	00d0      	lsls	r0, r2, #3
 80002ba:	2280      	movs	r2, #128	; 0x80
 80002bc:	04d2      	lsls	r2, r2, #19
 80002be:	4302      	orrs	r2, r0
 80002c0:	4690      	mov	r8, r2
 80002c2:	2200      	movs	r2, #0
 80002c4:	3b7f      	subs	r3, #127	; 0x7f
 80002c6:	0031      	movs	r1, r6
 80002c8:	1aff      	subs	r7, r7, r3
 80002ca:	464b      	mov	r3, r9
 80002cc:	4061      	eors	r1, r4
 80002ce:	b2c9      	uxtb	r1, r1
 80002d0:	4313      	orrs	r3, r2
 80002d2:	2b0f      	cmp	r3, #15
 80002d4:	d900      	bls.n	80002d8 <__aeabi_fdiv+0x68>
 80002d6:	e0b5      	b.n	8000444 <__aeabi_fdiv+0x1d4>
 80002d8:	486e      	ldr	r0, [pc, #440]	; (8000494 <__aeabi_fdiv+0x224>)
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	58c3      	ldr	r3, [r0, r3]
 80002de:	469f      	mov	pc, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	4698      	mov	r8, r3
 80002e4:	0026      	movs	r6, r4
 80002e6:	4645      	mov	r5, r8
 80002e8:	4692      	mov	sl, r2
 80002ea:	4653      	mov	r3, sl
 80002ec:	2b02      	cmp	r3, #2
 80002ee:	d100      	bne.n	80002f2 <__aeabi_fdiv+0x82>
 80002f0:	e089      	b.n	8000406 <__aeabi_fdiv+0x196>
 80002f2:	2b03      	cmp	r3, #3
 80002f4:	d100      	bne.n	80002f8 <__aeabi_fdiv+0x88>
 80002f6:	e09e      	b.n	8000436 <__aeabi_fdiv+0x1c6>
 80002f8:	2b01      	cmp	r3, #1
 80002fa:	d018      	beq.n	800032e <__aeabi_fdiv+0xbe>
 80002fc:	003b      	movs	r3, r7
 80002fe:	337f      	adds	r3, #127	; 0x7f
 8000300:	2b00      	cmp	r3, #0
 8000302:	dd69      	ble.n	80003d8 <__aeabi_fdiv+0x168>
 8000304:	076a      	lsls	r2, r5, #29
 8000306:	d004      	beq.n	8000312 <__aeabi_fdiv+0xa2>
 8000308:	220f      	movs	r2, #15
 800030a:	402a      	ands	r2, r5
 800030c:	2a04      	cmp	r2, #4
 800030e:	d000      	beq.n	8000312 <__aeabi_fdiv+0xa2>
 8000310:	3504      	adds	r5, #4
 8000312:	012a      	lsls	r2, r5, #4
 8000314:	d503      	bpl.n	800031e <__aeabi_fdiv+0xae>
 8000316:	4b60      	ldr	r3, [pc, #384]	; (8000498 <__aeabi_fdiv+0x228>)
 8000318:	401d      	ands	r5, r3
 800031a:	003b      	movs	r3, r7
 800031c:	3380      	adds	r3, #128	; 0x80
 800031e:	2bfe      	cmp	r3, #254	; 0xfe
 8000320:	dd00      	ble.n	8000324 <__aeabi_fdiv+0xb4>
 8000322:	e070      	b.n	8000406 <__aeabi_fdiv+0x196>
 8000324:	01ad      	lsls	r5, r5, #6
 8000326:	0a6d      	lsrs	r5, r5, #9
 8000328:	b2d8      	uxtb	r0, r3
 800032a:	e002      	b.n	8000332 <__aeabi_fdiv+0xc2>
 800032c:	000e      	movs	r6, r1
 800032e:	2000      	movs	r0, #0
 8000330:	2500      	movs	r5, #0
 8000332:	05c0      	lsls	r0, r0, #23
 8000334:	4328      	orrs	r0, r5
 8000336:	07f6      	lsls	r6, r6, #31
 8000338:	4330      	orrs	r0, r6
 800033a:	bce0      	pop	{r5, r6, r7}
 800033c:	46ba      	mov	sl, r7
 800033e:	46b1      	mov	r9, r6
 8000340:	46a8      	mov	r8, r5
 8000342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000344:	4643      	mov	r3, r8
 8000346:	2b00      	cmp	r3, #0
 8000348:	d13f      	bne.n	80003ca <__aeabi_fdiv+0x15a>
 800034a:	2202      	movs	r2, #2
 800034c:	3fff      	subs	r7, #255	; 0xff
 800034e:	e003      	b.n	8000358 <__aeabi_fdiv+0xe8>
 8000350:	4643      	mov	r3, r8
 8000352:	2b00      	cmp	r3, #0
 8000354:	d12d      	bne.n	80003b2 <__aeabi_fdiv+0x142>
 8000356:	2201      	movs	r2, #1
 8000358:	0031      	movs	r1, r6
 800035a:	464b      	mov	r3, r9
 800035c:	4061      	eors	r1, r4
 800035e:	b2c9      	uxtb	r1, r1
 8000360:	4313      	orrs	r3, r2
 8000362:	2b0f      	cmp	r3, #15
 8000364:	d834      	bhi.n	80003d0 <__aeabi_fdiv+0x160>
 8000366:	484d      	ldr	r0, [pc, #308]	; (800049c <__aeabi_fdiv+0x22c>)
 8000368:	009b      	lsls	r3, r3, #2
 800036a:	58c3      	ldr	r3, [r0, r3]
 800036c:	469f      	mov	pc, r3
 800036e:	2d00      	cmp	r5, #0
 8000370:	d113      	bne.n	800039a <__aeabi_fdiv+0x12a>
 8000372:	2304      	movs	r3, #4
 8000374:	4699      	mov	r9, r3
 8000376:	3b03      	subs	r3, #3
 8000378:	2700      	movs	r7, #0
 800037a:	469a      	mov	sl, r3
 800037c:	e791      	b.n	80002a2 <__aeabi_fdiv+0x32>
 800037e:	2d00      	cmp	r5, #0
 8000380:	d105      	bne.n	800038e <__aeabi_fdiv+0x11e>
 8000382:	2308      	movs	r3, #8
 8000384:	4699      	mov	r9, r3
 8000386:	3b06      	subs	r3, #6
 8000388:	27ff      	movs	r7, #255	; 0xff
 800038a:	469a      	mov	sl, r3
 800038c:	e789      	b.n	80002a2 <__aeabi_fdiv+0x32>
 800038e:	230c      	movs	r3, #12
 8000390:	4699      	mov	r9, r3
 8000392:	3b09      	subs	r3, #9
 8000394:	27ff      	movs	r7, #255	; 0xff
 8000396:	469a      	mov	sl, r3
 8000398:	e783      	b.n	80002a2 <__aeabi_fdiv+0x32>
 800039a:	0028      	movs	r0, r5
 800039c:	f000 fbfc 	bl	8000b98 <__clzsi2>
 80003a0:	2776      	movs	r7, #118	; 0x76
 80003a2:	1f43      	subs	r3, r0, #5
 80003a4:	409d      	lsls	r5, r3
 80003a6:	2300      	movs	r3, #0
 80003a8:	427f      	negs	r7, r7
 80003aa:	4699      	mov	r9, r3
 80003ac:	469a      	mov	sl, r3
 80003ae:	1a3f      	subs	r7, r7, r0
 80003b0:	e777      	b.n	80002a2 <__aeabi_fdiv+0x32>
 80003b2:	4640      	mov	r0, r8
 80003b4:	f000 fbf0 	bl	8000b98 <__clzsi2>
 80003b8:	4642      	mov	r2, r8
 80003ba:	1f43      	subs	r3, r0, #5
 80003bc:	409a      	lsls	r2, r3
 80003be:	2376      	movs	r3, #118	; 0x76
 80003c0:	425b      	negs	r3, r3
 80003c2:	4690      	mov	r8, r2
 80003c4:	1a1b      	subs	r3, r3, r0
 80003c6:	2200      	movs	r2, #0
 80003c8:	e77d      	b.n	80002c6 <__aeabi_fdiv+0x56>
 80003ca:	23ff      	movs	r3, #255	; 0xff
 80003cc:	2203      	movs	r2, #3
 80003ce:	e77a      	b.n	80002c6 <__aeabi_fdiv+0x56>
 80003d0:	000e      	movs	r6, r1
 80003d2:	20ff      	movs	r0, #255	; 0xff
 80003d4:	2500      	movs	r5, #0
 80003d6:	e7ac      	b.n	8000332 <__aeabi_fdiv+0xc2>
 80003d8:	2001      	movs	r0, #1
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	281b      	cmp	r0, #27
 80003de:	dca6      	bgt.n	800032e <__aeabi_fdiv+0xbe>
 80003e0:	379e      	adds	r7, #158	; 0x9e
 80003e2:	002a      	movs	r2, r5
 80003e4:	40bd      	lsls	r5, r7
 80003e6:	40c2      	lsrs	r2, r0
 80003e8:	1e6b      	subs	r3, r5, #1
 80003ea:	419d      	sbcs	r5, r3
 80003ec:	4315      	orrs	r5, r2
 80003ee:	076b      	lsls	r3, r5, #29
 80003f0:	d004      	beq.n	80003fc <__aeabi_fdiv+0x18c>
 80003f2:	230f      	movs	r3, #15
 80003f4:	402b      	ands	r3, r5
 80003f6:	2b04      	cmp	r3, #4
 80003f8:	d000      	beq.n	80003fc <__aeabi_fdiv+0x18c>
 80003fa:	3504      	adds	r5, #4
 80003fc:	016b      	lsls	r3, r5, #5
 80003fe:	d544      	bpl.n	800048a <__aeabi_fdiv+0x21a>
 8000400:	2001      	movs	r0, #1
 8000402:	2500      	movs	r5, #0
 8000404:	e795      	b.n	8000332 <__aeabi_fdiv+0xc2>
 8000406:	20ff      	movs	r0, #255	; 0xff
 8000408:	2500      	movs	r5, #0
 800040a:	e792      	b.n	8000332 <__aeabi_fdiv+0xc2>
 800040c:	2580      	movs	r5, #128	; 0x80
 800040e:	2600      	movs	r6, #0
 8000410:	20ff      	movs	r0, #255	; 0xff
 8000412:	03ed      	lsls	r5, r5, #15
 8000414:	e78d      	b.n	8000332 <__aeabi_fdiv+0xc2>
 8000416:	2300      	movs	r3, #0
 8000418:	4698      	mov	r8, r3
 800041a:	2080      	movs	r0, #128	; 0x80
 800041c:	03c0      	lsls	r0, r0, #15
 800041e:	4205      	tst	r5, r0
 8000420:	d009      	beq.n	8000436 <__aeabi_fdiv+0x1c6>
 8000422:	4643      	mov	r3, r8
 8000424:	4203      	tst	r3, r0
 8000426:	d106      	bne.n	8000436 <__aeabi_fdiv+0x1c6>
 8000428:	4645      	mov	r5, r8
 800042a:	4305      	orrs	r5, r0
 800042c:	026d      	lsls	r5, r5, #9
 800042e:	0026      	movs	r6, r4
 8000430:	20ff      	movs	r0, #255	; 0xff
 8000432:	0a6d      	lsrs	r5, r5, #9
 8000434:	e77d      	b.n	8000332 <__aeabi_fdiv+0xc2>
 8000436:	2080      	movs	r0, #128	; 0x80
 8000438:	03c0      	lsls	r0, r0, #15
 800043a:	4305      	orrs	r5, r0
 800043c:	026d      	lsls	r5, r5, #9
 800043e:	20ff      	movs	r0, #255	; 0xff
 8000440:	0a6d      	lsrs	r5, r5, #9
 8000442:	e776      	b.n	8000332 <__aeabi_fdiv+0xc2>
 8000444:	4642      	mov	r2, r8
 8000446:	016b      	lsls	r3, r5, #5
 8000448:	0150      	lsls	r0, r2, #5
 800044a:	4283      	cmp	r3, r0
 800044c:	d219      	bcs.n	8000482 <__aeabi_fdiv+0x212>
 800044e:	221b      	movs	r2, #27
 8000450:	2500      	movs	r5, #0
 8000452:	3f01      	subs	r7, #1
 8000454:	2601      	movs	r6, #1
 8000456:	001c      	movs	r4, r3
 8000458:	006d      	lsls	r5, r5, #1
 800045a:	005b      	lsls	r3, r3, #1
 800045c:	2c00      	cmp	r4, #0
 800045e:	db01      	blt.n	8000464 <__aeabi_fdiv+0x1f4>
 8000460:	4298      	cmp	r0, r3
 8000462:	d801      	bhi.n	8000468 <__aeabi_fdiv+0x1f8>
 8000464:	1a1b      	subs	r3, r3, r0
 8000466:	4335      	orrs	r5, r6
 8000468:	3a01      	subs	r2, #1
 800046a:	2a00      	cmp	r2, #0
 800046c:	d1f3      	bne.n	8000456 <__aeabi_fdiv+0x1e6>
 800046e:	1e5a      	subs	r2, r3, #1
 8000470:	4193      	sbcs	r3, r2
 8000472:	431d      	orrs	r5, r3
 8000474:	003b      	movs	r3, r7
 8000476:	337f      	adds	r3, #127	; 0x7f
 8000478:	000e      	movs	r6, r1
 800047a:	2b00      	cmp	r3, #0
 800047c:	dd00      	ble.n	8000480 <__aeabi_fdiv+0x210>
 800047e:	e741      	b.n	8000304 <__aeabi_fdiv+0x94>
 8000480:	e7aa      	b.n	80003d8 <__aeabi_fdiv+0x168>
 8000482:	221a      	movs	r2, #26
 8000484:	2501      	movs	r5, #1
 8000486:	1a1b      	subs	r3, r3, r0
 8000488:	e7e4      	b.n	8000454 <__aeabi_fdiv+0x1e4>
 800048a:	01ad      	lsls	r5, r5, #6
 800048c:	2000      	movs	r0, #0
 800048e:	0a6d      	lsrs	r5, r5, #9
 8000490:	e74f      	b.n	8000332 <__aeabi_fdiv+0xc2>
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	080044c4 	.word	0x080044c4
 8000498:	f7ffffff 	.word	0xf7ffffff
 800049c:	08004504 	.word	0x08004504

080004a0 <__aeabi_fmul>:
 80004a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004a2:	464f      	mov	r7, r9
 80004a4:	4646      	mov	r6, r8
 80004a6:	46d6      	mov	lr, sl
 80004a8:	0244      	lsls	r4, r0, #9
 80004aa:	0045      	lsls	r5, r0, #1
 80004ac:	b5c0      	push	{r6, r7, lr}
 80004ae:	0a64      	lsrs	r4, r4, #9
 80004b0:	1c0f      	adds	r7, r1, #0
 80004b2:	0e2d      	lsrs	r5, r5, #24
 80004b4:	0fc6      	lsrs	r6, r0, #31
 80004b6:	2d00      	cmp	r5, #0
 80004b8:	d100      	bne.n	80004bc <__aeabi_fmul+0x1c>
 80004ba:	e08d      	b.n	80005d8 <__aeabi_fmul+0x138>
 80004bc:	2dff      	cmp	r5, #255	; 0xff
 80004be:	d100      	bne.n	80004c2 <__aeabi_fmul+0x22>
 80004c0:	e092      	b.n	80005e8 <__aeabi_fmul+0x148>
 80004c2:	2300      	movs	r3, #0
 80004c4:	2080      	movs	r0, #128	; 0x80
 80004c6:	4699      	mov	r9, r3
 80004c8:	469a      	mov	sl, r3
 80004ca:	00e4      	lsls	r4, r4, #3
 80004cc:	04c0      	lsls	r0, r0, #19
 80004ce:	4304      	orrs	r4, r0
 80004d0:	3d7f      	subs	r5, #127	; 0x7f
 80004d2:	0278      	lsls	r0, r7, #9
 80004d4:	0a43      	lsrs	r3, r0, #9
 80004d6:	4698      	mov	r8, r3
 80004d8:	007b      	lsls	r3, r7, #1
 80004da:	0e1b      	lsrs	r3, r3, #24
 80004dc:	0fff      	lsrs	r7, r7, #31
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fmul+0x44>
 80004e2:	e070      	b.n	80005c6 <__aeabi_fmul+0x126>
 80004e4:	2bff      	cmp	r3, #255	; 0xff
 80004e6:	d100      	bne.n	80004ea <__aeabi_fmul+0x4a>
 80004e8:	e086      	b.n	80005f8 <__aeabi_fmul+0x158>
 80004ea:	4642      	mov	r2, r8
 80004ec:	00d0      	lsls	r0, r2, #3
 80004ee:	2280      	movs	r2, #128	; 0x80
 80004f0:	3b7f      	subs	r3, #127	; 0x7f
 80004f2:	18ed      	adds	r5, r5, r3
 80004f4:	2300      	movs	r3, #0
 80004f6:	04d2      	lsls	r2, r2, #19
 80004f8:	4302      	orrs	r2, r0
 80004fa:	4690      	mov	r8, r2
 80004fc:	469c      	mov	ip, r3
 80004fe:	0031      	movs	r1, r6
 8000500:	464b      	mov	r3, r9
 8000502:	4079      	eors	r1, r7
 8000504:	1c68      	adds	r0, r5, #1
 8000506:	2b0f      	cmp	r3, #15
 8000508:	d81c      	bhi.n	8000544 <__aeabi_fmul+0xa4>
 800050a:	4a76      	ldr	r2, [pc, #472]	; (80006e4 <__aeabi_fmul+0x244>)
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	58d3      	ldr	r3, [r2, r3]
 8000510:	469f      	mov	pc, r3
 8000512:	0039      	movs	r1, r7
 8000514:	4644      	mov	r4, r8
 8000516:	46e2      	mov	sl, ip
 8000518:	4653      	mov	r3, sl
 800051a:	2b02      	cmp	r3, #2
 800051c:	d00f      	beq.n	800053e <__aeabi_fmul+0x9e>
 800051e:	2b03      	cmp	r3, #3
 8000520:	d100      	bne.n	8000524 <__aeabi_fmul+0x84>
 8000522:	e0d7      	b.n	80006d4 <__aeabi_fmul+0x234>
 8000524:	2b01      	cmp	r3, #1
 8000526:	d137      	bne.n	8000598 <__aeabi_fmul+0xf8>
 8000528:	2000      	movs	r0, #0
 800052a:	2400      	movs	r4, #0
 800052c:	05c0      	lsls	r0, r0, #23
 800052e:	4320      	orrs	r0, r4
 8000530:	07c9      	lsls	r1, r1, #31
 8000532:	4308      	orrs	r0, r1
 8000534:	bce0      	pop	{r5, r6, r7}
 8000536:	46ba      	mov	sl, r7
 8000538:	46b1      	mov	r9, r6
 800053a:	46a8      	mov	r8, r5
 800053c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800053e:	20ff      	movs	r0, #255	; 0xff
 8000540:	2400      	movs	r4, #0
 8000542:	e7f3      	b.n	800052c <__aeabi_fmul+0x8c>
 8000544:	0c26      	lsrs	r6, r4, #16
 8000546:	0424      	lsls	r4, r4, #16
 8000548:	0c22      	lsrs	r2, r4, #16
 800054a:	4644      	mov	r4, r8
 800054c:	0424      	lsls	r4, r4, #16
 800054e:	0c24      	lsrs	r4, r4, #16
 8000550:	4643      	mov	r3, r8
 8000552:	0027      	movs	r7, r4
 8000554:	0c1b      	lsrs	r3, r3, #16
 8000556:	4357      	muls	r7, r2
 8000558:	4374      	muls	r4, r6
 800055a:	435a      	muls	r2, r3
 800055c:	435e      	muls	r6, r3
 800055e:	1912      	adds	r2, r2, r4
 8000560:	0c3b      	lsrs	r3, r7, #16
 8000562:	189b      	adds	r3, r3, r2
 8000564:	429c      	cmp	r4, r3
 8000566:	d903      	bls.n	8000570 <__aeabi_fmul+0xd0>
 8000568:	2280      	movs	r2, #128	; 0x80
 800056a:	0252      	lsls	r2, r2, #9
 800056c:	4694      	mov	ip, r2
 800056e:	4466      	add	r6, ip
 8000570:	043f      	lsls	r7, r7, #16
 8000572:	041a      	lsls	r2, r3, #16
 8000574:	0c3f      	lsrs	r7, r7, #16
 8000576:	19d2      	adds	r2, r2, r7
 8000578:	0194      	lsls	r4, r2, #6
 800057a:	1e67      	subs	r7, r4, #1
 800057c:	41bc      	sbcs	r4, r7
 800057e:	0c1b      	lsrs	r3, r3, #16
 8000580:	0e92      	lsrs	r2, r2, #26
 8000582:	199b      	adds	r3, r3, r6
 8000584:	4314      	orrs	r4, r2
 8000586:	019b      	lsls	r3, r3, #6
 8000588:	431c      	orrs	r4, r3
 800058a:	011b      	lsls	r3, r3, #4
 800058c:	d400      	bmi.n	8000590 <__aeabi_fmul+0xf0>
 800058e:	e09b      	b.n	80006c8 <__aeabi_fmul+0x228>
 8000590:	2301      	movs	r3, #1
 8000592:	0862      	lsrs	r2, r4, #1
 8000594:	401c      	ands	r4, r3
 8000596:	4314      	orrs	r4, r2
 8000598:	0002      	movs	r2, r0
 800059a:	327f      	adds	r2, #127	; 0x7f
 800059c:	2a00      	cmp	r2, #0
 800059e:	dd64      	ble.n	800066a <__aeabi_fmul+0x1ca>
 80005a0:	0763      	lsls	r3, r4, #29
 80005a2:	d004      	beq.n	80005ae <__aeabi_fmul+0x10e>
 80005a4:	230f      	movs	r3, #15
 80005a6:	4023      	ands	r3, r4
 80005a8:	2b04      	cmp	r3, #4
 80005aa:	d000      	beq.n	80005ae <__aeabi_fmul+0x10e>
 80005ac:	3404      	adds	r4, #4
 80005ae:	0123      	lsls	r3, r4, #4
 80005b0:	d503      	bpl.n	80005ba <__aeabi_fmul+0x11a>
 80005b2:	0002      	movs	r2, r0
 80005b4:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <__aeabi_fmul+0x248>)
 80005b6:	3280      	adds	r2, #128	; 0x80
 80005b8:	401c      	ands	r4, r3
 80005ba:	2afe      	cmp	r2, #254	; 0xfe
 80005bc:	dcbf      	bgt.n	800053e <__aeabi_fmul+0x9e>
 80005be:	01a4      	lsls	r4, r4, #6
 80005c0:	0a64      	lsrs	r4, r4, #9
 80005c2:	b2d0      	uxtb	r0, r2
 80005c4:	e7b2      	b.n	800052c <__aeabi_fmul+0x8c>
 80005c6:	4643      	mov	r3, r8
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d13d      	bne.n	8000648 <__aeabi_fmul+0x1a8>
 80005cc:	464a      	mov	r2, r9
 80005ce:	3301      	adds	r3, #1
 80005d0:	431a      	orrs	r2, r3
 80005d2:	4691      	mov	r9, r2
 80005d4:	469c      	mov	ip, r3
 80005d6:	e792      	b.n	80004fe <__aeabi_fmul+0x5e>
 80005d8:	2c00      	cmp	r4, #0
 80005da:	d129      	bne.n	8000630 <__aeabi_fmul+0x190>
 80005dc:	2304      	movs	r3, #4
 80005de:	4699      	mov	r9, r3
 80005e0:	3b03      	subs	r3, #3
 80005e2:	2500      	movs	r5, #0
 80005e4:	469a      	mov	sl, r3
 80005e6:	e774      	b.n	80004d2 <__aeabi_fmul+0x32>
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d11b      	bne.n	8000624 <__aeabi_fmul+0x184>
 80005ec:	2308      	movs	r3, #8
 80005ee:	4699      	mov	r9, r3
 80005f0:	3b06      	subs	r3, #6
 80005f2:	25ff      	movs	r5, #255	; 0xff
 80005f4:	469a      	mov	sl, r3
 80005f6:	e76c      	b.n	80004d2 <__aeabi_fmul+0x32>
 80005f8:	4643      	mov	r3, r8
 80005fa:	35ff      	adds	r5, #255	; 0xff
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d10b      	bne.n	8000618 <__aeabi_fmul+0x178>
 8000600:	2302      	movs	r3, #2
 8000602:	464a      	mov	r2, r9
 8000604:	431a      	orrs	r2, r3
 8000606:	4691      	mov	r9, r2
 8000608:	469c      	mov	ip, r3
 800060a:	e778      	b.n	80004fe <__aeabi_fmul+0x5e>
 800060c:	4653      	mov	r3, sl
 800060e:	0031      	movs	r1, r6
 8000610:	2b02      	cmp	r3, #2
 8000612:	d000      	beq.n	8000616 <__aeabi_fmul+0x176>
 8000614:	e783      	b.n	800051e <__aeabi_fmul+0x7e>
 8000616:	e792      	b.n	800053e <__aeabi_fmul+0x9e>
 8000618:	2303      	movs	r3, #3
 800061a:	464a      	mov	r2, r9
 800061c:	431a      	orrs	r2, r3
 800061e:	4691      	mov	r9, r2
 8000620:	469c      	mov	ip, r3
 8000622:	e76c      	b.n	80004fe <__aeabi_fmul+0x5e>
 8000624:	230c      	movs	r3, #12
 8000626:	4699      	mov	r9, r3
 8000628:	3b09      	subs	r3, #9
 800062a:	25ff      	movs	r5, #255	; 0xff
 800062c:	469a      	mov	sl, r3
 800062e:	e750      	b.n	80004d2 <__aeabi_fmul+0x32>
 8000630:	0020      	movs	r0, r4
 8000632:	f000 fab1 	bl	8000b98 <__clzsi2>
 8000636:	2576      	movs	r5, #118	; 0x76
 8000638:	1f43      	subs	r3, r0, #5
 800063a:	409c      	lsls	r4, r3
 800063c:	2300      	movs	r3, #0
 800063e:	426d      	negs	r5, r5
 8000640:	4699      	mov	r9, r3
 8000642:	469a      	mov	sl, r3
 8000644:	1a2d      	subs	r5, r5, r0
 8000646:	e744      	b.n	80004d2 <__aeabi_fmul+0x32>
 8000648:	4640      	mov	r0, r8
 800064a:	f000 faa5 	bl	8000b98 <__clzsi2>
 800064e:	4642      	mov	r2, r8
 8000650:	1f43      	subs	r3, r0, #5
 8000652:	409a      	lsls	r2, r3
 8000654:	2300      	movs	r3, #0
 8000656:	1a2d      	subs	r5, r5, r0
 8000658:	4690      	mov	r8, r2
 800065a:	469c      	mov	ip, r3
 800065c:	3d76      	subs	r5, #118	; 0x76
 800065e:	e74e      	b.n	80004fe <__aeabi_fmul+0x5e>
 8000660:	2480      	movs	r4, #128	; 0x80
 8000662:	2100      	movs	r1, #0
 8000664:	20ff      	movs	r0, #255	; 0xff
 8000666:	03e4      	lsls	r4, r4, #15
 8000668:	e760      	b.n	800052c <__aeabi_fmul+0x8c>
 800066a:	2301      	movs	r3, #1
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	2b1b      	cmp	r3, #27
 8000670:	dd00      	ble.n	8000674 <__aeabi_fmul+0x1d4>
 8000672:	e759      	b.n	8000528 <__aeabi_fmul+0x88>
 8000674:	0022      	movs	r2, r4
 8000676:	309e      	adds	r0, #158	; 0x9e
 8000678:	40da      	lsrs	r2, r3
 800067a:	4084      	lsls	r4, r0
 800067c:	0013      	movs	r3, r2
 800067e:	1e62      	subs	r2, r4, #1
 8000680:	4194      	sbcs	r4, r2
 8000682:	431c      	orrs	r4, r3
 8000684:	0763      	lsls	r3, r4, #29
 8000686:	d004      	beq.n	8000692 <__aeabi_fmul+0x1f2>
 8000688:	230f      	movs	r3, #15
 800068a:	4023      	ands	r3, r4
 800068c:	2b04      	cmp	r3, #4
 800068e:	d000      	beq.n	8000692 <__aeabi_fmul+0x1f2>
 8000690:	3404      	adds	r4, #4
 8000692:	0163      	lsls	r3, r4, #5
 8000694:	d51a      	bpl.n	80006cc <__aeabi_fmul+0x22c>
 8000696:	2001      	movs	r0, #1
 8000698:	2400      	movs	r4, #0
 800069a:	e747      	b.n	800052c <__aeabi_fmul+0x8c>
 800069c:	2080      	movs	r0, #128	; 0x80
 800069e:	03c0      	lsls	r0, r0, #15
 80006a0:	4204      	tst	r4, r0
 80006a2:	d009      	beq.n	80006b8 <__aeabi_fmul+0x218>
 80006a4:	4643      	mov	r3, r8
 80006a6:	4203      	tst	r3, r0
 80006a8:	d106      	bne.n	80006b8 <__aeabi_fmul+0x218>
 80006aa:	4644      	mov	r4, r8
 80006ac:	4304      	orrs	r4, r0
 80006ae:	0264      	lsls	r4, r4, #9
 80006b0:	0039      	movs	r1, r7
 80006b2:	20ff      	movs	r0, #255	; 0xff
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	e739      	b.n	800052c <__aeabi_fmul+0x8c>
 80006b8:	2080      	movs	r0, #128	; 0x80
 80006ba:	03c0      	lsls	r0, r0, #15
 80006bc:	4304      	orrs	r4, r0
 80006be:	0264      	lsls	r4, r4, #9
 80006c0:	0031      	movs	r1, r6
 80006c2:	20ff      	movs	r0, #255	; 0xff
 80006c4:	0a64      	lsrs	r4, r4, #9
 80006c6:	e731      	b.n	800052c <__aeabi_fmul+0x8c>
 80006c8:	0028      	movs	r0, r5
 80006ca:	e765      	b.n	8000598 <__aeabi_fmul+0xf8>
 80006cc:	01a4      	lsls	r4, r4, #6
 80006ce:	2000      	movs	r0, #0
 80006d0:	0a64      	lsrs	r4, r4, #9
 80006d2:	e72b      	b.n	800052c <__aeabi_fmul+0x8c>
 80006d4:	2080      	movs	r0, #128	; 0x80
 80006d6:	03c0      	lsls	r0, r0, #15
 80006d8:	4304      	orrs	r4, r0
 80006da:	0264      	lsls	r4, r4, #9
 80006dc:	20ff      	movs	r0, #255	; 0xff
 80006de:	0a64      	lsrs	r4, r4, #9
 80006e0:	e724      	b.n	800052c <__aeabi_fmul+0x8c>
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	08004544 	.word	0x08004544
 80006e8:	f7ffffff 	.word	0xf7ffffff

080006ec <__aeabi_fsub>:
 80006ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ee:	46ce      	mov	lr, r9
 80006f0:	4647      	mov	r7, r8
 80006f2:	0243      	lsls	r3, r0, #9
 80006f4:	0a5b      	lsrs	r3, r3, #9
 80006f6:	024e      	lsls	r6, r1, #9
 80006f8:	00da      	lsls	r2, r3, #3
 80006fa:	4694      	mov	ip, r2
 80006fc:	0a72      	lsrs	r2, r6, #9
 80006fe:	4691      	mov	r9, r2
 8000700:	0045      	lsls	r5, r0, #1
 8000702:	004a      	lsls	r2, r1, #1
 8000704:	b580      	push	{r7, lr}
 8000706:	0e2d      	lsrs	r5, r5, #24
 8000708:	001f      	movs	r7, r3
 800070a:	0fc4      	lsrs	r4, r0, #31
 800070c:	0e12      	lsrs	r2, r2, #24
 800070e:	0fc9      	lsrs	r1, r1, #31
 8000710:	09b6      	lsrs	r6, r6, #6
 8000712:	2aff      	cmp	r2, #255	; 0xff
 8000714:	d05b      	beq.n	80007ce <__aeabi_fsub+0xe2>
 8000716:	2001      	movs	r0, #1
 8000718:	4041      	eors	r1, r0
 800071a:	428c      	cmp	r4, r1
 800071c:	d039      	beq.n	8000792 <__aeabi_fsub+0xa6>
 800071e:	1aa8      	subs	r0, r5, r2
 8000720:	2800      	cmp	r0, #0
 8000722:	dd5a      	ble.n	80007da <__aeabi_fsub+0xee>
 8000724:	2a00      	cmp	r2, #0
 8000726:	d06a      	beq.n	80007fe <__aeabi_fsub+0x112>
 8000728:	2dff      	cmp	r5, #255	; 0xff
 800072a:	d100      	bne.n	800072e <__aeabi_fsub+0x42>
 800072c:	e0d9      	b.n	80008e2 <__aeabi_fsub+0x1f6>
 800072e:	2280      	movs	r2, #128	; 0x80
 8000730:	04d2      	lsls	r2, r2, #19
 8000732:	4316      	orrs	r6, r2
 8000734:	281b      	cmp	r0, #27
 8000736:	dc00      	bgt.n	800073a <__aeabi_fsub+0x4e>
 8000738:	e0e9      	b.n	800090e <__aeabi_fsub+0x222>
 800073a:	2001      	movs	r0, #1
 800073c:	4663      	mov	r3, ip
 800073e:	1a18      	subs	r0, r3, r0
 8000740:	0143      	lsls	r3, r0, #5
 8000742:	d400      	bmi.n	8000746 <__aeabi_fsub+0x5a>
 8000744:	e0b4      	b.n	80008b0 <__aeabi_fsub+0x1c4>
 8000746:	0180      	lsls	r0, r0, #6
 8000748:	0987      	lsrs	r7, r0, #6
 800074a:	0038      	movs	r0, r7
 800074c:	f000 fa24 	bl	8000b98 <__clzsi2>
 8000750:	3805      	subs	r0, #5
 8000752:	4087      	lsls	r7, r0
 8000754:	4285      	cmp	r5, r0
 8000756:	dc00      	bgt.n	800075a <__aeabi_fsub+0x6e>
 8000758:	e0cc      	b.n	80008f4 <__aeabi_fsub+0x208>
 800075a:	1a2d      	subs	r5, r5, r0
 800075c:	48b5      	ldr	r0, [pc, #724]	; (8000a34 <__aeabi_fsub+0x348>)
 800075e:	4038      	ands	r0, r7
 8000760:	0743      	lsls	r3, r0, #29
 8000762:	d004      	beq.n	800076e <__aeabi_fsub+0x82>
 8000764:	230f      	movs	r3, #15
 8000766:	4003      	ands	r3, r0
 8000768:	2b04      	cmp	r3, #4
 800076a:	d000      	beq.n	800076e <__aeabi_fsub+0x82>
 800076c:	3004      	adds	r0, #4
 800076e:	0143      	lsls	r3, r0, #5
 8000770:	d400      	bmi.n	8000774 <__aeabi_fsub+0x88>
 8000772:	e0a0      	b.n	80008b6 <__aeabi_fsub+0x1ca>
 8000774:	1c6a      	adds	r2, r5, #1
 8000776:	2dfe      	cmp	r5, #254	; 0xfe
 8000778:	d100      	bne.n	800077c <__aeabi_fsub+0x90>
 800077a:	e08d      	b.n	8000898 <__aeabi_fsub+0x1ac>
 800077c:	0180      	lsls	r0, r0, #6
 800077e:	0a47      	lsrs	r7, r0, #9
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	05d0      	lsls	r0, r2, #23
 8000784:	4338      	orrs	r0, r7
 8000786:	07e4      	lsls	r4, r4, #31
 8000788:	4320      	orrs	r0, r4
 800078a:	bcc0      	pop	{r6, r7}
 800078c:	46b9      	mov	r9, r7
 800078e:	46b0      	mov	r8, r6
 8000790:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000792:	1aa8      	subs	r0, r5, r2
 8000794:	4680      	mov	r8, r0
 8000796:	2800      	cmp	r0, #0
 8000798:	dd45      	ble.n	8000826 <__aeabi_fsub+0x13a>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d070      	beq.n	8000880 <__aeabi_fsub+0x194>
 800079e:	2dff      	cmp	r5, #255	; 0xff
 80007a0:	d100      	bne.n	80007a4 <__aeabi_fsub+0xb8>
 80007a2:	e09e      	b.n	80008e2 <__aeabi_fsub+0x1f6>
 80007a4:	2380      	movs	r3, #128	; 0x80
 80007a6:	04db      	lsls	r3, r3, #19
 80007a8:	431e      	orrs	r6, r3
 80007aa:	4643      	mov	r3, r8
 80007ac:	2b1b      	cmp	r3, #27
 80007ae:	dc00      	bgt.n	80007b2 <__aeabi_fsub+0xc6>
 80007b0:	e0d2      	b.n	8000958 <__aeabi_fsub+0x26c>
 80007b2:	2001      	movs	r0, #1
 80007b4:	4460      	add	r0, ip
 80007b6:	0143      	lsls	r3, r0, #5
 80007b8:	d57a      	bpl.n	80008b0 <__aeabi_fsub+0x1c4>
 80007ba:	3501      	adds	r5, #1
 80007bc:	2dff      	cmp	r5, #255	; 0xff
 80007be:	d06b      	beq.n	8000898 <__aeabi_fsub+0x1ac>
 80007c0:	2301      	movs	r3, #1
 80007c2:	4a9d      	ldr	r2, [pc, #628]	; (8000a38 <__aeabi_fsub+0x34c>)
 80007c4:	4003      	ands	r3, r0
 80007c6:	0840      	lsrs	r0, r0, #1
 80007c8:	4010      	ands	r0, r2
 80007ca:	4318      	orrs	r0, r3
 80007cc:	e7c8      	b.n	8000760 <__aeabi_fsub+0x74>
 80007ce:	2e00      	cmp	r6, #0
 80007d0:	d020      	beq.n	8000814 <__aeabi_fsub+0x128>
 80007d2:	428c      	cmp	r4, r1
 80007d4:	d023      	beq.n	800081e <__aeabi_fsub+0x132>
 80007d6:	0028      	movs	r0, r5
 80007d8:	38ff      	subs	r0, #255	; 0xff
 80007da:	2800      	cmp	r0, #0
 80007dc:	d039      	beq.n	8000852 <__aeabi_fsub+0x166>
 80007de:	1b57      	subs	r7, r2, r5
 80007e0:	2d00      	cmp	r5, #0
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fsub+0xfa>
 80007e4:	e09d      	b.n	8000922 <__aeabi_fsub+0x236>
 80007e6:	4663      	mov	r3, ip
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d100      	bne.n	80007ee <__aeabi_fsub+0x102>
 80007ec:	e0db      	b.n	80009a6 <__aeabi_fsub+0x2ba>
 80007ee:	1e7b      	subs	r3, r7, #1
 80007f0:	2f01      	cmp	r7, #1
 80007f2:	d100      	bne.n	80007f6 <__aeabi_fsub+0x10a>
 80007f4:	e10d      	b.n	8000a12 <__aeabi_fsub+0x326>
 80007f6:	2fff      	cmp	r7, #255	; 0xff
 80007f8:	d071      	beq.n	80008de <__aeabi_fsub+0x1f2>
 80007fa:	001f      	movs	r7, r3
 80007fc:	e098      	b.n	8000930 <__aeabi_fsub+0x244>
 80007fe:	2e00      	cmp	r6, #0
 8000800:	d100      	bne.n	8000804 <__aeabi_fsub+0x118>
 8000802:	e0a7      	b.n	8000954 <__aeabi_fsub+0x268>
 8000804:	1e42      	subs	r2, r0, #1
 8000806:	2801      	cmp	r0, #1
 8000808:	d100      	bne.n	800080c <__aeabi_fsub+0x120>
 800080a:	e0e6      	b.n	80009da <__aeabi_fsub+0x2ee>
 800080c:	28ff      	cmp	r0, #255	; 0xff
 800080e:	d068      	beq.n	80008e2 <__aeabi_fsub+0x1f6>
 8000810:	0010      	movs	r0, r2
 8000812:	e78f      	b.n	8000734 <__aeabi_fsub+0x48>
 8000814:	2001      	movs	r0, #1
 8000816:	4041      	eors	r1, r0
 8000818:	42a1      	cmp	r1, r4
 800081a:	d000      	beq.n	800081e <__aeabi_fsub+0x132>
 800081c:	e77f      	b.n	800071e <__aeabi_fsub+0x32>
 800081e:	20ff      	movs	r0, #255	; 0xff
 8000820:	4240      	negs	r0, r0
 8000822:	4680      	mov	r8, r0
 8000824:	44a8      	add	r8, r5
 8000826:	4640      	mov	r0, r8
 8000828:	2800      	cmp	r0, #0
 800082a:	d038      	beq.n	800089e <__aeabi_fsub+0x1b2>
 800082c:	1b51      	subs	r1, r2, r5
 800082e:	2d00      	cmp	r5, #0
 8000830:	d100      	bne.n	8000834 <__aeabi_fsub+0x148>
 8000832:	e0ae      	b.n	8000992 <__aeabi_fsub+0x2a6>
 8000834:	2aff      	cmp	r2, #255	; 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fsub+0x14e>
 8000838:	e0df      	b.n	80009fa <__aeabi_fsub+0x30e>
 800083a:	2380      	movs	r3, #128	; 0x80
 800083c:	4660      	mov	r0, ip
 800083e:	04db      	lsls	r3, r3, #19
 8000840:	4318      	orrs	r0, r3
 8000842:	4684      	mov	ip, r0
 8000844:	291b      	cmp	r1, #27
 8000846:	dc00      	bgt.n	800084a <__aeabi_fsub+0x15e>
 8000848:	e0d9      	b.n	80009fe <__aeabi_fsub+0x312>
 800084a:	2001      	movs	r0, #1
 800084c:	0015      	movs	r5, r2
 800084e:	1980      	adds	r0, r0, r6
 8000850:	e7b1      	b.n	80007b6 <__aeabi_fsub+0xca>
 8000852:	20fe      	movs	r0, #254	; 0xfe
 8000854:	1c6a      	adds	r2, r5, #1
 8000856:	4210      	tst	r0, r2
 8000858:	d171      	bne.n	800093e <__aeabi_fsub+0x252>
 800085a:	2d00      	cmp	r5, #0
 800085c:	d000      	beq.n	8000860 <__aeabi_fsub+0x174>
 800085e:	e0a6      	b.n	80009ae <__aeabi_fsub+0x2c2>
 8000860:	4663      	mov	r3, ip
 8000862:	2b00      	cmp	r3, #0
 8000864:	d100      	bne.n	8000868 <__aeabi_fsub+0x17c>
 8000866:	e0d9      	b.n	8000a1c <__aeabi_fsub+0x330>
 8000868:	2200      	movs	r2, #0
 800086a:	2e00      	cmp	r6, #0
 800086c:	d100      	bne.n	8000870 <__aeabi_fsub+0x184>
 800086e:	e788      	b.n	8000782 <__aeabi_fsub+0x96>
 8000870:	1b98      	subs	r0, r3, r6
 8000872:	0143      	lsls	r3, r0, #5
 8000874:	d400      	bmi.n	8000878 <__aeabi_fsub+0x18c>
 8000876:	e0e1      	b.n	8000a3c <__aeabi_fsub+0x350>
 8000878:	4663      	mov	r3, ip
 800087a:	000c      	movs	r4, r1
 800087c:	1af0      	subs	r0, r6, r3
 800087e:	e76f      	b.n	8000760 <__aeabi_fsub+0x74>
 8000880:	2e00      	cmp	r6, #0
 8000882:	d100      	bne.n	8000886 <__aeabi_fsub+0x19a>
 8000884:	e0b7      	b.n	80009f6 <__aeabi_fsub+0x30a>
 8000886:	0002      	movs	r2, r0
 8000888:	3a01      	subs	r2, #1
 800088a:	2801      	cmp	r0, #1
 800088c:	d100      	bne.n	8000890 <__aeabi_fsub+0x1a4>
 800088e:	e09c      	b.n	80009ca <__aeabi_fsub+0x2de>
 8000890:	28ff      	cmp	r0, #255	; 0xff
 8000892:	d026      	beq.n	80008e2 <__aeabi_fsub+0x1f6>
 8000894:	4690      	mov	r8, r2
 8000896:	e788      	b.n	80007aa <__aeabi_fsub+0xbe>
 8000898:	22ff      	movs	r2, #255	; 0xff
 800089a:	2700      	movs	r7, #0
 800089c:	e771      	b.n	8000782 <__aeabi_fsub+0x96>
 800089e:	20fe      	movs	r0, #254	; 0xfe
 80008a0:	1c6a      	adds	r2, r5, #1
 80008a2:	4210      	tst	r0, r2
 80008a4:	d064      	beq.n	8000970 <__aeabi_fsub+0x284>
 80008a6:	2aff      	cmp	r2, #255	; 0xff
 80008a8:	d0f6      	beq.n	8000898 <__aeabi_fsub+0x1ac>
 80008aa:	0015      	movs	r5, r2
 80008ac:	4466      	add	r6, ip
 80008ae:	0870      	lsrs	r0, r6, #1
 80008b0:	0743      	lsls	r3, r0, #29
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fsub+0x1ca>
 80008b4:	e756      	b.n	8000764 <__aeabi_fsub+0x78>
 80008b6:	08c3      	lsrs	r3, r0, #3
 80008b8:	2dff      	cmp	r5, #255	; 0xff
 80008ba:	d012      	beq.n	80008e2 <__aeabi_fsub+0x1f6>
 80008bc:	025b      	lsls	r3, r3, #9
 80008be:	0a5f      	lsrs	r7, r3, #9
 80008c0:	b2ea      	uxtb	r2, r5
 80008c2:	e75e      	b.n	8000782 <__aeabi_fsub+0x96>
 80008c4:	4662      	mov	r2, ip
 80008c6:	2a00      	cmp	r2, #0
 80008c8:	d100      	bne.n	80008cc <__aeabi_fsub+0x1e0>
 80008ca:	e096      	b.n	80009fa <__aeabi_fsub+0x30e>
 80008cc:	2e00      	cmp	r6, #0
 80008ce:	d008      	beq.n	80008e2 <__aeabi_fsub+0x1f6>
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	03d2      	lsls	r2, r2, #15
 80008d4:	4213      	tst	r3, r2
 80008d6:	d004      	beq.n	80008e2 <__aeabi_fsub+0x1f6>
 80008d8:	4648      	mov	r0, r9
 80008da:	4210      	tst	r0, r2
 80008dc:	d101      	bne.n	80008e2 <__aeabi_fsub+0x1f6>
 80008de:	000c      	movs	r4, r1
 80008e0:	464b      	mov	r3, r9
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0d8      	beq.n	8000898 <__aeabi_fsub+0x1ac>
 80008e6:	2780      	movs	r7, #128	; 0x80
 80008e8:	03ff      	lsls	r7, r7, #15
 80008ea:	431f      	orrs	r7, r3
 80008ec:	027f      	lsls	r7, r7, #9
 80008ee:	22ff      	movs	r2, #255	; 0xff
 80008f0:	0a7f      	lsrs	r7, r7, #9
 80008f2:	e746      	b.n	8000782 <__aeabi_fsub+0x96>
 80008f4:	2320      	movs	r3, #32
 80008f6:	003a      	movs	r2, r7
 80008f8:	1b45      	subs	r5, r0, r5
 80008fa:	0038      	movs	r0, r7
 80008fc:	3501      	adds	r5, #1
 80008fe:	40ea      	lsrs	r2, r5
 8000900:	1b5d      	subs	r5, r3, r5
 8000902:	40a8      	lsls	r0, r5
 8000904:	1e43      	subs	r3, r0, #1
 8000906:	4198      	sbcs	r0, r3
 8000908:	2500      	movs	r5, #0
 800090a:	4310      	orrs	r0, r2
 800090c:	e728      	b.n	8000760 <__aeabi_fsub+0x74>
 800090e:	2320      	movs	r3, #32
 8000910:	1a1b      	subs	r3, r3, r0
 8000912:	0032      	movs	r2, r6
 8000914:	409e      	lsls	r6, r3
 8000916:	40c2      	lsrs	r2, r0
 8000918:	0030      	movs	r0, r6
 800091a:	1e43      	subs	r3, r0, #1
 800091c:	4198      	sbcs	r0, r3
 800091e:	4310      	orrs	r0, r2
 8000920:	e70c      	b.n	800073c <__aeabi_fsub+0x50>
 8000922:	2aff      	cmp	r2, #255	; 0xff
 8000924:	d0db      	beq.n	80008de <__aeabi_fsub+0x1f2>
 8000926:	2380      	movs	r3, #128	; 0x80
 8000928:	4660      	mov	r0, ip
 800092a:	04db      	lsls	r3, r3, #19
 800092c:	4318      	orrs	r0, r3
 800092e:	4684      	mov	ip, r0
 8000930:	2f1b      	cmp	r7, #27
 8000932:	dd56      	ble.n	80009e2 <__aeabi_fsub+0x2f6>
 8000934:	2001      	movs	r0, #1
 8000936:	000c      	movs	r4, r1
 8000938:	0015      	movs	r5, r2
 800093a:	1a30      	subs	r0, r6, r0
 800093c:	e700      	b.n	8000740 <__aeabi_fsub+0x54>
 800093e:	4663      	mov	r3, ip
 8000940:	1b9f      	subs	r7, r3, r6
 8000942:	017b      	lsls	r3, r7, #5
 8000944:	d43d      	bmi.n	80009c2 <__aeabi_fsub+0x2d6>
 8000946:	2f00      	cmp	r7, #0
 8000948:	d000      	beq.n	800094c <__aeabi_fsub+0x260>
 800094a:	e6fe      	b.n	800074a <__aeabi_fsub+0x5e>
 800094c:	2400      	movs	r4, #0
 800094e:	2200      	movs	r2, #0
 8000950:	2700      	movs	r7, #0
 8000952:	e716      	b.n	8000782 <__aeabi_fsub+0x96>
 8000954:	0005      	movs	r5, r0
 8000956:	e7af      	b.n	80008b8 <__aeabi_fsub+0x1cc>
 8000958:	0032      	movs	r2, r6
 800095a:	4643      	mov	r3, r8
 800095c:	4641      	mov	r1, r8
 800095e:	40da      	lsrs	r2, r3
 8000960:	2320      	movs	r3, #32
 8000962:	1a5b      	subs	r3, r3, r1
 8000964:	409e      	lsls	r6, r3
 8000966:	0030      	movs	r0, r6
 8000968:	1e43      	subs	r3, r0, #1
 800096a:	4198      	sbcs	r0, r3
 800096c:	4310      	orrs	r0, r2
 800096e:	e721      	b.n	80007b4 <__aeabi_fsub+0xc8>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d1a7      	bne.n	80008c4 <__aeabi_fsub+0x1d8>
 8000974:	4663      	mov	r3, ip
 8000976:	2b00      	cmp	r3, #0
 8000978:	d059      	beq.n	8000a2e <__aeabi_fsub+0x342>
 800097a:	2200      	movs	r2, #0
 800097c:	2e00      	cmp	r6, #0
 800097e:	d100      	bne.n	8000982 <__aeabi_fsub+0x296>
 8000980:	e6ff      	b.n	8000782 <__aeabi_fsub+0x96>
 8000982:	0030      	movs	r0, r6
 8000984:	4460      	add	r0, ip
 8000986:	0143      	lsls	r3, r0, #5
 8000988:	d592      	bpl.n	80008b0 <__aeabi_fsub+0x1c4>
 800098a:	4b2a      	ldr	r3, [pc, #168]	; (8000a34 <__aeabi_fsub+0x348>)
 800098c:	3501      	adds	r5, #1
 800098e:	4018      	ands	r0, r3
 8000990:	e78e      	b.n	80008b0 <__aeabi_fsub+0x1c4>
 8000992:	4663      	mov	r3, ip
 8000994:	2b00      	cmp	r3, #0
 8000996:	d047      	beq.n	8000a28 <__aeabi_fsub+0x33c>
 8000998:	1e4b      	subs	r3, r1, #1
 800099a:	2901      	cmp	r1, #1
 800099c:	d015      	beq.n	80009ca <__aeabi_fsub+0x2de>
 800099e:	29ff      	cmp	r1, #255	; 0xff
 80009a0:	d02b      	beq.n	80009fa <__aeabi_fsub+0x30e>
 80009a2:	0019      	movs	r1, r3
 80009a4:	e74e      	b.n	8000844 <__aeabi_fsub+0x158>
 80009a6:	000c      	movs	r4, r1
 80009a8:	464b      	mov	r3, r9
 80009aa:	003d      	movs	r5, r7
 80009ac:	e784      	b.n	80008b8 <__aeabi_fsub+0x1cc>
 80009ae:	4662      	mov	r2, ip
 80009b0:	2a00      	cmp	r2, #0
 80009b2:	d18b      	bne.n	80008cc <__aeabi_fsub+0x1e0>
 80009b4:	2e00      	cmp	r6, #0
 80009b6:	d192      	bne.n	80008de <__aeabi_fsub+0x1f2>
 80009b8:	2780      	movs	r7, #128	; 0x80
 80009ba:	2400      	movs	r4, #0
 80009bc:	22ff      	movs	r2, #255	; 0xff
 80009be:	03ff      	lsls	r7, r7, #15
 80009c0:	e6df      	b.n	8000782 <__aeabi_fsub+0x96>
 80009c2:	4663      	mov	r3, ip
 80009c4:	000c      	movs	r4, r1
 80009c6:	1af7      	subs	r7, r6, r3
 80009c8:	e6bf      	b.n	800074a <__aeabi_fsub+0x5e>
 80009ca:	0030      	movs	r0, r6
 80009cc:	4460      	add	r0, ip
 80009ce:	2501      	movs	r5, #1
 80009d0:	0143      	lsls	r3, r0, #5
 80009d2:	d400      	bmi.n	80009d6 <__aeabi_fsub+0x2ea>
 80009d4:	e76c      	b.n	80008b0 <__aeabi_fsub+0x1c4>
 80009d6:	2502      	movs	r5, #2
 80009d8:	e6f2      	b.n	80007c0 <__aeabi_fsub+0xd4>
 80009da:	4663      	mov	r3, ip
 80009dc:	2501      	movs	r5, #1
 80009de:	1b98      	subs	r0, r3, r6
 80009e0:	e6ae      	b.n	8000740 <__aeabi_fsub+0x54>
 80009e2:	2320      	movs	r3, #32
 80009e4:	4664      	mov	r4, ip
 80009e6:	4660      	mov	r0, ip
 80009e8:	40fc      	lsrs	r4, r7
 80009ea:	1bdf      	subs	r7, r3, r7
 80009ec:	40b8      	lsls	r0, r7
 80009ee:	1e43      	subs	r3, r0, #1
 80009f0:	4198      	sbcs	r0, r3
 80009f2:	4320      	orrs	r0, r4
 80009f4:	e79f      	b.n	8000936 <__aeabi_fsub+0x24a>
 80009f6:	0005      	movs	r5, r0
 80009f8:	e75e      	b.n	80008b8 <__aeabi_fsub+0x1cc>
 80009fa:	464b      	mov	r3, r9
 80009fc:	e771      	b.n	80008e2 <__aeabi_fsub+0x1f6>
 80009fe:	2320      	movs	r3, #32
 8000a00:	4665      	mov	r5, ip
 8000a02:	4660      	mov	r0, ip
 8000a04:	40cd      	lsrs	r5, r1
 8000a06:	1a59      	subs	r1, r3, r1
 8000a08:	4088      	lsls	r0, r1
 8000a0a:	1e43      	subs	r3, r0, #1
 8000a0c:	4198      	sbcs	r0, r3
 8000a0e:	4328      	orrs	r0, r5
 8000a10:	e71c      	b.n	800084c <__aeabi_fsub+0x160>
 8000a12:	4663      	mov	r3, ip
 8000a14:	000c      	movs	r4, r1
 8000a16:	2501      	movs	r5, #1
 8000a18:	1af0      	subs	r0, r6, r3
 8000a1a:	e691      	b.n	8000740 <__aeabi_fsub+0x54>
 8000a1c:	2e00      	cmp	r6, #0
 8000a1e:	d095      	beq.n	800094c <__aeabi_fsub+0x260>
 8000a20:	000c      	movs	r4, r1
 8000a22:	464f      	mov	r7, r9
 8000a24:	2200      	movs	r2, #0
 8000a26:	e6ac      	b.n	8000782 <__aeabi_fsub+0x96>
 8000a28:	464b      	mov	r3, r9
 8000a2a:	000d      	movs	r5, r1
 8000a2c:	e744      	b.n	80008b8 <__aeabi_fsub+0x1cc>
 8000a2e:	464f      	mov	r7, r9
 8000a30:	2200      	movs	r2, #0
 8000a32:	e6a6      	b.n	8000782 <__aeabi_fsub+0x96>
 8000a34:	fbffffff 	.word	0xfbffffff
 8000a38:	7dffffff 	.word	0x7dffffff
 8000a3c:	2800      	cmp	r0, #0
 8000a3e:	d000      	beq.n	8000a42 <__aeabi_fsub+0x356>
 8000a40:	e736      	b.n	80008b0 <__aeabi_fsub+0x1c4>
 8000a42:	2400      	movs	r4, #0
 8000a44:	2700      	movs	r7, #0
 8000a46:	e69c      	b.n	8000782 <__aeabi_fsub+0x96>

08000a48 <__aeabi_f2iz>:
 8000a48:	0241      	lsls	r1, r0, #9
 8000a4a:	0042      	lsls	r2, r0, #1
 8000a4c:	0fc3      	lsrs	r3, r0, #31
 8000a4e:	0a49      	lsrs	r1, r1, #9
 8000a50:	2000      	movs	r0, #0
 8000a52:	0e12      	lsrs	r2, r2, #24
 8000a54:	2a7e      	cmp	r2, #126	; 0x7e
 8000a56:	dd03      	ble.n	8000a60 <__aeabi_f2iz+0x18>
 8000a58:	2a9d      	cmp	r2, #157	; 0x9d
 8000a5a:	dd02      	ble.n	8000a62 <__aeabi_f2iz+0x1a>
 8000a5c:	4a09      	ldr	r2, [pc, #36]	; (8000a84 <__aeabi_f2iz+0x3c>)
 8000a5e:	1898      	adds	r0, r3, r2
 8000a60:	4770      	bx	lr
 8000a62:	2080      	movs	r0, #128	; 0x80
 8000a64:	0400      	lsls	r0, r0, #16
 8000a66:	4301      	orrs	r1, r0
 8000a68:	2a95      	cmp	r2, #149	; 0x95
 8000a6a:	dc07      	bgt.n	8000a7c <__aeabi_f2iz+0x34>
 8000a6c:	2096      	movs	r0, #150	; 0x96
 8000a6e:	1a82      	subs	r2, r0, r2
 8000a70:	40d1      	lsrs	r1, r2
 8000a72:	4248      	negs	r0, r1
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d1f3      	bne.n	8000a60 <__aeabi_f2iz+0x18>
 8000a78:	0008      	movs	r0, r1
 8000a7a:	e7f1      	b.n	8000a60 <__aeabi_f2iz+0x18>
 8000a7c:	3a96      	subs	r2, #150	; 0x96
 8000a7e:	4091      	lsls	r1, r2
 8000a80:	e7f7      	b.n	8000a72 <__aeabi_f2iz+0x2a>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	7fffffff 	.word	0x7fffffff

08000a88 <__aeabi_i2f>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d013      	beq.n	8000ab6 <__aeabi_i2f+0x2e>
 8000a8e:	17c3      	asrs	r3, r0, #31
 8000a90:	18c6      	adds	r6, r0, r3
 8000a92:	405e      	eors	r6, r3
 8000a94:	0fc4      	lsrs	r4, r0, #31
 8000a96:	0030      	movs	r0, r6
 8000a98:	f000 f87e 	bl	8000b98 <__clzsi2>
 8000a9c:	239e      	movs	r3, #158	; 0x9e
 8000a9e:	0005      	movs	r5, r0
 8000aa0:	1a1b      	subs	r3, r3, r0
 8000aa2:	2b96      	cmp	r3, #150	; 0x96
 8000aa4:	dc0f      	bgt.n	8000ac6 <__aeabi_i2f+0x3e>
 8000aa6:	2808      	cmp	r0, #8
 8000aa8:	dd01      	ble.n	8000aae <__aeabi_i2f+0x26>
 8000aaa:	3d08      	subs	r5, #8
 8000aac:	40ae      	lsls	r6, r5
 8000aae:	0276      	lsls	r6, r6, #9
 8000ab0:	0a76      	lsrs	r6, r6, #9
 8000ab2:	b2d8      	uxtb	r0, r3
 8000ab4:	e002      	b.n	8000abc <__aeabi_i2f+0x34>
 8000ab6:	2400      	movs	r4, #0
 8000ab8:	2000      	movs	r0, #0
 8000aba:	2600      	movs	r6, #0
 8000abc:	05c0      	lsls	r0, r0, #23
 8000abe:	4330      	orrs	r0, r6
 8000ac0:	07e4      	lsls	r4, r4, #31
 8000ac2:	4320      	orrs	r0, r4
 8000ac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ac6:	2b99      	cmp	r3, #153	; 0x99
 8000ac8:	dd0c      	ble.n	8000ae4 <__aeabi_i2f+0x5c>
 8000aca:	2205      	movs	r2, #5
 8000acc:	0031      	movs	r1, r6
 8000ace:	1a12      	subs	r2, r2, r0
 8000ad0:	40d1      	lsrs	r1, r2
 8000ad2:	000a      	movs	r2, r1
 8000ad4:	0001      	movs	r1, r0
 8000ad6:	0030      	movs	r0, r6
 8000ad8:	311b      	adds	r1, #27
 8000ada:	4088      	lsls	r0, r1
 8000adc:	1e41      	subs	r1, r0, #1
 8000ade:	4188      	sbcs	r0, r1
 8000ae0:	4302      	orrs	r2, r0
 8000ae2:	0016      	movs	r6, r2
 8000ae4:	2d05      	cmp	r5, #5
 8000ae6:	dc12      	bgt.n	8000b0e <__aeabi_i2f+0x86>
 8000ae8:	0031      	movs	r1, r6
 8000aea:	4f0d      	ldr	r7, [pc, #52]	; (8000b20 <__aeabi_i2f+0x98>)
 8000aec:	4039      	ands	r1, r7
 8000aee:	0772      	lsls	r2, r6, #29
 8000af0:	d009      	beq.n	8000b06 <__aeabi_i2f+0x7e>
 8000af2:	200f      	movs	r0, #15
 8000af4:	4030      	ands	r0, r6
 8000af6:	2804      	cmp	r0, #4
 8000af8:	d005      	beq.n	8000b06 <__aeabi_i2f+0x7e>
 8000afa:	3104      	adds	r1, #4
 8000afc:	014a      	lsls	r2, r1, #5
 8000afe:	d502      	bpl.n	8000b06 <__aeabi_i2f+0x7e>
 8000b00:	239f      	movs	r3, #159	; 0x9f
 8000b02:	4039      	ands	r1, r7
 8000b04:	1b5b      	subs	r3, r3, r5
 8000b06:	0189      	lsls	r1, r1, #6
 8000b08:	0a4e      	lsrs	r6, r1, #9
 8000b0a:	b2d8      	uxtb	r0, r3
 8000b0c:	e7d6      	b.n	8000abc <__aeabi_i2f+0x34>
 8000b0e:	1f6a      	subs	r2, r5, #5
 8000b10:	4096      	lsls	r6, r2
 8000b12:	0031      	movs	r1, r6
 8000b14:	4f02      	ldr	r7, [pc, #8]	; (8000b20 <__aeabi_i2f+0x98>)
 8000b16:	4039      	ands	r1, r7
 8000b18:	0772      	lsls	r2, r6, #29
 8000b1a:	d0f4      	beq.n	8000b06 <__aeabi_i2f+0x7e>
 8000b1c:	e7e9      	b.n	8000af2 <__aeabi_i2f+0x6a>
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	fbffffff 	.word	0xfbffffff

08000b24 <__aeabi_cfrcmple>:
 8000b24:	4684      	mov	ip, r0
 8000b26:	0008      	movs	r0, r1
 8000b28:	4661      	mov	r1, ip
 8000b2a:	e7ff      	b.n	8000b2c <__aeabi_cfcmpeq>

08000b2c <__aeabi_cfcmpeq>:
 8000b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000b2e:	f000 f8bd 	bl	8000cac <__lesf2>
 8000b32:	2800      	cmp	r0, #0
 8000b34:	d401      	bmi.n	8000b3a <__aeabi_cfcmpeq+0xe>
 8000b36:	2100      	movs	r1, #0
 8000b38:	42c8      	cmn	r0, r1
 8000b3a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000b3c <__aeabi_fcmpeq>:
 8000b3c:	b510      	push	{r4, lr}
 8000b3e:	f000 f849 	bl	8000bd4 <__eqsf2>
 8000b42:	4240      	negs	r0, r0
 8000b44:	3001      	adds	r0, #1
 8000b46:	bd10      	pop	{r4, pc}

08000b48 <__aeabi_fcmplt>:
 8000b48:	b510      	push	{r4, lr}
 8000b4a:	f000 f8af 	bl	8000cac <__lesf2>
 8000b4e:	2800      	cmp	r0, #0
 8000b50:	db01      	blt.n	8000b56 <__aeabi_fcmplt+0xe>
 8000b52:	2000      	movs	r0, #0
 8000b54:	bd10      	pop	{r4, pc}
 8000b56:	2001      	movs	r0, #1
 8000b58:	bd10      	pop	{r4, pc}
 8000b5a:	46c0      	nop			; (mov r8, r8)

08000b5c <__aeabi_fcmple>:
 8000b5c:	b510      	push	{r4, lr}
 8000b5e:	f000 f8a5 	bl	8000cac <__lesf2>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	dd01      	ble.n	8000b6a <__aeabi_fcmple+0xe>
 8000b66:	2000      	movs	r0, #0
 8000b68:	bd10      	pop	{r4, pc}
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	bd10      	pop	{r4, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)

08000b70 <__aeabi_fcmpgt>:
 8000b70:	b510      	push	{r4, lr}
 8000b72:	f000 f855 	bl	8000c20 <__gesf2>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	dc01      	bgt.n	8000b7e <__aeabi_fcmpgt+0xe>
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	bd10      	pop	{r4, pc}
 8000b7e:	2001      	movs	r0, #1
 8000b80:	bd10      	pop	{r4, pc}
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <__aeabi_fcmpge>:
 8000b84:	b510      	push	{r4, lr}
 8000b86:	f000 f84b 	bl	8000c20 <__gesf2>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	da01      	bge.n	8000b92 <__aeabi_fcmpge+0xe>
 8000b8e:	2000      	movs	r0, #0
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	2001      	movs	r0, #1
 8000b94:	bd10      	pop	{r4, pc}
 8000b96:	46c0      	nop			; (mov r8, r8)

08000b98 <__clzsi2>:
 8000b98:	211c      	movs	r1, #28
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	4298      	cmp	r0, r3
 8000ba0:	d301      	bcc.n	8000ba6 <__clzsi2+0xe>
 8000ba2:	0c00      	lsrs	r0, r0, #16
 8000ba4:	3910      	subs	r1, #16
 8000ba6:	0a1b      	lsrs	r3, r3, #8
 8000ba8:	4298      	cmp	r0, r3
 8000baa:	d301      	bcc.n	8000bb0 <__clzsi2+0x18>
 8000bac:	0a00      	lsrs	r0, r0, #8
 8000bae:	3908      	subs	r1, #8
 8000bb0:	091b      	lsrs	r3, r3, #4
 8000bb2:	4298      	cmp	r0, r3
 8000bb4:	d301      	bcc.n	8000bba <__clzsi2+0x22>
 8000bb6:	0900      	lsrs	r0, r0, #4
 8000bb8:	3904      	subs	r1, #4
 8000bba:	a202      	add	r2, pc, #8	; (adr r2, 8000bc4 <__clzsi2+0x2c>)
 8000bbc:	5c10      	ldrb	r0, [r2, r0]
 8000bbe:	1840      	adds	r0, r0, r1
 8000bc0:	4770      	bx	lr
 8000bc2:	46c0      	nop			; (mov r8, r8)
 8000bc4:	02020304 	.word	0x02020304
 8000bc8:	01010101 	.word	0x01010101
	...

08000bd4 <__eqsf2>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	0042      	lsls	r2, r0, #1
 8000bd8:	0245      	lsls	r5, r0, #9
 8000bda:	024e      	lsls	r6, r1, #9
 8000bdc:	004c      	lsls	r4, r1, #1
 8000bde:	0fc3      	lsrs	r3, r0, #31
 8000be0:	0a6d      	lsrs	r5, r5, #9
 8000be2:	2001      	movs	r0, #1
 8000be4:	0e12      	lsrs	r2, r2, #24
 8000be6:	0a76      	lsrs	r6, r6, #9
 8000be8:	0e24      	lsrs	r4, r4, #24
 8000bea:	0fc9      	lsrs	r1, r1, #31
 8000bec:	2aff      	cmp	r2, #255	; 0xff
 8000bee:	d006      	beq.n	8000bfe <__eqsf2+0x2a>
 8000bf0:	2cff      	cmp	r4, #255	; 0xff
 8000bf2:	d003      	beq.n	8000bfc <__eqsf2+0x28>
 8000bf4:	42a2      	cmp	r2, r4
 8000bf6:	d101      	bne.n	8000bfc <__eqsf2+0x28>
 8000bf8:	42b5      	cmp	r5, r6
 8000bfa:	d006      	beq.n	8000c0a <__eqsf2+0x36>
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	2d00      	cmp	r5, #0
 8000c00:	d1fc      	bne.n	8000bfc <__eqsf2+0x28>
 8000c02:	2cff      	cmp	r4, #255	; 0xff
 8000c04:	d1fa      	bne.n	8000bfc <__eqsf2+0x28>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d1f8      	bne.n	8000bfc <__eqsf2+0x28>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d006      	beq.n	8000c1c <__eqsf2+0x48>
 8000c0e:	2001      	movs	r0, #1
 8000c10:	2a00      	cmp	r2, #0
 8000c12:	d1f3      	bne.n	8000bfc <__eqsf2+0x28>
 8000c14:	0028      	movs	r0, r5
 8000c16:	1e43      	subs	r3, r0, #1
 8000c18:	4198      	sbcs	r0, r3
 8000c1a:	e7ef      	b.n	8000bfc <__eqsf2+0x28>
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	e7ed      	b.n	8000bfc <__eqsf2+0x28>

08000c20 <__gesf2>:
 8000c20:	b570      	push	{r4, r5, r6, lr}
 8000c22:	0042      	lsls	r2, r0, #1
 8000c24:	0245      	lsls	r5, r0, #9
 8000c26:	024e      	lsls	r6, r1, #9
 8000c28:	004c      	lsls	r4, r1, #1
 8000c2a:	0fc3      	lsrs	r3, r0, #31
 8000c2c:	0a6d      	lsrs	r5, r5, #9
 8000c2e:	0e12      	lsrs	r2, r2, #24
 8000c30:	0a76      	lsrs	r6, r6, #9
 8000c32:	0e24      	lsrs	r4, r4, #24
 8000c34:	0fc8      	lsrs	r0, r1, #31
 8000c36:	2aff      	cmp	r2, #255	; 0xff
 8000c38:	d01b      	beq.n	8000c72 <__gesf2+0x52>
 8000c3a:	2cff      	cmp	r4, #255	; 0xff
 8000c3c:	d00e      	beq.n	8000c5c <__gesf2+0x3c>
 8000c3e:	2a00      	cmp	r2, #0
 8000c40:	d11b      	bne.n	8000c7a <__gesf2+0x5a>
 8000c42:	2c00      	cmp	r4, #0
 8000c44:	d101      	bne.n	8000c4a <__gesf2+0x2a>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	d01c      	beq.n	8000c84 <__gesf2+0x64>
 8000c4a:	2d00      	cmp	r5, #0
 8000c4c:	d00c      	beq.n	8000c68 <__gesf2+0x48>
 8000c4e:	4283      	cmp	r3, r0
 8000c50:	d01c      	beq.n	8000c8c <__gesf2+0x6c>
 8000c52:	2102      	movs	r1, #2
 8000c54:	1e58      	subs	r0, r3, #1
 8000c56:	4008      	ands	r0, r1
 8000c58:	3801      	subs	r0, #1
 8000c5a:	bd70      	pop	{r4, r5, r6, pc}
 8000c5c:	2e00      	cmp	r6, #0
 8000c5e:	d122      	bne.n	8000ca6 <__gesf2+0x86>
 8000c60:	2a00      	cmp	r2, #0
 8000c62:	d1f4      	bne.n	8000c4e <__gesf2+0x2e>
 8000c64:	2d00      	cmp	r5, #0
 8000c66:	d1f2      	bne.n	8000c4e <__gesf2+0x2e>
 8000c68:	2800      	cmp	r0, #0
 8000c6a:	d1f6      	bne.n	8000c5a <__gesf2+0x3a>
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	4240      	negs	r0, r0
 8000c70:	e7f3      	b.n	8000c5a <__gesf2+0x3a>
 8000c72:	2d00      	cmp	r5, #0
 8000c74:	d117      	bne.n	8000ca6 <__gesf2+0x86>
 8000c76:	2cff      	cmp	r4, #255	; 0xff
 8000c78:	d0f0      	beq.n	8000c5c <__gesf2+0x3c>
 8000c7a:	2c00      	cmp	r4, #0
 8000c7c:	d1e7      	bne.n	8000c4e <__gesf2+0x2e>
 8000c7e:	2e00      	cmp	r6, #0
 8000c80:	d1e5      	bne.n	8000c4e <__gesf2+0x2e>
 8000c82:	e7e6      	b.n	8000c52 <__gesf2+0x32>
 8000c84:	2000      	movs	r0, #0
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d0e7      	beq.n	8000c5a <__gesf2+0x3a>
 8000c8a:	e7e2      	b.n	8000c52 <__gesf2+0x32>
 8000c8c:	42a2      	cmp	r2, r4
 8000c8e:	dc05      	bgt.n	8000c9c <__gesf2+0x7c>
 8000c90:	dbea      	blt.n	8000c68 <__gesf2+0x48>
 8000c92:	42b5      	cmp	r5, r6
 8000c94:	d802      	bhi.n	8000c9c <__gesf2+0x7c>
 8000c96:	d3e7      	bcc.n	8000c68 <__gesf2+0x48>
 8000c98:	2000      	movs	r0, #0
 8000c9a:	e7de      	b.n	8000c5a <__gesf2+0x3a>
 8000c9c:	4243      	negs	r3, r0
 8000c9e:	4158      	adcs	r0, r3
 8000ca0:	0040      	lsls	r0, r0, #1
 8000ca2:	3801      	subs	r0, #1
 8000ca4:	e7d9      	b.n	8000c5a <__gesf2+0x3a>
 8000ca6:	2002      	movs	r0, #2
 8000ca8:	4240      	negs	r0, r0
 8000caa:	e7d6      	b.n	8000c5a <__gesf2+0x3a>

08000cac <__lesf2>:
 8000cac:	b570      	push	{r4, r5, r6, lr}
 8000cae:	0042      	lsls	r2, r0, #1
 8000cb0:	0245      	lsls	r5, r0, #9
 8000cb2:	024e      	lsls	r6, r1, #9
 8000cb4:	004c      	lsls	r4, r1, #1
 8000cb6:	0fc3      	lsrs	r3, r0, #31
 8000cb8:	0a6d      	lsrs	r5, r5, #9
 8000cba:	0e12      	lsrs	r2, r2, #24
 8000cbc:	0a76      	lsrs	r6, r6, #9
 8000cbe:	0e24      	lsrs	r4, r4, #24
 8000cc0:	0fc8      	lsrs	r0, r1, #31
 8000cc2:	2aff      	cmp	r2, #255	; 0xff
 8000cc4:	d00b      	beq.n	8000cde <__lesf2+0x32>
 8000cc6:	2cff      	cmp	r4, #255	; 0xff
 8000cc8:	d00d      	beq.n	8000ce6 <__lesf2+0x3a>
 8000cca:	2a00      	cmp	r2, #0
 8000ccc:	d11f      	bne.n	8000d0e <__lesf2+0x62>
 8000cce:	2c00      	cmp	r4, #0
 8000cd0:	d116      	bne.n	8000d00 <__lesf2+0x54>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d114      	bne.n	8000d00 <__lesf2+0x54>
 8000cd6:	2000      	movs	r0, #0
 8000cd8:	2d00      	cmp	r5, #0
 8000cda:	d010      	beq.n	8000cfe <__lesf2+0x52>
 8000cdc:	e009      	b.n	8000cf2 <__lesf2+0x46>
 8000cde:	2d00      	cmp	r5, #0
 8000ce0:	d10c      	bne.n	8000cfc <__lesf2+0x50>
 8000ce2:	2cff      	cmp	r4, #255	; 0xff
 8000ce4:	d113      	bne.n	8000d0e <__lesf2+0x62>
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d108      	bne.n	8000cfc <__lesf2+0x50>
 8000cea:	2a00      	cmp	r2, #0
 8000cec:	d008      	beq.n	8000d00 <__lesf2+0x54>
 8000cee:	4283      	cmp	r3, r0
 8000cf0:	d012      	beq.n	8000d18 <__lesf2+0x6c>
 8000cf2:	2102      	movs	r1, #2
 8000cf4:	1e58      	subs	r0, r3, #1
 8000cf6:	4008      	ands	r0, r1
 8000cf8:	3801      	subs	r0, #1
 8000cfa:	e000      	b.n	8000cfe <__lesf2+0x52>
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	bd70      	pop	{r4, r5, r6, pc}
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d1f4      	bne.n	8000cee <__lesf2+0x42>
 8000d04:	2800      	cmp	r0, #0
 8000d06:	d1fa      	bne.n	8000cfe <__lesf2+0x52>
 8000d08:	2001      	movs	r0, #1
 8000d0a:	4240      	negs	r0, r0
 8000d0c:	e7f7      	b.n	8000cfe <__lesf2+0x52>
 8000d0e:	2c00      	cmp	r4, #0
 8000d10:	d1ed      	bne.n	8000cee <__lesf2+0x42>
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d1eb      	bne.n	8000cee <__lesf2+0x42>
 8000d16:	e7ec      	b.n	8000cf2 <__lesf2+0x46>
 8000d18:	42a2      	cmp	r2, r4
 8000d1a:	dc05      	bgt.n	8000d28 <__lesf2+0x7c>
 8000d1c:	dbf2      	blt.n	8000d04 <__lesf2+0x58>
 8000d1e:	42b5      	cmp	r5, r6
 8000d20:	d802      	bhi.n	8000d28 <__lesf2+0x7c>
 8000d22:	d3ef      	bcc.n	8000d04 <__lesf2+0x58>
 8000d24:	2000      	movs	r0, #0
 8000d26:	e7ea      	b.n	8000cfe <__lesf2+0x52>
 8000d28:	4243      	negs	r3, r0
 8000d2a:	4158      	adcs	r0, r3
 8000d2c:	0040      	lsls	r0, r0, #1
 8000d2e:	3801      	subs	r0, #1
 8000d30:	e7e5      	b.n	8000cfe <__lesf2+0x52>
 8000d32:	46c0      	nop			; (mov r8, r8)

08000d34 <bme_read24>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void debug_print(char* msg);

uint32_t bme_read24(uint8_t reg) {
 8000d34:	b5b0      	push	{r4, r5, r7, lr}
 8000d36:	b0c6      	sub	sp, #280	; 0x118
 8000d38:	af02      	add	r7, sp, #8
 8000d3a:	0002      	movs	r2, r0
 8000d3c:	4b29      	ldr	r3, [pc, #164]	; (8000de4 <bme_read24+0xb0>)
 8000d3e:	2188      	movs	r1, #136	; 0x88
 8000d40:	0049      	lsls	r1, r1, #1
 8000d42:	185b      	adds	r3, r3, r1
 8000d44:	19db      	adds	r3, r3, r7
 8000d46:	701a      	strb	r2, [r3, #0]
	uint8_t buffer[3];
	buffer[0] = reg;
 8000d48:	2086      	movs	r0, #134	; 0x86
 8000d4a:	0040      	lsls	r0, r0, #1
 8000d4c:	183b      	adds	r3, r7, r0
 8000d4e:	4a25      	ldr	r2, [pc, #148]	; (8000de4 <bme_read24+0xb0>)
 8000d50:	1852      	adds	r2, r2, r1
 8000d52:	19d2      	adds	r2, r2, r7
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, BME_I2C_ADDR, buffer, 1, I2C_DELAY);
 8000d58:	2510      	movs	r5, #16
 8000d5a:	35ff      	adds	r5, #255	; 0xff
 8000d5c:	197c      	adds	r4, r7, r5
 8000d5e:	183a      	adds	r2, r7, r0
 8000d60:	4821      	ldr	r0, [pc, #132]	; (8000de8 <bme_read24+0xb4>)
 8000d62:	2301      	movs	r3, #1
 8000d64:	425b      	negs	r3, r3
 8000d66:	9300      	str	r3, [sp, #0]
 8000d68:	2301      	movs	r3, #1
 8000d6a:	21ec      	movs	r1, #236	; 0xec
 8000d6c:	f000 ff6c 	bl	8001c48 <HAL_I2C_Master_Transmit>
 8000d70:	0003      	movs	r3, r0
 8000d72:	7023      	strb	r3, [r4, #0]
	if (ret != HAL_OK) {
 8000d74:	197b      	adds	r3, r7, r5
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d00d      	beq.n	8000d98 <bme_read24+0x64>
	  char* msg[64];
	  sprintf(msg, "Not Ok, got %X\r\n", ret);
 8000d7c:	197b      	adds	r3, r7, r5
 8000d7e:	781a      	ldrb	r2, [r3, #0]
 8000d80:	491a      	ldr	r1, [pc, #104]	; (8000dec <bme_read24+0xb8>)
 8000d82:	240c      	movs	r4, #12
 8000d84:	193b      	adds	r3, r7, r4
 8000d86:	0018      	movs	r0, r3
 8000d88:	f002 fed6 	bl	8003b38 <siprintf>
	  debug_print(msg);
 8000d8c:	193b      	adds	r3, r7, r4
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8ce 	bl	8000f30 <debug_print>
	  return 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	e021      	b.n	8000ddc <bme_read24+0xa8>
	} else {
		// Read 3 bytes from the register
		ret = HAL_I2C_Master_Receive(&hi2c1, BME_I2C_ADDR, buffer, 3, I2C_DELAY);
 8000d98:	2510      	movs	r5, #16
 8000d9a:	35ff      	adds	r5, #255	; 0xff
 8000d9c:	197c      	adds	r4, r7, r5
 8000d9e:	2386      	movs	r3, #134	; 0x86
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	18fa      	adds	r2, r7, r3
 8000da4:	4810      	ldr	r0, [pc, #64]	; (8000de8 <bme_read24+0xb4>)
 8000da6:	2301      	movs	r3, #1
 8000da8:	425b      	negs	r3, r3
 8000daa:	9300      	str	r3, [sp, #0]
 8000dac:	2303      	movs	r3, #3
 8000dae:	21ec      	movs	r1, #236	; 0xec
 8000db0:	f001 f852 	bl	8001e58 <HAL_I2C_Master_Receive>
 8000db4:	0003      	movs	r3, r0
 8000db6:	7023      	strb	r3, [r4, #0]
		if (ret != HAL_OK) {
 8000db8:	197b      	adds	r3, r7, r5
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <bme_read24+0x90>
			return 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e00b      	b.n	8000ddc <bme_read24+0xa8>
		} else {
			return (u_int32_t)(buffer[0]) << 16 | (u_int32_t)(buffer[1]) << 8 | (u_int32_t)(buffer[2]);
 8000dc4:	2186      	movs	r1, #134	; 0x86
 8000dc6:	0049      	lsls	r1, r1, #1
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	785b      	ldrb	r3, [r3, #1]
 8000dd2:	021b      	lsls	r3, r3, #8
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	187a      	adds	r2, r7, r1
 8000dd8:	7892      	ldrb	r2, [r2, #2]
 8000dda:	4313      	orrs	r3, r2
		}
	}
}
 8000ddc:	0018      	movs	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	b044      	add	sp, #272	; 0x110
 8000de2:	bdb0      	pop	{r4, r5, r7, pc}
 8000de4:	fffffef7 	.word	0xfffffef7
 8000de8:	2000008c 	.word	0x2000008c
 8000dec:	08004424 	.word	0x08004424

08000df0 <bme_read8>:

uint8_t bme_read8(uint8_t reg) {
 8000df0:	b5b0      	push	{r4, r5, r7, lr}
 8000df2:	b0c6      	sub	sp, #280	; 0x118
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	0002      	movs	r2, r0
 8000df8:	4b2b      	ldr	r3, [pc, #172]	; (8000ea8 <bme_read8+0xb8>)
 8000dfa:	2188      	movs	r1, #136	; 0x88
 8000dfc:	0049      	lsls	r1, r1, #1
 8000dfe:	185b      	adds	r3, r3, r1
 8000e00:	19db      	adds	r3, r3, r7
 8000e02:	701a      	strb	r2, [r3, #0]
  uint8_t buffer[1];
  buffer[0] = reg;
 8000e04:	2086      	movs	r0, #134	; 0x86
 8000e06:	0040      	lsls	r0, r0, #1
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	4a27      	ldr	r2, [pc, #156]	; (8000ea8 <bme_read8+0xb8>)
 8000e0c:	1852      	adds	r2, r2, r1
 8000e0e:	19d2      	adds	r2, r2, r7
 8000e10:	7812      	ldrb	r2, [r2, #0]
 8000e12:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(&hi2c1, BME_I2C_ADDR, buffer, 1, I2C_DELAY);
 8000e14:	2510      	movs	r5, #16
 8000e16:	35ff      	adds	r5, #255	; 0xff
 8000e18:	197c      	adds	r4, r7, r5
 8000e1a:	183a      	adds	r2, r7, r0
 8000e1c:	4823      	ldr	r0, [pc, #140]	; (8000eac <bme_read8+0xbc>)
 8000e1e:	2301      	movs	r3, #1
 8000e20:	425b      	negs	r3, r3
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2301      	movs	r3, #1
 8000e26:	21ec      	movs	r1, #236	; 0xec
 8000e28:	f000 ff0e 	bl	8001c48 <HAL_I2C_Master_Transmit>
 8000e2c:	0003      	movs	r3, r0
 8000e2e:	7023      	strb	r3, [r4, #0]
  if (ret != HAL_OK) {
 8000e30:	197b      	adds	r3, r7, r5
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d00d      	beq.n	8000e54 <bme_read8+0x64>
    char* msg[64];
    sprintf(msg, "Not Ok 1, got %X\r\n", ret);
 8000e38:	197b      	adds	r3, r7, r5
 8000e3a:	781a      	ldrb	r2, [r3, #0]
 8000e3c:	491c      	ldr	r1, [pc, #112]	; (8000eb0 <bme_read8+0xc0>)
 8000e3e:	240c      	movs	r4, #12
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	0018      	movs	r0, r3
 8000e44:	f002 fe78 	bl	8003b38 <siprintf>
    debug_print(msg);
 8000e48:	193b      	adds	r3, r7, r4
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f870 	bl	8000f30 <debug_print>
    return 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	e025      	b.n	8000ea0 <bme_read8+0xb0>
  } else {
    // Read 1 byte from the register
    ret = HAL_I2C_Master_Receive(&hi2c1, BME_I2C_ADDR, buffer, 1, I2C_DELAY);
 8000e54:	2510      	movs	r5, #16
 8000e56:	35ff      	adds	r5, #255	; 0xff
 8000e58:	197c      	adds	r4, r7, r5
 8000e5a:	2386      	movs	r3, #134	; 0x86
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	18fa      	adds	r2, r7, r3
 8000e60:	4812      	ldr	r0, [pc, #72]	; (8000eac <bme_read8+0xbc>)
 8000e62:	2301      	movs	r3, #1
 8000e64:	425b      	negs	r3, r3
 8000e66:	9300      	str	r3, [sp, #0]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	21ec      	movs	r1, #236	; 0xec
 8000e6c:	f000 fff4 	bl	8001e58 <HAL_I2C_Master_Receive>
 8000e70:	0003      	movs	r3, r0
 8000e72:	7023      	strb	r3, [r4, #0]
    if (ret != HAL_OK) {
 8000e74:	197b      	adds	r3, r7, r5
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00d      	beq.n	8000e98 <bme_read8+0xa8>
      char* msg[64];
      sprintf(msg, "Not Ok 2, got %X\r\n", ret);
 8000e7c:	197b      	adds	r3, r7, r5
 8000e7e:	781a      	ldrb	r2, [r3, #0]
 8000e80:	490c      	ldr	r1, [pc, #48]	; (8000eb4 <bme_read8+0xc4>)
 8000e82:	240c      	movs	r4, #12
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	0018      	movs	r0, r3
 8000e88:	f002 fe56 	bl	8003b38 <siprintf>
      debug_print(msg);
 8000e8c:	193b      	adds	r3, r7, r4
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f000 f84e 	bl	8000f30 <debug_print>
      return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e003      	b.n	8000ea0 <bme_read8+0xb0>
    } else {
      return buffer[0];
 8000e98:	2386      	movs	r3, #134	; 0x86
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	18fb      	adds	r3, r7, r3
 8000e9e:	781b      	ldrb	r3, [r3, #0]
    }
  }
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b044      	add	sp, #272	; 0x110
 8000ea6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ea8:	fffffef7 	.word	0xfffffef7
 8000eac:	2000008c 	.word	0x2000008c
 8000eb0:	08004438 	.word	0x08004438
 8000eb4:	0800444c 	.word	0x0800444c

08000eb8 <bme_read_temperature>:

float bme_read_temperature() {
 8000eb8:	b590      	push	{r4, r7, lr}
 8000eba:	4c1a      	ldr	r4, [pc, #104]	; (8000f24 <bme_read_temperature+0x6c>)
 8000ebc:	44a5      	add	sp, r4
 8000ebe:	af00      	add	r7, sp, #0
	int32_t adc_T = bme_read24(BME_REG_TEMPDATA);
 8000ec0:	20fa      	movs	r0, #250	; 0xfa
 8000ec2:	f7ff ff37 	bl	8000d34 <bme_read24>
 8000ec6:	0003      	movs	r3, r0
 8000ec8:	2281      	movs	r2, #129	; 0x81
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	18b9      	adds	r1, r7, r2
 8000ece:	600b      	str	r3, [r1, #0]
	if (adc_T == 0x800000) {
 8000ed0:	18bb      	adds	r3, r7, r2
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	041b      	lsls	r3, r3, #16
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d105      	bne.n	8000ee8 <bme_read_temperature+0x30>
		return 0.0 / 0.0;
 8000edc:	2100      	movs	r1, #0
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f7ff f9c6 	bl	8000270 <__aeabi_fdiv>
 8000ee4:	1c03      	adds	r3, r0, #0
 8000ee6:	e016      	b.n	8000f16 <bme_read_temperature+0x5e>
	}

	char temp_str[512];
	sprintf(temp_str, "0x%x", adc_T);
 8000ee8:	2481      	movs	r4, #129	; 0x81
 8000eea:	00a4      	lsls	r4, r4, #2
 8000eec:	193b      	adds	r3, r7, r4
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	490d      	ldr	r1, [pc, #52]	; (8000f28 <bme_read_temperature+0x70>)
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	f002 fe1f 	bl	8003b38 <siprintf>
	debug_print(temp_str);
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	0018      	movs	r0, r3
 8000efe:	f000 f817 	bl	8000f30 <debug_print>

	// TODO: Some calibration shit

	return (float)adc_T / 100;
 8000f02:	193b      	adds	r3, r7, r4
 8000f04:	6818      	ldr	r0, [r3, #0]
 8000f06:	f7ff fdbf 	bl	8000a88 <__aeabi_i2f>
 8000f0a:	1c03      	adds	r3, r0, #0
 8000f0c:	4907      	ldr	r1, [pc, #28]	; (8000f2c <bme_read_temperature+0x74>)
 8000f0e:	1c18      	adds	r0, r3, #0
 8000f10:	f7ff f9ae 	bl	8000270 <__aeabi_fdiv>
 8000f14:	1c03      	adds	r3, r0, #0
}
 8000f16:	1c18      	adds	r0, r3, #0
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	2383      	movs	r3, #131	; 0x83
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	449d      	add	sp, r3
 8000f20:	bd90      	pop	{r4, r7, pc}
 8000f22:	46c0      	nop			; (mov r8, r8)
 8000f24:	fffffdf4 	.word	0xfffffdf4
 8000f28:	08004460 	.word	0x08004460
 8000f2c:	42c80000 	.word	0x42c80000

08000f30 <debug_print>:

void debug_print(char* msg) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, msg, strlen(msg), HAL_MAX_DELAY);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	f7ff f8e2 	bl	8000104 <strlen>
 8000f40:	0003      	movs	r3, r0
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	2301      	movs	r3, #1
 8000f46:	425b      	negs	r3, r3
 8000f48:	6879      	ldr	r1, [r7, #4]
 8000f4a:	4803      	ldr	r0, [pc, #12]	; (8000f58 <debug_print+0x28>)
 8000f4c:	f002 f970 	bl	8003230 <HAL_UART_Transmit>
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	b002      	add	sp, #8
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000d8 	.word	0x200000d8

08000f5c <bme_init>:

// This function will initialize the BME280 and set it up for reading
// temperature, pressure, and humidity.
void bme_init() {
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
  uint8_t retry_count = 10;
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	220a      	movs	r2, #10
 8000f66:	701a      	strb	r2, [r3, #0]

  uint8_t chip_id = 0;
 8000f68:	1dbb      	adds	r3, r7, #6
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	701a      	strb	r2, [r3, #0]

  while (retry_count > 0) {
 8000f6e:	e022      	b.n	8000fb6 <bme_init+0x5a>
    chip_id = bme_read8(BME_REG_CHIP_ID);
 8000f70:	1dbc      	adds	r4, r7, #6
 8000f72:	20d0      	movs	r0, #208	; 0xd0
 8000f74:	f7ff ff3c 	bl	8000df0 <bme_read8>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	7023      	strb	r3, [r4, #0]

    char* msg;
    if (chip_id != BME_CHIP_ID) {
 8000f7c:	1dbb      	adds	r3, r7, #6
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d00b      	beq.n	8000f9c <bme_init+0x40>
      sprintf(msg, "Bad chip id %x\r\n", chip_id);
 8000f84:	1dbb      	adds	r3, r7, #6
 8000f86:	781a      	ldrb	r2, [r3, #0]
 8000f88:	490f      	ldr	r1, [pc, #60]	; (8000fc8 <bme_init+0x6c>)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f002 fdd3 	bl	8003b38 <siprintf>
      debug_print(msg);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff ffcb 	bl	8000f30 <debug_print>
 8000f9a:	e004      	b.n	8000fa6 <bme_init+0x4a>
    } else {
      debug_print("Good chip id\r\n");
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <bme_init+0x70>)
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	f7ff ffc6 	bl	8000f30 <debug_print>
      break;
 8000fa4:	e00b      	b.n	8000fbe <bme_init+0x62>
    }

    HAL_Delay(200);
 8000fa6:	20c8      	movs	r0, #200	; 0xc8
 8000fa8:	f000 fb4a 	bl	8001640 <HAL_Delay>
    retry_count--;
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	781a      	ldrb	r2, [r3, #0]
 8000fb0:	1dfb      	adds	r3, r7, #7
 8000fb2:	3a01      	subs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
  while (retry_count > 0) {
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d1d8      	bne.n	8000f70 <bme_init+0x14>
  uint8_t status = bme_read8(BME_REG_STATUS);
  char* msg;
  sprintf(msg, "Status: 0b%b", status);
  */

  return;
 8000fbe:	46c0      	nop			; (mov r8, r8)
}
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	b003      	add	sp, #12
 8000fc4:	bd90      	pop	{r4, r7, pc}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	08004468 	.word	0x08004468
 8000fcc:	0800447c 	.word	0x0800447c

08000fd0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000fd0:	b5b0      	push	{r4, r5, r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd6:	f000 facf 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fda:	f000 f84b 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fde:	f000 f91f 	bl	8001220 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fe2:	f000 f8ed 	bl	80011c0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fe6:	f000 f8ab 	bl	8001140 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  char start_message[16] = "starting\r\n";
 8000fea:	2410      	movs	r4, #16
 8000fec:	1939      	adds	r1, r7, r4
 8000fee:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <main+0x94>)
 8000ff0:	000b      	movs	r3, r1
 8000ff2:	ca21      	ldmia	r2!, {r0, r5}
 8000ff4:	c321      	stmia	r3!, {r0, r5}
 8000ff6:	8810      	ldrh	r0, [r2, #0]
 8000ff8:	8018      	strh	r0, [r3, #0]
 8000ffa:	7892      	ldrb	r2, [r2, #2]
 8000ffc:	709a      	strb	r2, [r3, #2]
 8000ffe:	230b      	movs	r3, #11
 8001000:	18cb      	adds	r3, r1, r3
 8001002:	2205      	movs	r2, #5
 8001004:	2100      	movs	r1, #0
 8001006:	0018      	movs	r0, r3
 8001008:	f002 fd8e 	bl	8003b28 <memset>
  debug_print(start_message);
 800100c:	193b      	adds	r3, r7, r4
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff8e 	bl	8000f30 <debug_print>

  bme_init();
 8001014:	f7ff ffa2 	bl	8000f5c <bme_init>
  /* USER CODE BEGIN WHILE */
  while (1) {
    /* USER CODE END WHILE */

    uint8_t buf[12];
    float temp = bme_read_temperature();
 8001018:	f7ff ff4e 	bl	8000eb8 <bme_read_temperature>
 800101c:	1c03      	adds	r3, r0, #0
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    u_int32_t temp_mC = (uint32_t) (temp * 1000);
 8001020:	4911      	ldr	r1, [pc, #68]	; (8001068 <main+0x98>)
 8001022:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001024:	f7ff fa3c 	bl	80004a0 <__aeabi_fmul>
 8001028:	1c03      	adds	r3, r0, #0
 800102a:	1c18      	adds	r0, r3, #0
 800102c:	f7ff f908 	bl	8000240 <__aeabi_f2uiz>
 8001030:	0003      	movs	r3, r0
 8001032:	623b      	str	r3, [r7, #32]
    sprintf((char*)buf, "%8d\r\n", temp_mC);
 8001034:	6a3a      	ldr	r2, [r7, #32]
 8001036:	490d      	ldr	r1, [pc, #52]	; (800106c <main+0x9c>)
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	0018      	movs	r0, r3
 800103c:	f002 fd7c 	bl	8003b38 <siprintf>

    HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 8001040:	1d3b      	adds	r3, r7, #4
 8001042:	0018      	movs	r0, r3
 8001044:	f7ff f85e 	bl	8000104 <strlen>
 8001048:	0003      	movs	r3, r0
 800104a:	b29a      	uxth	r2, r3
 800104c:	2301      	movs	r3, #1
 800104e:	425b      	negs	r3, r3
 8001050:	1d39      	adds	r1, r7, #4
 8001052:	4807      	ldr	r0, [pc, #28]	; (8001070 <main+0xa0>)
 8001054:	f002 f8ec 	bl	8003230 <HAL_UART_Transmit>

    HAL_Delay(500);
 8001058:	23fa      	movs	r3, #250	; 0xfa
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	0018      	movs	r0, r3
 800105e:	f000 faef 	bl	8001640 <HAL_Delay>
  while (1) {
 8001062:	e7d9      	b.n	8001018 <main+0x48>
 8001064:	08004494 	.word	0x08004494
 8001068:	447a0000 	.word	0x447a0000
 800106c:	0800448c 	.word	0x0800448c
 8001070:	200000d8 	.word	0x200000d8

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b590      	push	{r4, r7, lr}
 8001076:	b099      	sub	sp, #100	; 0x64
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	242c      	movs	r4, #44	; 0x2c
 800107c:	193b      	adds	r3, r7, r4
 800107e:	0018      	movs	r0, r3
 8001080:	2334      	movs	r3, #52	; 0x34
 8001082:	001a      	movs	r2, r3
 8001084:	2100      	movs	r1, #0
 8001086:	f002 fd4f 	bl	8003b28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108a:	231c      	movs	r3, #28
 800108c:	18fb      	adds	r3, r7, r3
 800108e:	0018      	movs	r0, r3
 8001090:	2310      	movs	r3, #16
 8001092:	001a      	movs	r2, r3
 8001094:	2100      	movs	r1, #0
 8001096:	f002 fd47 	bl	8003b28 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800109a:	003b      	movs	r3, r7
 800109c:	0018      	movs	r0, r3
 800109e:	231c      	movs	r3, #28
 80010a0:	001a      	movs	r2, r3
 80010a2:	2100      	movs	r1, #0
 80010a4:	f002 fd40 	bl	8003b28 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a8:	0021      	movs	r1, r4
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2202      	movs	r2, #2
 80010ae:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	2201      	movs	r2, #1
 80010b4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2210      	movs	r2, #16
 80010ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2202      	movs	r2, #2
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2280      	movs	r2, #128	; 0x80
 80010c6:	0212      	lsls	r2, r2, #8
 80010c8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	22a0      	movs	r2, #160	; 0xa0
 80010ce:	0392      	lsls	r2, r2, #14
 80010d0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80010d2:	187b      	adds	r3, r7, r1
 80010d4:	2201      	movs	r2, #1
 80010d6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	0018      	movs	r0, r3
 80010dc:	f001 fa54 	bl	8002588 <HAL_RCC_OscConfig>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d001      	beq.n	80010e8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80010e4:	f000 f906 	bl	80012f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e8:	211c      	movs	r1, #28
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	2207      	movs	r2, #7
 80010ee:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2202      	movs	r2, #2
 80010f4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2101      	movs	r1, #1
 8001106:	0018      	movs	r0, r3
 8001108:	f001 fdc4 	bl	8002c94 <HAL_RCC_ClockConfig>
 800110c:	1e03      	subs	r3, r0, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001110:	f000 f8f0 	bl	80012f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8001114:	003b      	movs	r3, r7
 8001116:	2222      	movs	r2, #34	; 0x22
 8001118:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800111a:	003b      	movs	r3, r7
 800111c:	2200      	movs	r2, #0
 800111e:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001120:	003b      	movs	r3, r7
 8001122:	2200      	movs	r2, #0
 8001124:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001126:	003b      	movs	r3, r7
 8001128:	0018      	movs	r0, r3
 800112a:	f001 ff2d 	bl	8002f88 <HAL_RCCEx_PeriphCLKConfig>
 800112e:	1e03      	subs	r3, r0, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001132:	f000 f8df 	bl	80012f4 <Error_Handler>
  }
}
 8001136:	46c0      	nop			; (mov r8, r8)
 8001138:	46bd      	mov	sp, r7
 800113a:	b019      	add	sp, #100	; 0x64
 800113c:	bd90      	pop	{r4, r7, pc}
	...

08001140 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001146:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <MX_I2C1_Init+0x78>)
 8001148:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800114a:	4b1a      	ldr	r3, [pc, #104]	; (80011b4 <MX_I2C1_Init+0x74>)
 800114c:	4a1b      	ldr	r2, [pc, #108]	; (80011bc <MX_I2C1_Init+0x7c>)
 800114e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001150:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001156:	4b17      	ldr	r3, [pc, #92]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001158:	2201      	movs	r2, #1
 800115a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <MX_I2C1_Init+0x74>)
 800115e:	2200      	movs	r2, #0
 8001160:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001162:	4b14      	ldr	r3, [pc, #80]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001164:	2200      	movs	r2, #0
 8001166:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001168:	4b12      	ldr	r3, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x74>)
 800116a:	2200      	movs	r2, #0
 800116c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001170:	2200      	movs	r2, #0
 8001172:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001174:	4b0f      	ldr	r3, [pc, #60]	; (80011b4 <MX_I2C1_Init+0x74>)
 8001176:	2200      	movs	r2, #0
 8001178:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_I2C1_Init+0x74>)
 800117c:	0018      	movs	r0, r3
 800117e:	f000 fccd 	bl	8001b1c <HAL_I2C_Init>
 8001182:	1e03      	subs	r3, r0, #0
 8001184:	d001      	beq.n	800118a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001186:	f000 f8b5 	bl	80012f4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800118a:	4b0a      	ldr	r3, [pc, #40]	; (80011b4 <MX_I2C1_Init+0x74>)
 800118c:	2100      	movs	r1, #0
 800118e:	0018      	movs	r0, r3
 8001190:	f001 f962 	bl	8002458 <HAL_I2CEx_ConfigAnalogFilter>
 8001194:	1e03      	subs	r3, r0, #0
 8001196:	d001      	beq.n	800119c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001198:	f000 f8ac 	bl	80012f4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800119c:	4b05      	ldr	r3, [pc, #20]	; (80011b4 <MX_I2C1_Init+0x74>)
 800119e:	2100      	movs	r1, #0
 80011a0:	0018      	movs	r0, r3
 80011a2:	f001 f9a5 	bl	80024f0 <HAL_I2CEx_ConfigDigitalFilter>
 80011a6:	1e03      	subs	r3, r0, #0
 80011a8:	d001      	beq.n	80011ae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011aa:	f000 f8a3 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	2000008c 	.word	0x2000008c
 80011b8:	40005400 	.word	0x40005400
 80011bc:	2000090e 	.word	0x2000090e

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <MX_USART2_UART_Init+0x5c>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011cc:	22e1      	movs	r2, #225	; 0xe1
 80011ce:	0252      	lsls	r2, r2, #9
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b06      	ldr	r3, [pc, #24]	; (8001218 <MX_USART2_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <MX_USART2_UART_Init+0x58>)
 8001204:	0018      	movs	r0, r3
 8001206:	f001 ffbf 	bl	8003188 <HAL_UART_Init>
 800120a:	1e03      	subs	r3, r0, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f871 	bl	80012f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	200000d8 	.word	0x200000d8
 800121c:	40004400 	.word	0x40004400

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b590      	push	{r4, r7, lr}
 8001222:	b089      	sub	sp, #36	; 0x24
 8001224:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001226:	240c      	movs	r4, #12
 8001228:	193b      	adds	r3, r7, r4
 800122a:	0018      	movs	r0, r3
 800122c:	2314      	movs	r3, #20
 800122e:	001a      	movs	r2, r3
 8001230:	2100      	movs	r1, #0
 8001232:	f002 fc79 	bl	8003b28 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001236:	4b2d      	ldr	r3, [pc, #180]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001238:	695a      	ldr	r2, [r3, #20]
 800123a:	4b2c      	ldr	r3, [pc, #176]	; (80012ec <MX_GPIO_Init+0xcc>)
 800123c:	2180      	movs	r1, #128	; 0x80
 800123e:	0309      	lsls	r1, r1, #12
 8001240:	430a      	orrs	r2, r1
 8001242:	615a      	str	r2, [r3, #20]
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001246:	695a      	ldr	r2, [r3, #20]
 8001248:	2380      	movs	r3, #128	; 0x80
 800124a:	031b      	lsls	r3, r3, #12
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001252:	4b26      	ldr	r3, [pc, #152]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001254:	695a      	ldr	r2, [r3, #20]
 8001256:	4b25      	ldr	r3, [pc, #148]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001258:	2180      	movs	r1, #128	; 0x80
 800125a:	03c9      	lsls	r1, r1, #15
 800125c:	430a      	orrs	r2, r1
 800125e:	615a      	str	r2, [r3, #20]
 8001260:	4b22      	ldr	r3, [pc, #136]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001262:	695a      	ldr	r2, [r3, #20]
 8001264:	2380      	movs	r3, #128	; 0x80
 8001266:	03db      	lsls	r3, r3, #15
 8001268:	4013      	ands	r3, r2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126e:	4b1f      	ldr	r3, [pc, #124]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001270:	695a      	ldr	r2, [r3, #20]
 8001272:	4b1e      	ldr	r3, [pc, #120]	; (80012ec <MX_GPIO_Init+0xcc>)
 8001274:	2180      	movs	r1, #128	; 0x80
 8001276:	0289      	lsls	r1, r1, #10
 8001278:	430a      	orrs	r2, r1
 800127a:	615a      	str	r2, [r3, #20]
 800127c:	4b1b      	ldr	r3, [pc, #108]	; (80012ec <MX_GPIO_Init+0xcc>)
 800127e:	695a      	ldr	r2, [r3, #20]
 8001280:	2380      	movs	r3, #128	; 0x80
 8001282:	029b      	lsls	r3, r3, #10
 8001284:	4013      	ands	r3, r2
 8001286:	603b      	str	r3, [r7, #0]
 8001288:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2200      	movs	r2, #0
 8001290:	2120      	movs	r1, #32
 8001292:	0018      	movs	r0, r3
 8001294:	f000 fc24 	bl	8001ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001298:	193b      	adds	r3, r7, r4
 800129a:	2280      	movs	r2, #128	; 0x80
 800129c:	0192      	lsls	r2, r2, #6
 800129e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012a0:	193b      	adds	r3, r7, r4
 80012a2:	2284      	movs	r2, #132	; 0x84
 80012a4:	0392      	lsls	r2, r2, #14
 80012a6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012ae:	193b      	adds	r3, r7, r4
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <MX_GPIO_Init+0xd0>)
 80012b2:	0019      	movs	r1, r3
 80012b4:	0010      	movs	r0, r2
 80012b6:	f000 fa9b 	bl	80017f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ba:	0021      	movs	r1, r4
 80012bc:	187b      	adds	r3, r7, r1
 80012be:	2220      	movs	r2, #32
 80012c0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	2201      	movs	r2, #1
 80012c6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c8:	187b      	adds	r3, r7, r1
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	187b      	adds	r3, r7, r1
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	187a      	adds	r2, r7, r1
 80012d6:	2390      	movs	r3, #144	; 0x90
 80012d8:	05db      	lsls	r3, r3, #23
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f000 fa87 	bl	80017f0 <HAL_GPIO_Init>

}
 80012e2:	46c0      	nop			; (mov r8, r8)
 80012e4:	46bd      	mov	sp, r7
 80012e6:	b009      	add	sp, #36	; 0x24
 80012e8:	bd90      	pop	{r4, r7, pc}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48000800 	.word	0x48000800

080012f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012f8:	b672      	cpsid	i
}
 80012fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012fc:	e7fe      	b.n	80012fc <Error_Handler+0x8>
	...

08001300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <HAL_MspInit+0x44>)
 8001308:	699a      	ldr	r2, [r3, #24]
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_MspInit+0x44>)
 800130c:	2101      	movs	r1, #1
 800130e:	430a      	orrs	r2, r1
 8001310:	619a      	str	r2, [r3, #24]
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_MspInit+0x44>)
 8001314:	699b      	ldr	r3, [r3, #24]
 8001316:	2201      	movs	r2, #1
 8001318:	4013      	ands	r3, r2
 800131a:	607b      	str	r3, [r7, #4]
 800131c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_MspInit+0x44>)
 8001320:	69da      	ldr	r2, [r3, #28]
 8001322:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_MspInit+0x44>)
 8001324:	2180      	movs	r1, #128	; 0x80
 8001326:	0549      	lsls	r1, r1, #21
 8001328:	430a      	orrs	r2, r1
 800132a:	61da      	str	r2, [r3, #28]
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <HAL_MspInit+0x44>)
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	055b      	lsls	r3, r3, #21
 8001334:	4013      	ands	r3, r2
 8001336:	603b      	str	r3, [r7, #0]
 8001338:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b002      	add	sp, #8
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	40021000 	.word	0x40021000

08001348 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001348:	b590      	push	{r4, r7, lr}
 800134a:	b08b      	sub	sp, #44	; 0x2c
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001350:	2414      	movs	r4, #20
 8001352:	193b      	adds	r3, r7, r4
 8001354:	0018      	movs	r0, r3
 8001356:	2314      	movs	r3, #20
 8001358:	001a      	movs	r2, r3
 800135a:	2100      	movs	r1, #0
 800135c:	f002 fbe4 	bl	8003b28 <memset>
  if(hi2c->Instance==I2C1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a1d      	ldr	r2, [pc, #116]	; (80013dc <HAL_I2C_MspInit+0x94>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d133      	bne.n	80013d2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 800136c:	695a      	ldr	r2, [r3, #20]
 800136e:	4b1c      	ldr	r3, [pc, #112]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 8001370:	2180      	movs	r1, #128	; 0x80
 8001372:	0289      	lsls	r1, r1, #10
 8001374:	430a      	orrs	r2, r1
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 800137a:	695a      	ldr	r2, [r3, #20]
 800137c:	2380      	movs	r3, #128	; 0x80
 800137e:	029b      	lsls	r3, r3, #10
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001386:	193b      	adds	r3, r7, r4
 8001388:	22c0      	movs	r2, #192	; 0xc0
 800138a:	00d2      	lsls	r2, r2, #3
 800138c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800138e:	0021      	movs	r1, r4
 8001390:	187b      	adds	r3, r7, r1
 8001392:	2212      	movs	r2, #18
 8001394:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	187b      	adds	r3, r7, r1
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800139c:	187b      	adds	r3, r7, r1
 800139e:	2203      	movs	r2, #3
 80013a0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013a2:	187b      	adds	r3, r7, r1
 80013a4:	2204      	movs	r2, #4
 80013a6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a8:	187a      	adds	r2, r7, r1
 80013aa:	2390      	movs	r3, #144	; 0x90
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	0011      	movs	r1, r2
 80013b0:	0018      	movs	r0, r3
 80013b2:	f000 fa1d 	bl	80017f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 80013b8:	69da      	ldr	r2, [r3, #28]
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 80013bc:	2180      	movs	r1, #128	; 0x80
 80013be:	0389      	lsls	r1, r1, #14
 80013c0:	430a      	orrs	r2, r1
 80013c2:	61da      	str	r2, [r3, #28]
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_I2C_MspInit+0x98>)
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	039b      	lsls	r3, r3, #14
 80013cc:	4013      	ands	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80013d2:	46c0      	nop			; (mov r8, r8)
 80013d4:	46bd      	mov	sp, r7
 80013d6:	b00b      	add	sp, #44	; 0x2c
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	46c0      	nop			; (mov r8, r8)
 80013dc:	40005400 	.word	0x40005400
 80013e0:	40021000 	.word	0x40021000

080013e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b08b      	sub	sp, #44	; 0x2c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ec:	2414      	movs	r4, #20
 80013ee:	193b      	adds	r3, r7, r4
 80013f0:	0018      	movs	r0, r3
 80013f2:	2314      	movs	r3, #20
 80013f4:	001a      	movs	r2, r3
 80013f6:	2100      	movs	r1, #0
 80013f8:	f002 fb96 	bl	8003b28 <memset>
  if(huart->Instance==USART2)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a1c      	ldr	r2, [pc, #112]	; (8001474 <HAL_UART_MspInit+0x90>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d132      	bne.n	800146c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001408:	69da      	ldr	r2, [r3, #28]
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_UART_MspInit+0x94>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0289      	lsls	r1, r1, #10
 8001410:	430a      	orrs	r2, r1
 8001412:	61da      	str	r2, [r3, #28]
 8001414:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001416:	69da      	ldr	r2, [r3, #28]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	029b      	lsls	r3, r3, #10
 800141c:	4013      	ands	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001424:	695a      	ldr	r2, [r3, #20]
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	0289      	lsls	r1, r1, #10
 800142c:	430a      	orrs	r2, r1
 800142e:	615a      	str	r2, [r3, #20]
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_UART_MspInit+0x94>)
 8001432:	695a      	ldr	r2, [r3, #20]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143e:	0021      	movs	r1, r4
 8001440:	187b      	adds	r3, r7, r1
 8001442:	220c      	movs	r2, #12
 8001444:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	187b      	adds	r3, r7, r1
 8001448:	2202      	movs	r2, #2
 800144a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	187b      	adds	r3, r7, r1
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	187b      	adds	r3, r7, r1
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001458:	187b      	adds	r3, r7, r1
 800145a:	2201      	movs	r2, #1
 800145c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	187a      	adds	r2, r7, r1
 8001460:	2390      	movs	r3, #144	; 0x90
 8001462:	05db      	lsls	r3, r3, #23
 8001464:	0011      	movs	r1, r2
 8001466:	0018      	movs	r0, r3
 8001468:	f000 f9c2 	bl	80017f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b00b      	add	sp, #44	; 0x2c
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	40004400 	.word	0x40004400
 8001478:	40021000 	.word	0x40021000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800148c:	46c0      	nop			; (mov r8, r8)
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001496:	46c0      	nop			; (mov r8, r8)
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}

0800149c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014a0:	f000 f8b2 	bl	8001608 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b4:	4a14      	ldr	r2, [pc, #80]	; (8001508 <_sbrk+0x5c>)
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <_sbrk+0x60>)
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c0:	4b13      	ldr	r3, [pc, #76]	; (8001510 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d102      	bne.n	80014ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <_sbrk+0x64>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <_sbrk+0x68>)
 80014cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <_sbrk+0x64>)
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	18d3      	adds	r3, r2, r3
 80014d6:	693a      	ldr	r2, [r7, #16]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d207      	bcs.n	80014ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014dc:	f002 fafa 	bl	8003ad4 <__errno>
 80014e0:	0003      	movs	r3, r0
 80014e2:	220c      	movs	r2, #12
 80014e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e6:	2301      	movs	r3, #1
 80014e8:	425b      	negs	r3, r3
 80014ea:	e009      	b.n	8001500 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ec:	4b08      	ldr	r3, [pc, #32]	; (8001510 <_sbrk+0x64>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014f2:	4b07      	ldr	r3, [pc, #28]	; (8001510 <_sbrk+0x64>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	18d2      	adds	r2, r2, r3
 80014fa:	4b05      	ldr	r3, [pc, #20]	; (8001510 <_sbrk+0x64>)
 80014fc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80014fe:	68fb      	ldr	r3, [r7, #12]
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b006      	add	sp, #24
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20008000 	.word	0x20008000
 800150c:	00000400 	.word	0x00000400
 8001510:	2000015c 	.word	0x2000015c
 8001514:	20000178 	.word	0x20000178

08001518 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800151c:	46c0      	nop			; (mov r8, r8)
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
	...

08001524 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001524:	480d      	ldr	r0, [pc, #52]	; (800155c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001526:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LoopForever+0x6>)
  ldr r1, =_edata
 800152a:	490e      	ldr	r1, [pc, #56]	; (8001564 <LoopForever+0xa>)
  ldr r2, =_sidata
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <LoopForever+0xe>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001540:	4c0b      	ldr	r4, [pc, #44]	; (8001570 <LoopForever+0x16>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800154e:	f7ff ffe3 	bl	8001518 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001552:	f002 fac5 	bl	8003ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001556:	f7ff fd3b 	bl	8000fd0 <main>

0800155a <LoopForever>:

LoopForever:
    b LoopForever
 800155a:	e7fe      	b.n	800155a <LoopForever>
  ldr   r0, =_estack
 800155c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001568:	080045d8 	.word	0x080045d8
  ldr r2, =_sbss
 800156c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001570:	20000174 	.word	0x20000174

08001574 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC1_COMP_IRQHandler>
	...

08001578 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_Init+0x24>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_Init+0x24>)
 8001582:	2110      	movs	r1, #16
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001588:	2000      	movs	r0, #0
 800158a:	f000 f809 	bl	80015a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800158e:	f7ff feb7 	bl	8001300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	40022000 	.word	0x40022000

080015a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <HAL_InitTick+0x5c>)
 80015aa:	681c      	ldr	r4, [r3, #0]
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_InitTick+0x60>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	0019      	movs	r1, r3
 80015b2:	23fa      	movs	r3, #250	; 0xfa
 80015b4:	0098      	lsls	r0, r3, #2
 80015b6:	f7fe fdb7 	bl	8000128 <__udivsi3>
 80015ba:	0003      	movs	r3, r0
 80015bc:	0019      	movs	r1, r3
 80015be:	0020      	movs	r0, r4
 80015c0:	f7fe fdb2 	bl	8000128 <__udivsi3>
 80015c4:	0003      	movs	r3, r0
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f905 	bl	80017d6 <HAL_SYSTICK_Config>
 80015cc:	1e03      	subs	r3, r0, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e00f      	b.n	80015f4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b03      	cmp	r3, #3
 80015d8:	d80b      	bhi.n	80015f2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015da:	6879      	ldr	r1, [r7, #4]
 80015dc:	2301      	movs	r3, #1
 80015de:	425b      	negs	r3, r3
 80015e0:	2200      	movs	r2, #0
 80015e2:	0018      	movs	r0, r3
 80015e4:	f000 f8e2 	bl	80017ac <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015e8:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_InitTick+0x64>)
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	e000      	b.n	80015f4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	0018      	movs	r0, r3
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b003      	add	sp, #12
 80015fa:	bd90      	pop	{r4, r7, pc}
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000008 	.word	0x20000008
 8001604:	20000004 	.word	0x20000004

08001608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <HAL_IncTick+0x1c>)
 800160e:	781b      	ldrb	r3, [r3, #0]
 8001610:	001a      	movs	r2, r3
 8001612:	4b05      	ldr	r3, [pc, #20]	; (8001628 <HAL_IncTick+0x20>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	18d2      	adds	r2, r2, r3
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <HAL_IncTick+0x20>)
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	46c0      	nop			; (mov r8, r8)
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	20000008 	.word	0x20000008
 8001628:	20000160 	.word	0x20000160

0800162c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  return uwTick;
 8001630:	4b02      	ldr	r3, [pc, #8]	; (800163c <HAL_GetTick+0x10>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	0018      	movs	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	20000160 	.word	0x20000160

08001640 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001648:	f7ff fff0 	bl	800162c <HAL_GetTick>
 800164c:	0003      	movs	r3, r0
 800164e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	3301      	adds	r3, #1
 8001658:	d005      	beq.n	8001666 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800165a:	4b0a      	ldr	r3, [pc, #40]	; (8001684 <HAL_Delay+0x44>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	001a      	movs	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	189b      	adds	r3, r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001666:	46c0      	nop			; (mov r8, r8)
 8001668:	f7ff ffe0 	bl	800162c <HAL_GetTick>
 800166c:	0002      	movs	r2, r0
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	429a      	cmp	r2, r3
 8001676:	d8f7      	bhi.n	8001668 <HAL_Delay+0x28>
  {
  }
}
 8001678:	46c0      	nop			; (mov r8, r8)
 800167a:	46c0      	nop			; (mov r8, r8)
 800167c:	46bd      	mov	sp, r7
 800167e:	b004      	add	sp, #16
 8001680:	bd80      	pop	{r7, pc}
 8001682:	46c0      	nop			; (mov r8, r8)
 8001684:	20000008 	.word	0x20000008

08001688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001688:	b590      	push	{r4, r7, lr}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	0002      	movs	r2, r0
 8001690:	6039      	str	r1, [r7, #0]
 8001692:	1dfb      	adds	r3, r7, #7
 8001694:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001696:	1dfb      	adds	r3, r7, #7
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b7f      	cmp	r3, #127	; 0x7f
 800169c:	d828      	bhi.n	80016f0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169e:	4a2f      	ldr	r2, [pc, #188]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016a0:	1dfb      	adds	r3, r7, #7
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	b25b      	sxtb	r3, r3
 80016a6:	089b      	lsrs	r3, r3, #2
 80016a8:	33c0      	adds	r3, #192	; 0xc0
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	589b      	ldr	r3, [r3, r2]
 80016ae:	1dfa      	adds	r2, r7, #7
 80016b0:	7812      	ldrb	r2, [r2, #0]
 80016b2:	0011      	movs	r1, r2
 80016b4:	2203      	movs	r2, #3
 80016b6:	400a      	ands	r2, r1
 80016b8:	00d2      	lsls	r2, r2, #3
 80016ba:	21ff      	movs	r1, #255	; 0xff
 80016bc:	4091      	lsls	r1, r2
 80016be:	000a      	movs	r2, r1
 80016c0:	43d2      	mvns	r2, r2
 80016c2:	401a      	ands	r2, r3
 80016c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	019b      	lsls	r3, r3, #6
 80016ca:	22ff      	movs	r2, #255	; 0xff
 80016cc:	401a      	ands	r2, r3
 80016ce:	1dfb      	adds	r3, r7, #7
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	0018      	movs	r0, r3
 80016d4:	2303      	movs	r3, #3
 80016d6:	4003      	ands	r3, r0
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016dc:	481f      	ldr	r0, [pc, #124]	; (800175c <__NVIC_SetPriority+0xd4>)
 80016de:	1dfb      	adds	r3, r7, #7
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	089b      	lsrs	r3, r3, #2
 80016e6:	430a      	orrs	r2, r1
 80016e8:	33c0      	adds	r3, #192	; 0xc0
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80016ee:	e031      	b.n	8001754 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016f0:	4a1b      	ldr	r2, [pc, #108]	; (8001760 <__NVIC_SetPriority+0xd8>)
 80016f2:	1dfb      	adds	r3, r7, #7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	0019      	movs	r1, r3
 80016f8:	230f      	movs	r3, #15
 80016fa:	400b      	ands	r3, r1
 80016fc:	3b08      	subs	r3, #8
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3306      	adds	r3, #6
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	18d3      	adds	r3, r2, r3
 8001706:	3304      	adds	r3, #4
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	1dfa      	adds	r2, r7, #7
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	0011      	movs	r1, r2
 8001710:	2203      	movs	r2, #3
 8001712:	400a      	ands	r2, r1
 8001714:	00d2      	lsls	r2, r2, #3
 8001716:	21ff      	movs	r1, #255	; 0xff
 8001718:	4091      	lsls	r1, r2
 800171a:	000a      	movs	r2, r1
 800171c:	43d2      	mvns	r2, r2
 800171e:	401a      	ands	r2, r3
 8001720:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	019b      	lsls	r3, r3, #6
 8001726:	22ff      	movs	r2, #255	; 0xff
 8001728:	401a      	ands	r2, r3
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	0018      	movs	r0, r3
 8001730:	2303      	movs	r3, #3
 8001732:	4003      	ands	r3, r0
 8001734:	00db      	lsls	r3, r3, #3
 8001736:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001738:	4809      	ldr	r0, [pc, #36]	; (8001760 <__NVIC_SetPriority+0xd8>)
 800173a:	1dfb      	adds	r3, r7, #7
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001c      	movs	r4, r3
 8001740:	230f      	movs	r3, #15
 8001742:	4023      	ands	r3, r4
 8001744:	3b08      	subs	r3, #8
 8001746:	089b      	lsrs	r3, r3, #2
 8001748:	430a      	orrs	r2, r1
 800174a:	3306      	adds	r3, #6
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	18c3      	adds	r3, r0, r3
 8001750:	3304      	adds	r3, #4
 8001752:	601a      	str	r2, [r3, #0]
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b003      	add	sp, #12
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	e000e100 	.word	0xe000e100
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	1e5a      	subs	r2, r3, #1
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	045b      	lsls	r3, r3, #17
 8001774:	429a      	cmp	r2, r3
 8001776:	d301      	bcc.n	800177c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001778:	2301      	movs	r3, #1
 800177a:	e010      	b.n	800179e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <SysTick_Config+0x44>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	3a01      	subs	r2, #1
 8001782:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001784:	2301      	movs	r3, #1
 8001786:	425b      	negs	r3, r3
 8001788:	2103      	movs	r1, #3
 800178a:	0018      	movs	r0, r3
 800178c:	f7ff ff7c 	bl	8001688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <SysTick_Config+0x44>)
 8001792:	2200      	movs	r2, #0
 8001794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001796:	4b04      	ldr	r3, [pc, #16]	; (80017a8 <SysTick_Config+0x44>)
 8001798:	2207      	movs	r2, #7
 800179a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800179c:	2300      	movs	r3, #0
}
 800179e:	0018      	movs	r0, r3
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	e000e010 	.word	0xe000e010

080017ac <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	210f      	movs	r1, #15
 80017b8:	187b      	adds	r3, r7, r1
 80017ba:	1c02      	adds	r2, r0, #0
 80017bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	b25b      	sxtb	r3, r3
 80017c6:	0011      	movs	r1, r2
 80017c8:	0018      	movs	r0, r3
 80017ca:	f7ff ff5d 	bl	8001688 <__NVIC_SetPriority>
}
 80017ce:	46c0      	nop			; (mov r8, r8)
 80017d0:	46bd      	mov	sp, r7
 80017d2:	b004      	add	sp, #16
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0018      	movs	r0, r3
 80017e2:	f7ff ffbf 	bl	8001764 <SysTick_Config>
 80017e6:	0003      	movs	r3, r0
}
 80017e8:	0018      	movs	r0, r3
 80017ea:	46bd      	mov	sp, r7
 80017ec:	b002      	add	sp, #8
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017fa:	2300      	movs	r3, #0
 80017fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017fe:	e155      	b.n	8001aac <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2101      	movs	r1, #1
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4091      	lsls	r1, r2
 800180a:	000a      	movs	r2, r1
 800180c:	4013      	ands	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d100      	bne.n	8001818 <HAL_GPIO_Init+0x28>
 8001816:	e146      	b.n	8001aa6 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	4013      	ands	r3, r2
 8001820:	2b01      	cmp	r3, #1
 8001822:	d005      	beq.n	8001830 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2203      	movs	r2, #3
 800182a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800182c:	2b02      	cmp	r3, #2
 800182e:	d130      	bne.n	8001892 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	409a      	lsls	r2, r3
 800183e:	0013      	movs	r3, r2
 8001840:	43da      	mvns	r2, r3
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68da      	ldr	r2, [r3, #12]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001866:	2201      	movs	r2, #1
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
 800186c:	0013      	movs	r3, r2
 800186e:	43da      	mvns	r2, r3
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	4013      	ands	r3, r2
 8001874:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	091b      	lsrs	r3, r3, #4
 800187c:	2201      	movs	r2, #1
 800187e:	401a      	ands	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	409a      	lsls	r2, r3
 8001884:	0013      	movs	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	2203      	movs	r2, #3
 8001898:	4013      	ands	r3, r2
 800189a:	2b03      	cmp	r3, #3
 800189c:	d017      	beq.n	80018ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	2203      	movs	r2, #3
 80018aa:	409a      	lsls	r2, r3
 80018ac:	0013      	movs	r3, r2
 80018ae:	43da      	mvns	r2, r3
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	4013      	ands	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	689a      	ldr	r2, [r3, #8]
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	409a      	lsls	r2, r3
 80018c0:	0013      	movs	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2203      	movs	r2, #3
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d123      	bne.n	8001922 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	08da      	lsrs	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	3208      	adds	r2, #8
 80018e2:	0092      	lsls	r2, r2, #2
 80018e4:	58d3      	ldr	r3, [r2, r3]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4013      	ands	r3, r2
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	220f      	movs	r2, #15
 80018f2:	409a      	lsls	r2, r3
 80018f4:	0013      	movs	r3, r2
 80018f6:	43da      	mvns	r2, r3
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	691a      	ldr	r2, [r3, #16]
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	2107      	movs	r1, #7
 8001906:	400b      	ands	r3, r1
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	409a      	lsls	r2, r3
 800190c:	0013      	movs	r3, r2
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	08da      	lsrs	r2, r3, #3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	3208      	adds	r2, #8
 800191c:	0092      	lsls	r2, r2, #2
 800191e:	6939      	ldr	r1, [r7, #16]
 8001920:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	2203      	movs	r2, #3
 800192e:	409a      	lsls	r2, r3
 8001930:	0013      	movs	r3, r2
 8001932:	43da      	mvns	r2, r3
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2203      	movs	r2, #3
 8001940:	401a      	ands	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	409a      	lsls	r2, r3
 8001948:	0013      	movs	r3, r2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	693a      	ldr	r2, [r7, #16]
 8001954:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	23c0      	movs	r3, #192	; 0xc0
 800195c:	029b      	lsls	r3, r3, #10
 800195e:	4013      	ands	r3, r2
 8001960:	d100      	bne.n	8001964 <HAL_GPIO_Init+0x174>
 8001962:	e0a0      	b.n	8001aa6 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001964:	4b57      	ldr	r3, [pc, #348]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 8001966:	699a      	ldr	r2, [r3, #24]
 8001968:	4b56      	ldr	r3, [pc, #344]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 800196a:	2101      	movs	r1, #1
 800196c:	430a      	orrs	r2, r1
 800196e:	619a      	str	r2, [r3, #24]
 8001970:	4b54      	ldr	r3, [pc, #336]	; (8001ac4 <HAL_GPIO_Init+0x2d4>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	2201      	movs	r2, #1
 8001976:	4013      	ands	r3, r2
 8001978:	60bb      	str	r3, [r7, #8]
 800197a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800197c:	4a52      	ldr	r2, [pc, #328]	; (8001ac8 <HAL_GPIO_Init+0x2d8>)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	089b      	lsrs	r3, r3, #2
 8001982:	3302      	adds	r3, #2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	589b      	ldr	r3, [r3, r2]
 8001988:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	2203      	movs	r2, #3
 800198e:	4013      	ands	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	220f      	movs	r2, #15
 8001994:	409a      	lsls	r2, r3
 8001996:	0013      	movs	r3, r2
 8001998:	43da      	mvns	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	2390      	movs	r3, #144	; 0x90
 80019a4:	05db      	lsls	r3, r3, #23
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d019      	beq.n	80019de <HAL_GPIO_Init+0x1ee>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a47      	ldr	r2, [pc, #284]	; (8001acc <HAL_GPIO_Init+0x2dc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <HAL_GPIO_Init+0x1ea>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a46      	ldr	r2, [pc, #280]	; (8001ad0 <HAL_GPIO_Init+0x2e0>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00d      	beq.n	80019d6 <HAL_GPIO_Init+0x1e6>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a45      	ldr	r2, [pc, #276]	; (8001ad4 <HAL_GPIO_Init+0x2e4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0x1e2>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a44      	ldr	r2, [pc, #272]	; (8001ad8 <HAL_GPIO_Init+0x2e8>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d101      	bne.n	80019ce <HAL_GPIO_Init+0x1de>
 80019ca:	2304      	movs	r3, #4
 80019cc:	e008      	b.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019ce:	2305      	movs	r3, #5
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019d2:	2303      	movs	r3, #3
 80019d4:	e004      	b.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019d6:	2302      	movs	r3, #2
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_GPIO_Init+0x1f0>
 80019de:	2300      	movs	r3, #0
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	2103      	movs	r1, #3
 80019e4:	400a      	ands	r2, r1
 80019e6:	0092      	lsls	r2, r2, #2
 80019e8:	4093      	lsls	r3, r2
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019f0:	4935      	ldr	r1, [pc, #212]	; (8001ac8 <HAL_GPIO_Init+0x2d8>)
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	089b      	lsrs	r3, r3, #2
 80019f6:	3302      	adds	r3, #2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019fe:	4b37      	ldr	r3, [pc, #220]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	43da      	mvns	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	2380      	movs	r3, #128	; 0x80
 8001a14:	025b      	lsls	r3, r3, #9
 8001a16:	4013      	ands	r3, r2
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a22:	4b2e      	ldr	r3, [pc, #184]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	43da      	mvns	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685a      	ldr	r2, [r3, #4]
 8001a3c:	2380      	movs	r3, #128	; 0x80
 8001a3e:	029b      	lsls	r3, r3, #10
 8001a40:	4013      	ands	r3, r2
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a52:	4b22      	ldr	r3, [pc, #136]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	035b      	lsls	r3, r3, #13
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d003      	beq.n	8001a76 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001a76:	4b19      	ldr	r3, [pc, #100]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001a7c:	4b17      	ldr	r3, [pc, #92]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	43da      	mvns	r2, r3
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	4013      	ands	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	039b      	lsls	r3, r3, #14
 8001a94:	4013      	ands	r3, r2
 8001a96:	d003      	beq.n	8001aa0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a98:	693a      	ldr	r2, [r7, #16]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_GPIO_Init+0x2ec>)
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	40da      	lsrs	r2, r3
 8001ab4:	1e13      	subs	r3, r2, #0
 8001ab6:	d000      	beq.n	8001aba <HAL_GPIO_Init+0x2ca>
 8001ab8:	e6a2      	b.n	8001800 <HAL_GPIO_Init+0x10>
  } 
}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b006      	add	sp, #24
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40010000 	.word	0x40010000
 8001acc:	48000400 	.word	0x48000400
 8001ad0:	48000800 	.word	0x48000800
 8001ad4:	48000c00 	.word	0x48000c00
 8001ad8:	48001000 	.word	0x48001000
 8001adc:	40010400 	.word	0x40010400

08001ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	0008      	movs	r0, r1
 8001aea:	0011      	movs	r1, r2
 8001aec:	1cbb      	adds	r3, r7, #2
 8001aee:	1c02      	adds	r2, r0, #0
 8001af0:	801a      	strh	r2, [r3, #0]
 8001af2:	1c7b      	adds	r3, r7, #1
 8001af4:	1c0a      	adds	r2, r1, #0
 8001af6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001af8:	1c7b      	adds	r3, r7, #1
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d004      	beq.n	8001b0a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b00:	1cbb      	adds	r3, r7, #2
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b08:	e003      	b.n	8001b12 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b0a:	1cbb      	adds	r3, r7, #2
 8001b0c:	881a      	ldrh	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	46bd      	mov	sp, r7
 8001b16:	b002      	add	sp, #8
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e082      	b.n	8001c34 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2241      	movs	r2, #65	; 0x41
 8001b32:	5c9b      	ldrb	r3, [r3, r2]
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d107      	bne.n	8001b4a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2240      	movs	r2, #64	; 0x40
 8001b3e:	2100      	movs	r1, #0
 8001b40:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff fbff 	bl	8001348 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2241      	movs	r2, #65	; 0x41
 8001b4e:	2124      	movs	r1, #36	; 0x24
 8001b50:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	438a      	bics	r2, r1
 8001b60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4934      	ldr	r1, [pc, #208]	; (8001c3c <HAL_I2C_Init+0x120>)
 8001b6c:	400a      	ands	r2, r1
 8001b6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	689a      	ldr	r2, [r3, #8]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4931      	ldr	r1, [pc, #196]	; (8001c40 <HAL_I2C_Init+0x124>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	2180      	movs	r1, #128	; 0x80
 8001b92:	0209      	lsls	r1, r1, #8
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e007      	b.n	8001baa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2184      	movs	r1, #132	; 0x84
 8001ba4:	0209      	lsls	r1, r1, #8
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d104      	bne.n	8001bbc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2280      	movs	r2, #128	; 0x80
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	685a      	ldr	r2, [r3, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	491f      	ldr	r1, [pc, #124]	; (8001c44 <HAL_I2C_Init+0x128>)
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	491a      	ldr	r1, [pc, #104]	; (8001c40 <HAL_I2C_Init+0x124>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	695b      	ldr	r3, [r3, #20]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69d9      	ldr	r1, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1a      	ldr	r2, [r3, #32]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2241      	movs	r2, #65	; 0x41
 8001c20:	2120      	movs	r1, #32
 8001c22:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2242      	movs	r2, #66	; 0x42
 8001c2e:	2100      	movs	r1, #0
 8001c30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b002      	add	sp, #8
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	f0ffffff 	.word	0xf0ffffff
 8001c40:	ffff7fff 	.word	0xffff7fff
 8001c44:	02008000 	.word	0x02008000

08001c48 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b089      	sub	sp, #36	; 0x24
 8001c4c:	af02      	add	r7, sp, #8
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	0008      	movs	r0, r1
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	0019      	movs	r1, r3
 8001c56:	230a      	movs	r3, #10
 8001c58:	18fb      	adds	r3, r7, r3
 8001c5a:	1c02      	adds	r2, r0, #0
 8001c5c:	801a      	strh	r2, [r3, #0]
 8001c5e:	2308      	movs	r3, #8
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	1c0a      	adds	r2, r1, #0
 8001c64:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2241      	movs	r2, #65	; 0x41
 8001c6a:	5c9b      	ldrb	r3, [r3, r2]
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b20      	cmp	r3, #32
 8001c70:	d000      	beq.n	8001c74 <HAL_I2C_Master_Transmit+0x2c>
 8001c72:	e0e7      	b.n	8001e44 <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2240      	movs	r2, #64	; 0x40
 8001c78:	5c9b      	ldrb	r3, [r3, r2]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d101      	bne.n	8001c82 <HAL_I2C_Master_Transmit+0x3a>
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0e1      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2240      	movs	r2, #64	; 0x40
 8001c86:	2101      	movs	r1, #1
 8001c88:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c8a:	f7ff fccf 	bl	800162c <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c92:	2380      	movs	r3, #128	; 0x80
 8001c94:	0219      	lsls	r1, r3, #8
 8001c96:	68f8      	ldr	r0, [r7, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2319      	movs	r3, #25
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f000 fa04 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001ca4:	1e03      	subs	r3, r0, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e0cc      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2241      	movs	r2, #65	; 0x41
 8001cb0:	2121      	movs	r1, #33	; 0x21
 8001cb2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2242      	movs	r2, #66	; 0x42
 8001cb8:	2110      	movs	r1, #16
 8001cba:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2208      	movs	r2, #8
 8001ccc:	18ba      	adds	r2, r7, r2
 8001cce:	8812      	ldrh	r2, [r2, #0]
 8001cd0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	2bff      	cmp	r3, #255	; 0xff
 8001ce0:	d911      	bls.n	8001d06 <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	b2da      	uxtb	r2, r3
 8001cee:	2380      	movs	r3, #128	; 0x80
 8001cf0:	045c      	lsls	r4, r3, #17
 8001cf2:	230a      	movs	r3, #10
 8001cf4:	18fb      	adds	r3, r7, r3
 8001cf6:	8819      	ldrh	r1, [r3, #0]
 8001cf8:	68f8      	ldr	r0, [r7, #12]
 8001cfa:	4b55      	ldr	r3, [pc, #340]	; (8001e50 <HAL_I2C_Master_Transmit+0x208>)
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	0023      	movs	r3, r4
 8001d00:	f000 fb74 	bl	80023ec <I2C_TransferConfig>
 8001d04:	e075      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	049c      	lsls	r4, r3, #18
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	18fb      	adds	r3, r7, r3
 8001d1e:	8819      	ldrh	r1, [r3, #0]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	4b4b      	ldr	r3, [pc, #300]	; (8001e50 <HAL_I2C_Master_Transmit+0x208>)
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	0023      	movs	r3, r4
 8001d28:	f000 fb60 	bl	80023ec <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001d2c:	e061      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 f9f8 	bl	800212a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e081      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	1c5a      	adds	r2, r3, #1
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29a      	uxth	r2, r3
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6a:	3b01      	subs	r3, #1
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d03a      	beq.n	8001df2 <HAL_I2C_Master_Transmit+0x1aa>
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d136      	bne.n	8001df2 <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	9300      	str	r3, [sp, #0]
 8001d8c:	0013      	movs	r3, r2
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2180      	movs	r1, #128	; 0x80
 8001d92:	f000 f98b 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001d96:	1e03      	subs	r3, r0, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e053      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	2bff      	cmp	r3, #255	; 0xff
 8001da6:	d911      	bls.n	8001dcc <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	22ff      	movs	r2, #255	; 0xff
 8001dac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	045c      	lsls	r4, r3, #17
 8001db8:	230a      	movs	r3, #10
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	8819      	ldrh	r1, [r3, #0]
 8001dbe:	68f8      	ldr	r0, [r7, #12]
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	0023      	movs	r3, r4
 8001dc6:	f000 fb11 	bl	80023ec <I2C_TransferConfig>
 8001dca:	e012      	b.n	8001df2 <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	2380      	movs	r3, #128	; 0x80
 8001dde:	049c      	lsls	r4, r3, #18
 8001de0:	230a      	movs	r3, #10
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	8819      	ldrh	r1, [r3, #0]
 8001de6:	68f8      	ldr	r0, [r7, #12]
 8001de8:	2300      	movs	r3, #0
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	0023      	movs	r3, r4
 8001dee:	f000 fafd 	bl	80023ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d198      	bne.n	8001d2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	0018      	movs	r0, r3
 8001e04:	f000 f9d0 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e08:	1e03      	subs	r3, r0, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e01a      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	2220      	movs	r2, #32
 8001e16:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	490c      	ldr	r1, [pc, #48]	; (8001e54 <HAL_I2C_Master_Transmit+0x20c>)
 8001e24:	400a      	ands	r2, r1
 8001e26:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2241      	movs	r2, #65	; 0x41
 8001e2c:	2120      	movs	r1, #32
 8001e2e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2242      	movs	r2, #66	; 0x42
 8001e34:	2100      	movs	r1, #0
 8001e36:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	e000      	b.n	8001e46 <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 8001e44:	2302      	movs	r3, #2
  }
}
 8001e46:	0018      	movs	r0, r3
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	b007      	add	sp, #28
 8001e4c:	bd90      	pop	{r4, r7, pc}
 8001e4e:	46c0      	nop			; (mov r8, r8)
 8001e50:	80002000 	.word	0x80002000
 8001e54:	fe00e800 	.word	0xfe00e800

08001e58 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8001e58:	b590      	push	{r4, r7, lr}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af02      	add	r7, sp, #8
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	0008      	movs	r0, r1
 8001e62:	607a      	str	r2, [r7, #4]
 8001e64:	0019      	movs	r1, r3
 8001e66:	230a      	movs	r3, #10
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	1c02      	adds	r2, r0, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	2308      	movs	r3, #8
 8001e70:	18fb      	adds	r3, r7, r3
 8001e72:	1c0a      	adds	r2, r1, #0
 8001e74:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2241      	movs	r2, #65	; 0x41
 8001e7a:	5c9b      	ldrb	r3, [r3, r2]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b20      	cmp	r3, #32
 8001e80:	d000      	beq.n	8001e84 <HAL_I2C_Master_Receive+0x2c>
 8001e82:	e0e8      	b.n	8002056 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	5c9b      	ldrb	r3, [r3, r2]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d101      	bne.n	8001e92 <HAL_I2C_Master_Receive+0x3a>
 8001e8e:	2302      	movs	r3, #2
 8001e90:	e0e2      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2240      	movs	r2, #64	; 0x40
 8001e96:	2101      	movs	r1, #1
 8001e98:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e9a:	f7ff fbc7 	bl	800162c <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	0219      	lsls	r1, r3, #8
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	2319      	movs	r3, #25
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f000 f8fc 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001eb4:	1e03      	subs	r3, r0, #0
 8001eb6:	d001      	beq.n	8001ebc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0cd      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2241      	movs	r2, #65	; 0x41
 8001ec0:	2122      	movs	r1, #34	; 0x22
 8001ec2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2242      	movs	r2, #66	; 0x42
 8001ec8:	2110      	movs	r1, #16
 8001eca:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	2208      	movs	r2, #8
 8001edc:	18ba      	adds	r2, r7, r2
 8001ede:	8812      	ldrh	r2, [r2, #0]
 8001ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	2bff      	cmp	r3, #255	; 0xff
 8001ef0:	d911      	bls.n	8001f16 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	22ff      	movs	r2, #255	; 0xff
 8001ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efc:	b2da      	uxtb	r2, r3
 8001efe:	2380      	movs	r3, #128	; 0x80
 8001f00:	045c      	lsls	r4, r3, #17
 8001f02:	230a      	movs	r3, #10
 8001f04:	18fb      	adds	r3, r7, r3
 8001f06:	8819      	ldrh	r1, [r3, #0]
 8001f08:	68f8      	ldr	r0, [r7, #12]
 8001f0a:	4b55      	ldr	r3, [pc, #340]	; (8002060 <HAL_I2C_Master_Receive+0x208>)
 8001f0c:	9300      	str	r3, [sp, #0]
 8001f0e:	0023      	movs	r3, r4
 8001f10:	f000 fa6c 	bl	80023ec <I2C_TransferConfig>
 8001f14:	e076      	b.n	8002004 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29a      	uxth	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	049c      	lsls	r4, r3, #18
 8001f2a:	230a      	movs	r3, #10
 8001f2c:	18fb      	adds	r3, r7, r3
 8001f2e:	8819      	ldrh	r1, [r3, #0]
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <HAL_I2C_Master_Receive+0x208>)
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	0023      	movs	r3, r4
 8001f38:	f000 fa58 	bl	80023ec <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001f3c:	e062      	b.n	8002004 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	0018      	movs	r0, r3
 8001f46:	f000 f96b 	bl	8002220 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f4a:	1e03      	subs	r3, r0, #0
 8001f4c:	d001      	beq.n	8001f52 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e082      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	b2d2      	uxtb	r2, r2
 8001f5e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f64:	1c5a      	adds	r2, r3, #1
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b29a      	uxth	r2, r3
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d03a      	beq.n	8002004 <HAL_I2C_Master_Receive+0x1ac>
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d136      	bne.n	8002004 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	0013      	movs	r3, r2
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	f000 f882 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001fa8:	1e03      	subs	r3, r0, #0
 8001faa:	d001      	beq.n	8001fb0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e053      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2bff      	cmp	r3, #255	; 0xff
 8001fb8:	d911      	bls.n	8001fde <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	22ff      	movs	r2, #255	; 0xff
 8001fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	045c      	lsls	r4, r3, #17
 8001fca:	230a      	movs	r3, #10
 8001fcc:	18fb      	adds	r3, r7, r3
 8001fce:	8819      	ldrh	r1, [r3, #0]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	0023      	movs	r3, r4
 8001fd8:	f000 fa08 	bl	80023ec <I2C_TransferConfig>
 8001fdc:	e012      	b.n	8002004 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29a      	uxth	r2, r3
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	049c      	lsls	r4, r3, #18
 8001ff2:	230a      	movs	r3, #10
 8001ff4:	18fb      	adds	r3, r7, r3
 8001ff6:	8819      	ldrh	r1, [r3, #0]
 8001ff8:	68f8      	ldr	r0, [r7, #12]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	9300      	str	r3, [sp, #0]
 8001ffe:	0023      	movs	r3, r4
 8002000:	f000 f9f4 	bl	80023ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002008:	b29b      	uxth	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d197      	bne.n	8001f3e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	0018      	movs	r0, r3
 8002016:	f000 f8c7 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 800201a:	1e03      	subs	r3, r0, #0
 800201c:	d001      	beq.n	8002022 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e01a      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2220      	movs	r2, #32
 8002028:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	490b      	ldr	r1, [pc, #44]	; (8002064 <HAL_I2C_Master_Receive+0x20c>)
 8002036:	400a      	ands	r2, r1
 8002038:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2241      	movs	r2, #65	; 0x41
 800203e:	2120      	movs	r1, #32
 8002040:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2242      	movs	r2, #66	; 0x42
 8002046:	2100      	movs	r1, #0
 8002048:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2240      	movs	r2, #64	; 0x40
 800204e:	2100      	movs	r1, #0
 8002050:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002052:	2300      	movs	r3, #0
 8002054:	e000      	b.n	8002058 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8002056:	2302      	movs	r3, #2
  }
}
 8002058:	0018      	movs	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	b007      	add	sp, #28
 800205e:	bd90      	pop	{r4, r7, pc}
 8002060:	80002400 	.word	0x80002400
 8002064:	fe00e800 	.word	0xfe00e800

08002068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d007      	beq.n	80020a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
  }
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	e021      	b.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	d01e      	beq.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff fab2 	bl	800162c <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	2220      	movs	r2, #32
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2241      	movs	r2, #65	; 0x41
 80020ea:	2120      	movs	r1, #32
 80020ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2242      	movs	r2, #66	; 0x42
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	425a      	negs	r2, r3
 8002112:	4153      	adcs	r3, r2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	001a      	movs	r2, r3
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d0ce      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002136:	e02b      	b.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f8da 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 8002144:	1e03      	subs	r3, r0, #0
 8002146:	d001      	beq.n	800214c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e029      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	d01e      	beq.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff fa6b 	bl	800162c <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2220      	movs	r2, #32
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2241      	movs	r2, #65	; 0x41
 8002178:	2120      	movs	r1, #32
 800217a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2242      	movs	r2, #66	; 0x42
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d1cc      	bne.n	8002138 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	e028      	b.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f89b 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e026      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff fa2f 	bl	800162c <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2220      	movs	r2, #32
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2241      	movs	r2, #65	; 0x41
 80021f0:	2120      	movs	r1, #32
 80021f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2242      	movs	r2, #66	; 0x42
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2220      	movs	r2, #32
 8002210:	4013      	ands	r3, r2
 8002212:	2b20      	cmp	r3, #32
 8002214:	d1cf      	bne.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800222c:	e055      	b.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68b9      	ldr	r1, [r7, #8]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	0018      	movs	r0, r3
 8002236:	f000 f85f 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 800223a:	1e03      	subs	r3, r0, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e053      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	2220      	movs	r2, #32
 800224a:	4013      	ands	r3, r2
 800224c:	2b20      	cmp	r3, #32
 800224e:	d129      	bne.n	80022a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2204      	movs	r2, #4
 8002258:	4013      	ands	r3, r2
 800225a:	2b04      	cmp	r3, #4
 800225c:	d105      	bne.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002266:	2300      	movs	r3, #0
 8002268:	e03f      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2220      	movs	r2, #32
 8002270:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685a      	ldr	r2, [r3, #4]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	491d      	ldr	r1, [pc, #116]	; (80022f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800227e:	400a      	ands	r2, r1
 8002280:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2200      	movs	r2, #0
 8002286:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2241      	movs	r2, #65	; 0x41
 800228c:	2120      	movs	r1, #32
 800228e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2242      	movs	r2, #66	; 0x42
 8002294:	2100      	movs	r1, #0
 8002296:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2240      	movs	r2, #64	; 0x40
 800229c:	2100      	movs	r1, #0
 800229e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e022      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a4:	f7ff f9c2 	bl	800162c <HAL_GetTick>
 80022a8:	0002      	movs	r2, r0
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d302      	bcc.n	80022ba <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10f      	bne.n	80022da <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	2220      	movs	r2, #32
 80022c0:	431a      	orrs	r2, r3
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2241      	movs	r2, #65	; 0x41
 80022ca:	2120      	movs	r1, #32
 80022cc:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2240      	movs	r2, #64	; 0x40
 80022d2:	2100      	movs	r1, #0
 80022d4:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e007      	b.n	80022ea <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	2204      	movs	r2, #4
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d1a2      	bne.n	800222e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	0018      	movs	r0, r3
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b004      	add	sp, #16
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	46c0      	nop			; (mov r8, r8)
 80022f4:	fe00e800 	.word	0xfe00e800

080022f8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	2210      	movs	r2, #16
 800230c:	4013      	ands	r3, r2
 800230e:	2b10      	cmp	r3, #16
 8002310:	d164      	bne.n	80023dc <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	049b      	lsls	r3, r3, #18
 800231c:	401a      	ands	r2, r3
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	049b      	lsls	r3, r3, #18
 8002322:	429a      	cmp	r2, r3
 8002324:	d02b      	beq.n	800237e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2180      	movs	r1, #128	; 0x80
 8002332:	01c9      	lsls	r1, r1, #7
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002338:	e021      	b.n	800237e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	d01e      	beq.n	800237e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002340:	f7ff f974 	bl	800162c <HAL_GetTick>
 8002344:	0002      	movs	r2, r0
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	68ba      	ldr	r2, [r7, #8]
 800234c:	429a      	cmp	r2, r3
 800234e:	d302      	bcc.n	8002356 <I2C_IsAcknowledgeFailed+0x5e>
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d113      	bne.n	800237e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235a:	2220      	movs	r2, #32
 800235c:	431a      	orrs	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2241      	movs	r2, #65	; 0x41
 8002366:	2120      	movs	r1, #32
 8002368:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	2242      	movs	r2, #66	; 0x42
 800236e:	2100      	movs	r1, #0
 8002370:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2240      	movs	r2, #64	; 0x40
 8002376:	2100      	movs	r1, #0
 8002378:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e02f      	b.n	80023de <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2220      	movs	r2, #32
 8002386:	4013      	ands	r3, r2
 8002388:	2b20      	cmp	r3, #32
 800238a:	d1d6      	bne.n	800233a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2220      	movs	r2, #32
 800239a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0018      	movs	r0, r3
 80023a0:	f7ff fe62 	bl	8002068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	490e      	ldr	r1, [pc, #56]	; (80023e8 <I2C_IsAcknowledgeFailed+0xf0>)
 80023b0:	400a      	ands	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	2204      	movs	r2, #4
 80023ba:	431a      	orrs	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	2241      	movs	r2, #65	; 0x41
 80023c4:	2120      	movs	r1, #32
 80023c6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	2242      	movs	r2, #66	; 0x42
 80023cc:	2100      	movs	r1, #0
 80023ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2240      	movs	r2, #64	; 0x40
 80023d4:	2100      	movs	r1, #0
 80023d6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e000      	b.n	80023de <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	fe00e800 	.word	0xfe00e800

080023ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	0008      	movs	r0, r1
 80023f6:	0011      	movs	r1, r2
 80023f8:	607b      	str	r3, [r7, #4]
 80023fa:	240a      	movs	r4, #10
 80023fc:	193b      	adds	r3, r7, r4
 80023fe:	1c02      	adds	r2, r0, #0
 8002400:	801a      	strh	r2, [r3, #0]
 8002402:	2009      	movs	r0, #9
 8002404:	183b      	adds	r3, r7, r0
 8002406:	1c0a      	adds	r2, r1, #0
 8002408:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	0d51      	lsrs	r1, r2, #21
 8002414:	2280      	movs	r2, #128	; 0x80
 8002416:	00d2      	lsls	r2, r2, #3
 8002418:	400a      	ands	r2, r1
 800241a:	490e      	ldr	r1, [pc, #56]	; (8002454 <I2C_TransferConfig+0x68>)
 800241c:	430a      	orrs	r2, r1
 800241e:	43d2      	mvns	r2, r2
 8002420:	401a      	ands	r2, r3
 8002422:	0011      	movs	r1, r2
 8002424:	193b      	adds	r3, r7, r4
 8002426:	881b      	ldrh	r3, [r3, #0]
 8002428:	059b      	lsls	r3, r3, #22
 800242a:	0d9a      	lsrs	r2, r3, #22
 800242c:	183b      	adds	r3, r7, r0
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	0418      	lsls	r0, r3, #16
 8002432:	23ff      	movs	r3, #255	; 0xff
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4003      	ands	r3, r0
 8002438:	431a      	orrs	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	431a      	orrs	r2, r3
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	431a      	orrs	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	430a      	orrs	r2, r1
 8002448:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800244a:	46c0      	nop			; (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b005      	add	sp, #20
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	46c0      	nop			; (mov r8, r8)
 8002454:	03ff63ff 	.word	0x03ff63ff

08002458 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
 8002460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2241      	movs	r2, #65	; 0x41
 8002466:	5c9b      	ldrb	r3, [r3, r2]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b20      	cmp	r3, #32
 800246c:	d138      	bne.n	80024e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	5c9b      	ldrb	r3, [r3, r2]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002478:	2302      	movs	r3, #2
 800247a:	e032      	b.n	80024e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2240      	movs	r2, #64	; 0x40
 8002480:	2101      	movs	r1, #1
 8002482:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2241      	movs	r2, #65	; 0x41
 8002488:	2124      	movs	r1, #36	; 0x24
 800248a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2101      	movs	r1, #1
 8002498:	438a      	bics	r2, r1
 800249a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4911      	ldr	r1, [pc, #68]	; (80024ec <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6819      	ldr	r1, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	683a      	ldr	r2, [r7, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2101      	movs	r1, #1
 80024c8:	430a      	orrs	r2, r1
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2241      	movs	r2, #65	; 0x41
 80024d0:	2120      	movs	r1, #32
 80024d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	2100      	movs	r1, #0
 80024da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80024dc:	2300      	movs	r3, #0
 80024de:	e000      	b.n	80024e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80024e0:	2302      	movs	r3, #2
  }
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b002      	add	sp, #8
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	46c0      	nop			; (mov r8, r8)
 80024ec:	ffffefff 	.word	0xffffefff

080024f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2241      	movs	r2, #65	; 0x41
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b20      	cmp	r3, #32
 8002504:	d139      	bne.n	800257a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2240      	movs	r2, #64	; 0x40
 800250a:	5c9b      	ldrb	r3, [r3, r2]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002510:	2302      	movs	r3, #2
 8002512:	e033      	b.n	800257c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	2101      	movs	r1, #1
 800251a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2241      	movs	r2, #65	; 0x41
 8002520:	2124      	movs	r1, #36	; 0x24
 8002522:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681a      	ldr	r2, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	438a      	bics	r2, r1
 8002532:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4a11      	ldr	r2, [pc, #68]	; (8002584 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002540:	4013      	ands	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	68fa      	ldr	r2, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2101      	movs	r1, #1
 8002562:	430a      	orrs	r2, r1
 8002564:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2241      	movs	r2, #65	; 0x41
 800256a:	2120      	movs	r1, #32
 800256c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2240      	movs	r2, #64	; 0x40
 8002572:	2100      	movs	r1, #0
 8002574:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002576:	2300      	movs	r3, #0
 8002578:	e000      	b.n	800257c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800257a:	2302      	movs	r3, #2
  }
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	fffff0ff 	.word	0xfffff0ff

08002588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	f000 fb76 	bl	8002c88 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2201      	movs	r2, #1
 80025a2:	4013      	ands	r3, r2
 80025a4:	d100      	bne.n	80025a8 <HAL_RCC_OscConfig+0x20>
 80025a6:	e08e      	b.n	80026c6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025a8:	4bc5      	ldr	r3, [pc, #788]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	220c      	movs	r2, #12
 80025ae:	4013      	ands	r3, r2
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d00e      	beq.n	80025d2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025b4:	4bc2      	ldr	r3, [pc, #776]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	220c      	movs	r2, #12
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d117      	bne.n	80025f0 <HAL_RCC_OscConfig+0x68>
 80025c0:	4bbf      	ldr	r3, [pc, #764]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	23c0      	movs	r3, #192	; 0xc0
 80025c6:	025b      	lsls	r3, r3, #9
 80025c8:	401a      	ands	r2, r3
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d10e      	bne.n	80025f0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d2:	4bbb      	ldr	r3, [pc, #748]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	2380      	movs	r3, #128	; 0x80
 80025d8:	029b      	lsls	r3, r3, #10
 80025da:	4013      	ands	r3, r2
 80025dc:	d100      	bne.n	80025e0 <HAL_RCC_OscConfig+0x58>
 80025de:	e071      	b.n	80026c4 <HAL_RCC_OscConfig+0x13c>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d000      	beq.n	80025ea <HAL_RCC_OscConfig+0x62>
 80025e8:	e06c      	b.n	80026c4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f000 fb4c 	bl	8002c88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_OscConfig+0x80>
 80025f8:	4bb1      	ldr	r3, [pc, #708]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	4bb0      	ldr	r3, [pc, #704]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80025fe:	2180      	movs	r1, #128	; 0x80
 8002600:	0249      	lsls	r1, r1, #9
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e02f      	b.n	8002668 <HAL_RCC_OscConfig+0xe0>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10c      	bne.n	800262a <HAL_RCC_OscConfig+0xa2>
 8002610:	4bab      	ldr	r3, [pc, #684]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	4baa      	ldr	r3, [pc, #680]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002616:	49ab      	ldr	r1, [pc, #684]	; (80028c4 <HAL_RCC_OscConfig+0x33c>)
 8002618:	400a      	ands	r2, r1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	4ba8      	ldr	r3, [pc, #672]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	4ba7      	ldr	r3, [pc, #668]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002622:	49a9      	ldr	r1, [pc, #676]	; (80028c8 <HAL_RCC_OscConfig+0x340>)
 8002624:	400a      	ands	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e01e      	b.n	8002668 <HAL_RCC_OscConfig+0xe0>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b05      	cmp	r3, #5
 8002630:	d10e      	bne.n	8002650 <HAL_RCC_OscConfig+0xc8>
 8002632:	4ba3      	ldr	r3, [pc, #652]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4ba2      	ldr	r3, [pc, #648]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002638:	2180      	movs	r1, #128	; 0x80
 800263a:	02c9      	lsls	r1, r1, #11
 800263c:	430a      	orrs	r2, r1
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	4b9f      	ldr	r3, [pc, #636]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b9e      	ldr	r3, [pc, #632]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002646:	2180      	movs	r1, #128	; 0x80
 8002648:	0249      	lsls	r1, r1, #9
 800264a:	430a      	orrs	r2, r1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e00b      	b.n	8002668 <HAL_RCC_OscConfig+0xe0>
 8002650:	4b9b      	ldr	r3, [pc, #620]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b9a      	ldr	r3, [pc, #616]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002656:	499b      	ldr	r1, [pc, #620]	; (80028c4 <HAL_RCC_OscConfig+0x33c>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	4b98      	ldr	r3, [pc, #608]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	4b97      	ldr	r3, [pc, #604]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002662:	4999      	ldr	r1, [pc, #612]	; (80028c8 <HAL_RCC_OscConfig+0x340>)
 8002664:	400a      	ands	r2, r1
 8002666:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d014      	beq.n	800269a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002670:	f7fe ffdc 	bl	800162c <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002678:	e008      	b.n	800268c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800267a:	f7fe ffd7 	bl	800162c <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	1ad3      	subs	r3, r2, r3
 8002684:	2b64      	cmp	r3, #100	; 0x64
 8002686:	d901      	bls.n	800268c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	e2fd      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268c:	4b8c      	ldr	r3, [pc, #560]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	029b      	lsls	r3, r3, #10
 8002694:	4013      	ands	r3, r2
 8002696:	d0f0      	beq.n	800267a <HAL_RCC_OscConfig+0xf2>
 8002698:	e015      	b.n	80026c6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7fe ffc7 	bl	800162c <HAL_GetTick>
 800269e:	0003      	movs	r3, r0
 80026a0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026a4:	f7fe ffc2 	bl	800162c <HAL_GetTick>
 80026a8:	0002      	movs	r2, r0
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b64      	cmp	r3, #100	; 0x64
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e2e8      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b6:	4b82      	ldr	r3, [pc, #520]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	2380      	movs	r3, #128	; 0x80
 80026bc:	029b      	lsls	r3, r3, #10
 80026be:	4013      	ands	r3, r2
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x11c>
 80026c2:	e000      	b.n	80026c6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2202      	movs	r2, #2
 80026cc:	4013      	ands	r3, r2
 80026ce:	d100      	bne.n	80026d2 <HAL_RCC_OscConfig+0x14a>
 80026d0:	e06c      	b.n	80027ac <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80026d2:	4b7b      	ldr	r3, [pc, #492]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	220c      	movs	r2, #12
 80026d8:	4013      	ands	r3, r2
 80026da:	d00e      	beq.n	80026fa <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80026dc:	4b78      	ldr	r3, [pc, #480]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	220c      	movs	r2, #12
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b08      	cmp	r3, #8
 80026e6:	d11f      	bne.n	8002728 <HAL_RCC_OscConfig+0x1a0>
 80026e8:	4b75      	ldr	r3, [pc, #468]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	23c0      	movs	r3, #192	; 0xc0
 80026ee:	025b      	lsls	r3, r3, #9
 80026f0:	401a      	ands	r2, r3
 80026f2:	2380      	movs	r3, #128	; 0x80
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	429a      	cmp	r2, r3
 80026f8:	d116      	bne.n	8002728 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fa:	4b71      	ldr	r3, [pc, #452]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d005      	beq.n	8002710 <HAL_RCC_OscConfig+0x188>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	2b01      	cmp	r3, #1
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e2bb      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002710:	4b6b      	ldr	r3, [pc, #428]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	22f8      	movs	r2, #248	; 0xf8
 8002716:	4393      	bics	r3, r2
 8002718:	0019      	movs	r1, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00da      	lsls	r2, r3, #3
 8002720:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002726:	e041      	b.n	80027ac <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d024      	beq.n	800277a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002730:	4b63      	ldr	r3, [pc, #396]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	4b62      	ldr	r3, [pc, #392]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002736:	2101      	movs	r1, #1
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7fe ff76 	bl	800162c <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002746:	f7fe ff71 	bl	800162c <HAL_GetTick>
 800274a:	0002      	movs	r2, r0
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b02      	cmp	r3, #2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e297      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002758:	4b59      	ldr	r3, [pc, #356]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d0f1      	beq.n	8002746 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	22f8      	movs	r2, #248	; 0xf8
 8002768:	4393      	bics	r3, r2
 800276a:	0019      	movs	r1, r3
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	00da      	lsls	r2, r3, #3
 8002772:	4b53      	ldr	r3, [pc, #332]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	e018      	b.n	80027ac <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277a:	4b51      	ldr	r3, [pc, #324]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b50      	ldr	r3, [pc, #320]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002780:	2101      	movs	r1, #1
 8002782:	438a      	bics	r2, r1
 8002784:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe ff51 	bl	800162c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002790:	f7fe ff4c 	bl	800162c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e272      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a2:	4b47      	ldr	r3, [pc, #284]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2202      	movs	r2, #2
 80027a8:	4013      	ands	r3, r2
 80027aa:	d1f1      	bne.n	8002790 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2208      	movs	r2, #8
 80027b2:	4013      	ands	r3, r2
 80027b4:	d036      	beq.n	8002824 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d019      	beq.n	80027f2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027c2:	4b3f      	ldr	r3, [pc, #252]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027c4:	2101      	movs	r1, #1
 80027c6:	430a      	orrs	r2, r1
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ca:	f7fe ff2f 	bl	800162c <HAL_GetTick>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d4:	f7fe ff2a 	bl	800162c <HAL_GetTick>
 80027d8:	0002      	movs	r2, r0
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e250      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2202      	movs	r2, #2
 80027ec:	4013      	ands	r3, r2
 80027ee:	d0f1      	beq.n	80027d4 <HAL_RCC_OscConfig+0x24c>
 80027f0:	e018      	b.n	8002824 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f2:	4b33      	ldr	r3, [pc, #204]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f6:	4b32      	ldr	r3, [pc, #200]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80027f8:	2101      	movs	r1, #1
 80027fa:	438a      	bics	r2, r1
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7fe ff15 	bl	800162c <HAL_GetTick>
 8002802:	0003      	movs	r3, r0
 8002804:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002808:	f7fe ff10 	bl	800162c <HAL_GetTick>
 800280c:	0002      	movs	r2, r0
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e236      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281a:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800281c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281e:	2202      	movs	r2, #2
 8002820:	4013      	ands	r3, r2
 8002822:	d1f1      	bne.n	8002808 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2204      	movs	r2, #4
 800282a:	4013      	ands	r3, r2
 800282c:	d100      	bne.n	8002830 <HAL_RCC_OscConfig+0x2a8>
 800282e:	e0b5      	b.n	800299c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002830:	201f      	movs	r0, #31
 8002832:	183b      	adds	r3, r7, r0
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002838:	4b21      	ldr	r3, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	d110      	bne.n	8002866 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002844:	4b1e      	ldr	r3, [pc, #120]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002846:	69da      	ldr	r2, [r3, #28]
 8002848:	4b1d      	ldr	r3, [pc, #116]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 800284a:	2180      	movs	r1, #128	; 0x80
 800284c:	0549      	lsls	r1, r1, #21
 800284e:	430a      	orrs	r2, r1
 8002850:	61da      	str	r2, [r3, #28]
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	055b      	lsls	r3, r3, #21
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002860:	183b      	adds	r3, r7, r0
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002866:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_OscConfig+0x344>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4013      	ands	r3, r2
 8002870:	d11a      	bne.n	80028a8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002872:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_RCC_OscConfig+0x344>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4b15      	ldr	r3, [pc, #84]	; (80028cc <HAL_RCC_OscConfig+0x344>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0049      	lsls	r1, r1, #1
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002880:	f7fe fed4 	bl	800162c <HAL_GetTick>
 8002884:	0003      	movs	r3, r0
 8002886:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800288a:	f7fe fecf 	bl	800162c <HAL_GetTick>
 800288e:	0002      	movs	r2, r0
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b64      	cmp	r3, #100	; 0x64
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e1f5      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_OscConfig+0x344>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4013      	ands	r3, r2
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10f      	bne.n	80028d0 <HAL_RCC_OscConfig+0x348>
 80028b0:	4b03      	ldr	r3, [pc, #12]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80028b2:	6a1a      	ldr	r2, [r3, #32]
 80028b4:	4b02      	ldr	r3, [pc, #8]	; (80028c0 <HAL_RCC_OscConfig+0x338>)
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	621a      	str	r2, [r3, #32]
 80028bc:	e036      	b.n	800292c <HAL_RCC_OscConfig+0x3a4>
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	40021000 	.word	0x40021000
 80028c4:	fffeffff 	.word	0xfffeffff
 80028c8:	fffbffff 	.word	0xfffbffff
 80028cc:	40007000 	.word	0x40007000
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d10c      	bne.n	80028f2 <HAL_RCC_OscConfig+0x36a>
 80028d8:	4bca      	ldr	r3, [pc, #808]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	4bc9      	ldr	r3, [pc, #804]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80028de:	2101      	movs	r1, #1
 80028e0:	438a      	bics	r2, r1
 80028e2:	621a      	str	r2, [r3, #32]
 80028e4:	4bc7      	ldr	r3, [pc, #796]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80028e6:	6a1a      	ldr	r2, [r3, #32]
 80028e8:	4bc6      	ldr	r3, [pc, #792]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80028ea:	2104      	movs	r1, #4
 80028ec:	438a      	bics	r2, r1
 80028ee:	621a      	str	r2, [r3, #32]
 80028f0:	e01c      	b.n	800292c <HAL_RCC_OscConfig+0x3a4>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	2b05      	cmp	r3, #5
 80028f8:	d10c      	bne.n	8002914 <HAL_RCC_OscConfig+0x38c>
 80028fa:	4bc2      	ldr	r3, [pc, #776]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80028fc:	6a1a      	ldr	r2, [r3, #32]
 80028fe:	4bc1      	ldr	r3, [pc, #772]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002900:	2104      	movs	r1, #4
 8002902:	430a      	orrs	r2, r1
 8002904:	621a      	str	r2, [r3, #32]
 8002906:	4bbf      	ldr	r3, [pc, #764]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002908:	6a1a      	ldr	r2, [r3, #32]
 800290a:	4bbe      	ldr	r3, [pc, #760]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 800290c:	2101      	movs	r1, #1
 800290e:	430a      	orrs	r2, r1
 8002910:	621a      	str	r2, [r3, #32]
 8002912:	e00b      	b.n	800292c <HAL_RCC_OscConfig+0x3a4>
 8002914:	4bbb      	ldr	r3, [pc, #748]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4bba      	ldr	r3, [pc, #744]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 800291a:	2101      	movs	r1, #1
 800291c:	438a      	bics	r2, r1
 800291e:	621a      	str	r2, [r3, #32]
 8002920:	4bb8      	ldr	r3, [pc, #736]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002922:	6a1a      	ldr	r2, [r3, #32]
 8002924:	4bb7      	ldr	r3, [pc, #732]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002926:	2104      	movs	r1, #4
 8002928:	438a      	bics	r2, r1
 800292a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d014      	beq.n	800295e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002934:	f7fe fe7a 	bl	800162c <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	e009      	b.n	8002952 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7fe fe75 	bl	800162c <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	4aaf      	ldr	r2, [pc, #700]	; (8002c08 <HAL_RCC_OscConfig+0x680>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e19a      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	4bac      	ldr	r3, [pc, #688]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	2202      	movs	r2, #2
 8002958:	4013      	ands	r3, r2
 800295a:	d0f0      	beq.n	800293e <HAL_RCC_OscConfig+0x3b6>
 800295c:	e013      	b.n	8002986 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800295e:	f7fe fe65 	bl	800162c <HAL_GetTick>
 8002962:	0003      	movs	r3, r0
 8002964:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	e009      	b.n	800297c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002968:	f7fe fe60 	bl	800162c <HAL_GetTick>
 800296c:	0002      	movs	r2, r0
 800296e:	69bb      	ldr	r3, [r7, #24]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	4aa5      	ldr	r2, [pc, #660]	; (8002c08 <HAL_RCC_OscConfig+0x680>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e185      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297c:	4ba1      	ldr	r3, [pc, #644]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	2202      	movs	r2, #2
 8002982:	4013      	ands	r3, r2
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002986:	231f      	movs	r3, #31
 8002988:	18fb      	adds	r3, r7, r3
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d105      	bne.n	800299c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002990:	4b9c      	ldr	r3, [pc, #624]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002992:	69da      	ldr	r2, [r3, #28]
 8002994:	4b9b      	ldr	r3, [pc, #620]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002996:	499d      	ldr	r1, [pc, #628]	; (8002c0c <HAL_RCC_OscConfig+0x684>)
 8002998:	400a      	ands	r2, r1
 800299a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2210      	movs	r2, #16
 80029a2:	4013      	ands	r3, r2
 80029a4:	d063      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d12a      	bne.n	8002a04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029ae:	4b95      	ldr	r3, [pc, #596]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029b2:	4b94      	ldr	r3, [pc, #592]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029b4:	2104      	movs	r1, #4
 80029b6:	430a      	orrs	r2, r1
 80029b8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029ba:	4b92      	ldr	r3, [pc, #584]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029be:	4b91      	ldr	r3, [pc, #580]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7fe fe31 	bl	800162c <HAL_GetTick>
 80029ca:	0003      	movs	r3, r0
 80029cc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80029d0:	f7fe fe2c 	bl	800162c <HAL_GetTick>
 80029d4:	0002      	movs	r2, r0
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e152      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029e2:	4b88      	ldr	r3, [pc, #544]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e6:	2202      	movs	r2, #2
 80029e8:	4013      	ands	r3, r2
 80029ea:	d0f1      	beq.n	80029d0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80029ec:	4b85      	ldr	r3, [pc, #532]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f0:	22f8      	movs	r2, #248	; 0xf8
 80029f2:	4393      	bics	r3, r2
 80029f4:	0019      	movs	r1, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	00da      	lsls	r2, r3, #3
 80029fc:	4b81      	ldr	r3, [pc, #516]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 80029fe:	430a      	orrs	r2, r1
 8002a00:	635a      	str	r2, [r3, #52]	; 0x34
 8002a02:	e034      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	3305      	adds	r3, #5
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a0c:	4b7d      	ldr	r3, [pc, #500]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	4b7c      	ldr	r3, [pc, #496]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a12:	2104      	movs	r1, #4
 8002a14:	438a      	bics	r2, r1
 8002a16:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a18:	4b7a      	ldr	r3, [pc, #488]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a1c:	22f8      	movs	r2, #248	; 0xf8
 8002a1e:	4393      	bics	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	00da      	lsls	r2, r3, #3
 8002a28:	4b76      	ldr	r3, [pc, #472]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a2e:	e01e      	b.n	8002a6e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a30:	4b74      	ldr	r3, [pc, #464]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a34:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a36:	2104      	movs	r1, #4
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a3c:	4b71      	ldr	r3, [pc, #452]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	4b70      	ldr	r3, [pc, #448]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	438a      	bics	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a48:	f7fe fdf0 	bl	800162c <HAL_GetTick>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a52:	f7fe fdeb 	bl	800162c <HAL_GetTick>
 8002a56:	0002      	movs	r2, r0
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e111      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a64:	4b67      	ldr	r3, [pc, #412]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a68:	2202      	movs	r2, #2
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	d1f1      	bne.n	8002a52 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2220      	movs	r2, #32
 8002a74:	4013      	ands	r3, r2
 8002a76:	d05c      	beq.n	8002b32 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a78:	4b62      	ldr	r3, [pc, #392]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	220c      	movs	r2, #12
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b0c      	cmp	r3, #12
 8002a82:	d00e      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a84:	4b5f      	ldr	r3, [pc, #380]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	220c      	movs	r2, #12
 8002a8a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d114      	bne.n	8002aba <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002a90:	4b5c      	ldr	r3, [pc, #368]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002a92:	685a      	ldr	r2, [r3, #4]
 8002a94:	23c0      	movs	r3, #192	; 0xc0
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	401a      	ands	r2, r3
 8002a9a:	23c0      	movs	r3, #192	; 0xc0
 8002a9c:	025b      	lsls	r3, r3, #9
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10b      	bne.n	8002aba <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002aa2:	4b58      	ldr	r3, [pc, #352]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	025b      	lsls	r3, r3, #9
 8002aaa:	4013      	ands	r3, r2
 8002aac:	d040      	beq.n	8002b30 <HAL_RCC_OscConfig+0x5a8>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d03c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e0e6      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01b      	beq.n	8002afa <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002ac2:	4b50      	ldr	r3, [pc, #320]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002ac8:	2180      	movs	r1, #128	; 0x80
 8002aca:	0249      	lsls	r1, r1, #9
 8002acc:	430a      	orrs	r2, r1
 8002ace:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad0:	f7fe fdac 	bl	800162c <HAL_GetTick>
 8002ad4:	0003      	movs	r3, r0
 8002ad6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002ad8:	e008      	b.n	8002aec <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ada:	f7fe fda7 	bl	800162c <HAL_GetTick>
 8002ade:	0002      	movs	r2, r0
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d901      	bls.n	8002aec <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	e0cd      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002aec:	4b45      	ldr	r3, [pc, #276]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002aee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	025b      	lsls	r3, r3, #9
 8002af4:	4013      	ands	r3, r2
 8002af6:	d0f0      	beq.n	8002ada <HAL_RCC_OscConfig+0x552>
 8002af8:	e01b      	b.n	8002b32 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002afa:	4b42      	ldr	r3, [pc, #264]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002afc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002afe:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b00:	4943      	ldr	r1, [pc, #268]	; (8002c10 <HAL_RCC_OscConfig+0x688>)
 8002b02:	400a      	ands	r2, r1
 8002b04:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b06:	f7fe fd91 	bl	800162c <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b0e:	e008      	b.n	8002b22 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b10:	f7fe fd8c 	bl	800162c <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0b2      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002b22:	4b38      	ldr	r3, [pc, #224]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b26:	2380      	movs	r3, #128	; 0x80
 8002b28:	025b      	lsls	r3, r3, #9
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x588>
 8002b2e:	e000      	b.n	8002b32 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002b30:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d100      	bne.n	8002b3c <HAL_RCC_OscConfig+0x5b4>
 8002b3a:	e0a4      	b.n	8002c86 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	220c      	movs	r2, #12
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d100      	bne.n	8002b4a <HAL_RCC_OscConfig+0x5c2>
 8002b48:	e078      	b.n	8002c3c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d14c      	bne.n	8002bec <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b2c      	ldr	r3, [pc, #176]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b58:	492e      	ldr	r1, [pc, #184]	; (8002c14 <HAL_RCC_OscConfig+0x68c>)
 8002b5a:	400a      	ands	r2, r1
 8002b5c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b5e:	f7fe fd65 	bl	800162c <HAL_GetTick>
 8002b62:	0003      	movs	r3, r0
 8002b64:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b66:	e008      	b.n	8002b7a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b68:	f7fe fd60 	bl	800162c <HAL_GetTick>
 8002b6c:	0002      	movs	r2, r0
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d901      	bls.n	8002b7a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002b76:	2303      	movs	r3, #3
 8002b78:	e086      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7a:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	2380      	movs	r3, #128	; 0x80
 8002b80:	049b      	lsls	r3, r3, #18
 8002b82:	4013      	ands	r3, r2
 8002b84:	d1f0      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b86:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	220f      	movs	r2, #15
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	0019      	movs	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b94:	4b1b      	ldr	r3, [pc, #108]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b96:	430a      	orrs	r2, r1
 8002b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_RCC_OscConfig+0x690>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	0019      	movs	r1, r3
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	431a      	orrs	r2, r3
 8002bae:	4b15      	ldr	r3, [pc, #84]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	4b12      	ldr	r3, [pc, #72]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002bba:	2180      	movs	r1, #128	; 0x80
 8002bbc:	0449      	lsls	r1, r1, #17
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc2:	f7fe fd33 	bl	800162c <HAL_GetTick>
 8002bc6:	0003      	movs	r3, r0
 8002bc8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bcc:	f7fe fd2e 	bl	800162c <HAL_GetTick>
 8002bd0:	0002      	movs	r2, r0
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e054      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	049b      	lsls	r3, r3, #18
 8002be6:	4013      	ands	r3, r2
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0x644>
 8002bea:	e04c      	b.n	8002c86 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <HAL_RCC_OscConfig+0x67c>)
 8002bf2:	4908      	ldr	r1, [pc, #32]	; (8002c14 <HAL_RCC_OscConfig+0x68c>)
 8002bf4:	400a      	ands	r2, r1
 8002bf6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fd18 	bl	800162c <HAL_GetTick>
 8002bfc:	0003      	movs	r3, r0
 8002bfe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c00:	e015      	b.n	8002c2e <HAL_RCC_OscConfig+0x6a6>
 8002c02:	46c0      	nop			; (mov r8, r8)
 8002c04:	40021000 	.word	0x40021000
 8002c08:	00001388 	.word	0x00001388
 8002c0c:	efffffff 	.word	0xefffffff
 8002c10:	fffeffff 	.word	0xfffeffff
 8002c14:	feffffff 	.word	0xfeffffff
 8002c18:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fd06 	bl	800162c <HAL_GetTick>
 8002c20:	0002      	movs	r2, r0
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e02c      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_RCC_OscConfig+0x708>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	049b      	lsls	r3, r3, #18
 8002c36:	4013      	ands	r3, r2
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x694>
 8002c3a:	e024      	b.n	8002c86 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e01f      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002c48:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_RCC_OscConfig+0x708>)
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002c4e:	4b10      	ldr	r3, [pc, #64]	; (8002c90 <HAL_RCC_OscConfig+0x708>)
 8002c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c52:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	23c0      	movs	r3, #192	; 0xc0
 8002c58:	025b      	lsls	r3, r3, #9
 8002c5a:	401a      	ands	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d10e      	bne.n	8002c82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	220f      	movs	r2, #15
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d107      	bne.n	8002c82 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	23f0      	movs	r3, #240	; 0xf0
 8002c76:	039b      	lsls	r3, r3, #14
 8002c78:	401a      	ands	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d001      	beq.n	8002c86 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b008      	add	sp, #32
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000

08002c94 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e0bf      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca8:	4b61      	ldr	r3, [pc, #388]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2201      	movs	r2, #1
 8002cae:	4013      	ands	r3, r2
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d911      	bls.n	8002cda <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	4b5e      	ldr	r3, [pc, #376]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4393      	bics	r3, r2
 8002cbe:	0019      	movs	r1, r3
 8002cc0:	4b5b      	ldr	r3, [pc, #364]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	430a      	orrs	r2, r1
 8002cc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc8:	4b59      	ldr	r3, [pc, #356]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	4013      	ands	r3, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0a6      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	2202      	movs	r2, #2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	d015      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2204      	movs	r2, #4
 8002cea:	4013      	ands	r3, r2
 8002cec:	d006      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002cee:	4b51      	ldr	r3, [pc, #324]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4b50      	ldr	r3, [pc, #320]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002cf4:	21e0      	movs	r1, #224	; 0xe0
 8002cf6:	00c9      	lsls	r1, r1, #3
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cfc:	4b4d      	ldr	r3, [pc, #308]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	22f0      	movs	r2, #240	; 0xf0
 8002d02:	4393      	bics	r3, r2
 8002d04:	0019      	movs	r1, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689a      	ldr	r2, [r3, #8]
 8002d0a:	4b4a      	ldr	r3, [pc, #296]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d0c:	430a      	orrs	r2, r1
 8002d0e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2201      	movs	r2, #1
 8002d16:	4013      	ands	r3, r2
 8002d18:	d04c      	beq.n	8002db4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	4b44      	ldr	r3, [pc, #272]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	029b      	lsls	r3, r3, #10
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	d120      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e07a      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d3a:	4b3e      	ldr	r3, [pc, #248]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	2380      	movs	r3, #128	; 0x80
 8002d40:	049b      	lsls	r3, r3, #18
 8002d42:	4013      	ands	r3, r2
 8002d44:	d114      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e06e      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d107      	bne.n	8002d62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002d52:	4b38      	ldr	r3, [pc, #224]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d56:	2380      	movs	r3, #128	; 0x80
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	d108      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e062      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d62:	4b34      	ldr	r3, [pc, #208]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2202      	movs	r2, #2
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e05b      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d70:	4b30      	ldr	r3, [pc, #192]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2203      	movs	r2, #3
 8002d76:	4393      	bics	r3, r2
 8002d78:	0019      	movs	r1, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4b2d      	ldr	r3, [pc, #180]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002d80:	430a      	orrs	r2, r1
 8002d82:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d84:	f7fe fc52 	bl	800162c <HAL_GetTick>
 8002d88:	0003      	movs	r3, r0
 8002d8a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8c:	e009      	b.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d8e:	f7fe fc4d 	bl	800162c <HAL_GetTick>
 8002d92:	0002      	movs	r2, r0
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	4a27      	ldr	r2, [pc, #156]	; (8002e38 <HAL_RCC_ClockConfig+0x1a4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e042      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002da2:	4b24      	ldr	r3, [pc, #144]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	220c      	movs	r2, #12
 8002da8:	401a      	ands	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d1ec      	bne.n	8002d8e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db4:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2201      	movs	r2, #1
 8002dba:	4013      	ands	r3, r2
 8002dbc:	683a      	ldr	r2, [r7, #0]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d211      	bcs.n	8002de6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dc2:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	4393      	bics	r3, r2
 8002dca:	0019      	movs	r1, r3
 8002dcc:	4b18      	ldr	r3, [pc, #96]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	430a      	orrs	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dd4:	4b16      	ldr	r3, [pc, #88]	; (8002e30 <HAL_RCC_ClockConfig+0x19c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	4013      	ands	r3, r2
 8002ddc:	683a      	ldr	r2, [r7, #0]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d001      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e020      	b.n	8002e28 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2204      	movs	r2, #4
 8002dec:	4013      	ands	r3, r2
 8002dee:	d009      	beq.n	8002e04 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002df0:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4a11      	ldr	r2, [pc, #68]	; (8002e3c <HAL_RCC_ClockConfig+0x1a8>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	4b0d      	ldr	r3, [pc, #52]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002e04:	f000 f820 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 8002e08:	0001      	movs	r1, r0
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x1a0>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	220f      	movs	r2, #15
 8002e12:	4013      	ands	r3, r2
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_RCC_ClockConfig+0x1ac>)
 8002e16:	5cd3      	ldrb	r3, [r2, r3]
 8002e18:	000a      	movs	r2, r1
 8002e1a:	40da      	lsrs	r2, r3
 8002e1c:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fe fbbd 	bl	80015a0 <HAL_InitTick>
  
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b004      	add	sp, #16
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40022000 	.word	0x40022000
 8002e34:	40021000 	.word	0x40021000
 8002e38:	00001388 	.word	0x00001388
 8002e3c:	fffff8ff 	.word	0xfffff8ff
 8002e40:	08004584 	.word	0x08004584
 8002e44:	20000000 	.word	0x20000000

08002e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b08f      	sub	sp, #60	; 0x3c
 8002e4c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002e4e:	2314      	movs	r3, #20
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	4a38      	ldr	r2, [pc, #224]	; (8002f34 <HAL_RCC_GetSysClockFreq+0xec>)
 8002e54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e56:	c313      	stmia	r3!, {r0, r1, r4}
 8002e58:	6812      	ldr	r2, [r2, #0]
 8002e5a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002e5c:	1d3b      	adds	r3, r7, #4
 8002e5e:	4a36      	ldr	r2, [pc, #216]	; (8002f38 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002e60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002e62:	c313      	stmia	r3!, {r0, r1, r4}
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e70:	2300      	movs	r3, #0
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
 8002e74:	2300      	movs	r3, #0
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e84:	220c      	movs	r2, #12
 8002e86:	4013      	ands	r3, r2
 8002e88:	2b0c      	cmp	r3, #12
 8002e8a:	d047      	beq.n	8002f1c <HAL_RCC_GetSysClockFreq+0xd4>
 8002e8c:	d849      	bhi.n	8002f22 <HAL_RCC_GetSysClockFreq+0xda>
 8002e8e:	2b04      	cmp	r3, #4
 8002e90:	d002      	beq.n	8002e98 <HAL_RCC_GetSysClockFreq+0x50>
 8002e92:	2b08      	cmp	r3, #8
 8002e94:	d003      	beq.n	8002e9e <HAL_RCC_GetSysClockFreq+0x56>
 8002e96:	e044      	b.n	8002f22 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e98:	4b29      	ldr	r3, [pc, #164]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e9c:	e044      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	0c9b      	lsrs	r3, r3, #18
 8002ea2:	220f      	movs	r2, #15
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	2214      	movs	r2, #20
 8002ea8:	18ba      	adds	r2, r7, r2
 8002eaa:	5cd3      	ldrb	r3, [r2, r3]
 8002eac:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002eae:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	1d3a      	adds	r2, r7, #4
 8002eb8:	5cd3      	ldrb	r3, [r2, r3]
 8002eba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002ebc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ebe:	23c0      	movs	r3, #192	; 0xc0
 8002ec0:	025b      	lsls	r3, r3, #9
 8002ec2:	401a      	ands	r2, r3
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	025b      	lsls	r3, r3, #9
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d109      	bne.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ece:	481c      	ldr	r0, [pc, #112]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002ed0:	f7fd f92a 	bl	8000128 <__udivsi3>
 8002ed4:	0003      	movs	r3, r0
 8002ed6:	001a      	movs	r2, r3
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	4353      	muls	r3, r2
 8002edc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ede:	e01a      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8002ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee2:	23c0      	movs	r3, #192	; 0xc0
 8002ee4:	025b      	lsls	r3, r3, #9
 8002ee6:	401a      	ands	r2, r3
 8002ee8:	23c0      	movs	r3, #192	; 0xc0
 8002eea:	025b      	lsls	r3, r3, #9
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d109      	bne.n	8002f04 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ef2:	4814      	ldr	r0, [pc, #80]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002ef4:	f7fd f918 	bl	8000128 <__udivsi3>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	001a      	movs	r2, r3
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	4353      	muls	r3, r2
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f06:	480e      	ldr	r0, [pc, #56]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f08:	f7fd f90e 	bl	8000128 <__udivsi3>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	001a      	movs	r2, r3
 8002f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f12:	4353      	muls	r3, r2
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f18:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f1a:	e005      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002f1c:	4b09      	ldr	r3, [pc, #36]	; (8002f44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f20:	e002      	b.n	8002f28 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f22:	4b07      	ldr	r3, [pc, #28]	; (8002f40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002f24:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002f26:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002f2a:	0018      	movs	r0, r3
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	b00f      	add	sp, #60	; 0x3c
 8002f30:	bd90      	pop	{r4, r7, pc}
 8002f32:	46c0      	nop			; (mov r8, r8)
 8002f34:	080044a4 	.word	0x080044a4
 8002f38:	080044b4 	.word	0x080044b4
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	007a1200 	.word	0x007a1200
 8002f44:	02dc6c00 	.word	0x02dc6c00

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b02      	ldr	r3, [pc, #8]	; (8002f58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	0018      	movs	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	46c0      	nop			; (mov r8, r8)
 8002f58:	20000000 	.word	0x20000000

08002f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002f60:	f7ff fff2 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 8002f64:	0001      	movs	r1, r0
 8002f66:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	0a1b      	lsrs	r3, r3, #8
 8002f6c:	2207      	movs	r2, #7
 8002f6e:	4013      	ands	r3, r2
 8002f70:	4a04      	ldr	r2, [pc, #16]	; (8002f84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f72:	5cd3      	ldrb	r3, [r2, r3]
 8002f74:	40d9      	lsrs	r1, r3
 8002f76:	000b      	movs	r3, r1
}    
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40021000 	.word	0x40021000
 8002f84:	08004594 	.word	0x08004594

08002f88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	025b      	lsls	r3, r3, #9
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	d100      	bne.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002fa4:	e08e      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002fa6:	2017      	movs	r0, #23
 8002fa8:	183b      	adds	r3, r7, r0
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fae:	4b6e      	ldr	r3, [pc, #440]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	055b      	lsls	r3, r3, #21
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d110      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fba:	4b6b      	ldr	r3, [pc, #428]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fbc:	69da      	ldr	r2, [r3, #28]
 8002fbe:	4b6a      	ldr	r3, [pc, #424]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fc0:	2180      	movs	r1, #128	; 0x80
 8002fc2:	0549      	lsls	r1, r1, #21
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	61da      	str	r2, [r3, #28]
 8002fc8:	4b67      	ldr	r3, [pc, #412]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002fca:	69da      	ldr	r2, [r3, #28]
 8002fcc:	2380      	movs	r3, #128	; 0x80
 8002fce:	055b      	lsls	r3, r3, #21
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	183b      	adds	r3, r7, r0
 8002fd8:	2201      	movs	r2, #1
 8002fda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	2380      	movs	r3, #128	; 0x80
 8002fe2:	005b      	lsls	r3, r3, #1
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	d11a      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe8:	4b60      	ldr	r3, [pc, #384]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	4b5f      	ldr	r3, [pc, #380]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002fee:	2180      	movs	r1, #128	; 0x80
 8002ff0:	0049      	lsls	r1, r1, #1
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fb19 	bl	800162c <HAL_GetTick>
 8002ffa:	0003      	movs	r3, r0
 8002ffc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003000:	f7fe fb14 	bl	800162c <HAL_GetTick>
 8003004:	0002      	movs	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	; 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e0a6      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003012:	4b56      	ldr	r3, [pc, #344]	; (800316c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	2380      	movs	r3, #128	; 0x80
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	4013      	ands	r3, r2
 800301c:	d0f0      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800301e:	4b52      	ldr	r3, [pc, #328]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003020:	6a1a      	ldr	r2, [r3, #32]
 8003022:	23c0      	movs	r3, #192	; 0xc0
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4013      	ands	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d034      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	23c0      	movs	r3, #192	; 0xc0
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4013      	ands	r3, r2
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d02c      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003040:	4b49      	ldr	r3, [pc, #292]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003042:	6a1b      	ldr	r3, [r3, #32]
 8003044:	4a4a      	ldr	r2, [pc, #296]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8003046:	4013      	ands	r3, r2
 8003048:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800304c:	6a1a      	ldr	r2, [r3, #32]
 800304e:	4b46      	ldr	r3, [pc, #280]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	0249      	lsls	r1, r1, #9
 8003054:	430a      	orrs	r2, r1
 8003056:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003058:	4b43      	ldr	r3, [pc, #268]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800305a:	6a1a      	ldr	r2, [r3, #32]
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800305e:	4945      	ldr	r1, [pc, #276]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8003060:	400a      	ands	r2, r1
 8003062:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003064:	4b40      	ldr	r3, [pc, #256]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d013      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003072:	f7fe fadb 	bl	800162c <HAL_GetTick>
 8003076:	0003      	movs	r3, r0
 8003078:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307a:	e009      	b.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800307c:	f7fe fad6 	bl	800162c <HAL_GetTick>
 8003080:	0002      	movs	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	4a3c      	ldr	r2, [pc, #240]	; (8003178 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d901      	bls.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800308c:	2303      	movs	r3, #3
 800308e:	e067      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003090:	4b35      	ldr	r3, [pc, #212]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d0f0      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800309a:	4b33      	ldr	r3, [pc, #204]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80030a0:	4013      	ands	r3, r2
 80030a2:	0019      	movs	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685a      	ldr	r2, [r3, #4]
 80030a8:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030aa:	430a      	orrs	r2, r1
 80030ac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030ae:	2317      	movs	r3, #23
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d105      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	4b2a      	ldr	r3, [pc, #168]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030be:	492f      	ldr	r1, [pc, #188]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80030c0:	400a      	ands	r2, r1
 80030c2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2201      	movs	r2, #1
 80030ca:	4013      	ands	r3, r2
 80030cc:	d009      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d2:	2203      	movs	r2, #3
 80030d4:	4393      	bics	r3, r2
 80030d6:	0019      	movs	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030de:	430a      	orrs	r2, r1
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	4013      	ands	r3, r2
 80030ea:	d009      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ec:	4b1e      	ldr	r3, [pc, #120]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	4a23      	ldr	r2, [pc, #140]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	0019      	movs	r1, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80030fc:	430a      	orrs	r2, r1
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	02db      	lsls	r3, r3, #11
 8003108:	4013      	ands	r3, r2
 800310a:	d009      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800310c:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800310e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003110:	4a1c      	ldr	r2, [pc, #112]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8003112:	4013      	ands	r3, r2
 8003114:	0019      	movs	r1, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	691a      	ldr	r2, [r3, #16]
 800311a:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800311c:	430a      	orrs	r2, r1
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2220      	movs	r2, #32
 8003126:	4013      	ands	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800312a:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	2210      	movs	r2, #16
 8003130:	4393      	bics	r3, r2
 8003132:	0019      	movs	r1, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800313a:	430a      	orrs	r2, r1
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4013      	ands	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800314c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314e:	2240      	movs	r2, #64	; 0x40
 8003150:	4393      	bics	r3, r2
 8003152:	0019      	movs	r1, r3
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699a      	ldr	r2, [r3, #24]
 8003158:	4b03      	ldr	r3, [pc, #12]	; (8003168 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800315a:	430a      	orrs	r2, r1
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	0018      	movs	r0, r3
 8003162:	46bd      	mov	sp, r7
 8003164:	b006      	add	sp, #24
 8003166:	bd80      	pop	{r7, pc}
 8003168:	40021000 	.word	0x40021000
 800316c:	40007000 	.word	0x40007000
 8003170:	fffffcff 	.word	0xfffffcff
 8003174:	fffeffff 	.word	0xfffeffff
 8003178:	00001388 	.word	0x00001388
 800317c:	efffffff 	.word	0xefffffff
 8003180:	fffcffff 	.word	0xfffcffff
 8003184:	fff3ffff 	.word	0xfff3ffff

08003188 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e044      	b.n	8003224 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d107      	bne.n	80031b2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2274      	movs	r2, #116	; 0x74
 80031a6:	2100      	movs	r1, #0
 80031a8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f7fe f919 	bl	80013e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2224      	movs	r2, #36	; 0x24
 80031b6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2101      	movs	r1, #1
 80031c4:	438a      	bics	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	0018      	movs	r0, r3
 80031cc:	f000 f8da 	bl	8003384 <UART_SetConfig>
 80031d0:	0003      	movs	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e024      	b.n	8003224 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d003      	beq.n	80031ea <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	0018      	movs	r0, r3
 80031e6:	f000 fab5 	bl	8003754 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	490d      	ldr	r1, [pc, #52]	; (800322c <HAL_UART_Init+0xa4>)
 80031f6:	400a      	ands	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	212a      	movs	r1, #42	; 0x2a
 8003206:	438a      	bics	r2, r1
 8003208:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2101      	movs	r1, #1
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	0018      	movs	r0, r3
 800321e:	f000 fb4d 	bl	80038bc <UART_CheckIdleState>
 8003222:	0003      	movs	r3, r0
}
 8003224:	0018      	movs	r0, r3
 8003226:	46bd      	mov	sp, r7
 8003228:	b002      	add	sp, #8
 800322a:	bd80      	pop	{r7, pc}
 800322c:	ffffb7ff 	.word	0xffffb7ff

08003230 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08a      	sub	sp, #40	; 0x28
 8003234:	af02      	add	r7, sp, #8
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	603b      	str	r3, [r7, #0]
 800323c:	1dbb      	adds	r3, r7, #6
 800323e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003244:	2b20      	cmp	r3, #32
 8003246:	d000      	beq.n	800324a <HAL_UART_Transmit+0x1a>
 8003248:	e096      	b.n	8003378 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d003      	beq.n	8003258 <HAL_UART_Transmit+0x28>
 8003250:	1dbb      	adds	r3, r7, #6
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d101      	bne.n	800325c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e08e      	b.n	800337a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	2380      	movs	r3, #128	; 0x80
 8003262:	015b      	lsls	r3, r3, #5
 8003264:	429a      	cmp	r2, r3
 8003266:	d109      	bne.n	800327c <HAL_UART_Transmit+0x4c>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d105      	bne.n	800327c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	2201      	movs	r2, #1
 8003274:	4013      	ands	r3, r2
 8003276:	d001      	beq.n	800327c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e07e      	b.n	800337a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2274      	movs	r2, #116	; 0x74
 8003280:	5c9b      	ldrb	r3, [r3, r2]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d101      	bne.n	800328a <HAL_UART_Transmit+0x5a>
 8003286:	2302      	movs	r3, #2
 8003288:	e077      	b.n	800337a <HAL_UART_Transmit+0x14a>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2274      	movs	r2, #116	; 0x74
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	2100      	movs	r1, #0
 8003298:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2221      	movs	r2, #33	; 0x21
 800329e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032a0:	f7fe f9c4 	bl	800162c <HAL_GetTick>
 80032a4:	0003      	movs	r3, r0
 80032a6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1dba      	adds	r2, r7, #6
 80032ac:	2150      	movs	r1, #80	; 0x50
 80032ae:	8812      	ldrh	r2, [r2, #0]
 80032b0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1dba      	adds	r2, r7, #6
 80032b6:	2152      	movs	r1, #82	; 0x52
 80032b8:	8812      	ldrh	r2, [r2, #0]
 80032ba:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	015b      	lsls	r3, r3, #5
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d108      	bne.n	80032da <HAL_UART_Transmit+0xaa>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	691b      	ldr	r3, [r3, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d104      	bne.n	80032da <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80032d0:	2300      	movs	r3, #0
 80032d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	e003      	b.n	80032e2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2274      	movs	r2, #116	; 0x74
 80032e6:	2100      	movs	r1, #0
 80032e8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80032ea:	e02d      	b.n	8003348 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	68f8      	ldr	r0, [r7, #12]
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	9300      	str	r3, [sp, #0]
 80032f4:	0013      	movs	r3, r2
 80032f6:	2200      	movs	r2, #0
 80032f8:	2180      	movs	r1, #128	; 0x80
 80032fa:	f000 fb27 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 80032fe:	1e03      	subs	r3, r0, #0
 8003300:	d001      	beq.n	8003306 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e039      	b.n	800337a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10b      	bne.n	8003324 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	881a      	ldrh	r2, [r3, #0]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	05d2      	lsls	r2, r2, #23
 8003316:	0dd2      	lsrs	r2, r2, #23
 8003318:	b292      	uxth	r2, r2
 800331a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	3302      	adds	r3, #2
 8003320:	61bb      	str	r3, [r7, #24]
 8003322:	e008      	b.n	8003336 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	781a      	ldrb	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	b292      	uxth	r2, r2
 800332e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003330:	69fb      	ldr	r3, [r7, #28]
 8003332:	3301      	adds	r3, #1
 8003334:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2252      	movs	r2, #82	; 0x52
 800333a:	5a9b      	ldrh	r3, [r3, r2]
 800333c:	b29b      	uxth	r3, r3
 800333e:	3b01      	subs	r3, #1
 8003340:	b299      	uxth	r1, r3
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2252      	movs	r2, #82	; 0x52
 8003346:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2252      	movs	r2, #82	; 0x52
 800334c:	5a9b      	ldrh	r3, [r3, r2]
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1cb      	bne.n	80032ec <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003354:	697a      	ldr	r2, [r7, #20]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	0013      	movs	r3, r2
 800335e:	2200      	movs	r2, #0
 8003360:	2140      	movs	r1, #64	; 0x40
 8003362:	f000 faf3 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 8003366:	1e03      	subs	r3, r0, #0
 8003368:	d001      	beq.n	800336e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e005      	b.n	800337a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003374:	2300      	movs	r3, #0
 8003376:	e000      	b.n	800337a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003378:	2302      	movs	r3, #2
  }
}
 800337a:	0018      	movs	r0, r3
 800337c:	46bd      	mov	sp, r7
 800337e:	b008      	add	sp, #32
 8003380:	bd80      	pop	{r7, pc}
	...

08003384 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800338c:	231e      	movs	r3, #30
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2200      	movs	r2, #0
 8003392:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	431a      	orrs	r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4abe      	ldr	r2, [pc, #760]	; (80036ac <UART_SetConfig+0x328>)
 80033b4:	4013      	ands	r3, r2
 80033b6:	0019      	movs	r1, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	430a      	orrs	r2, r1
 80033c0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	4ab9      	ldr	r2, [pc, #740]	; (80036b0 <UART_SetConfig+0x32c>)
 80033ca:	4013      	ands	r3, r2
 80033cc:	0019      	movs	r1, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68da      	ldr	r2, [r3, #12]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a1b      	ldr	r3, [r3, #32]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	4ab0      	ldr	r2, [pc, #704]	; (80036b4 <UART_SetConfig+0x330>)
 80033f2:	4013      	ands	r3, r2
 80033f4:	0019      	movs	r1, r3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4aac      	ldr	r2, [pc, #688]	; (80036b8 <UART_SetConfig+0x334>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d127      	bne.n	800345a <UART_SetConfig+0xd6>
 800340a:	4bac      	ldr	r3, [pc, #688]	; (80036bc <UART_SetConfig+0x338>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	2203      	movs	r2, #3
 8003410:	4013      	ands	r3, r2
 8003412:	2b03      	cmp	r3, #3
 8003414:	d00d      	beq.n	8003432 <UART_SetConfig+0xae>
 8003416:	d81b      	bhi.n	8003450 <UART_SetConfig+0xcc>
 8003418:	2b02      	cmp	r3, #2
 800341a:	d014      	beq.n	8003446 <UART_SetConfig+0xc2>
 800341c:	d818      	bhi.n	8003450 <UART_SetConfig+0xcc>
 800341e:	2b00      	cmp	r3, #0
 8003420:	d002      	beq.n	8003428 <UART_SetConfig+0xa4>
 8003422:	2b01      	cmp	r3, #1
 8003424:	d00a      	beq.n	800343c <UART_SetConfig+0xb8>
 8003426:	e013      	b.n	8003450 <UART_SetConfig+0xcc>
 8003428:	231f      	movs	r3, #31
 800342a:	18fb      	adds	r3, r7, r3
 800342c:	2200      	movs	r2, #0
 800342e:	701a      	strb	r2, [r3, #0]
 8003430:	e0bd      	b.n	80035ae <UART_SetConfig+0x22a>
 8003432:	231f      	movs	r3, #31
 8003434:	18fb      	adds	r3, r7, r3
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
 800343a:	e0b8      	b.n	80035ae <UART_SetConfig+0x22a>
 800343c:	231f      	movs	r3, #31
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	2204      	movs	r2, #4
 8003442:	701a      	strb	r2, [r3, #0]
 8003444:	e0b3      	b.n	80035ae <UART_SetConfig+0x22a>
 8003446:	231f      	movs	r3, #31
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	2208      	movs	r2, #8
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e0ae      	b.n	80035ae <UART_SetConfig+0x22a>
 8003450:	231f      	movs	r3, #31
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2210      	movs	r2, #16
 8003456:	701a      	strb	r2, [r3, #0]
 8003458:	e0a9      	b.n	80035ae <UART_SetConfig+0x22a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a98      	ldr	r2, [pc, #608]	; (80036c0 <UART_SetConfig+0x33c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d134      	bne.n	80034ce <UART_SetConfig+0x14a>
 8003464:	4b95      	ldr	r3, [pc, #596]	; (80036bc <UART_SetConfig+0x338>)
 8003466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003468:	23c0      	movs	r3, #192	; 0xc0
 800346a:	029b      	lsls	r3, r3, #10
 800346c:	4013      	ands	r3, r2
 800346e:	22c0      	movs	r2, #192	; 0xc0
 8003470:	0292      	lsls	r2, r2, #10
 8003472:	4293      	cmp	r3, r2
 8003474:	d017      	beq.n	80034a6 <UART_SetConfig+0x122>
 8003476:	22c0      	movs	r2, #192	; 0xc0
 8003478:	0292      	lsls	r2, r2, #10
 800347a:	4293      	cmp	r3, r2
 800347c:	d822      	bhi.n	80034c4 <UART_SetConfig+0x140>
 800347e:	2280      	movs	r2, #128	; 0x80
 8003480:	0292      	lsls	r2, r2, #10
 8003482:	4293      	cmp	r3, r2
 8003484:	d019      	beq.n	80034ba <UART_SetConfig+0x136>
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	0292      	lsls	r2, r2, #10
 800348a:	4293      	cmp	r3, r2
 800348c:	d81a      	bhi.n	80034c4 <UART_SetConfig+0x140>
 800348e:	2b00      	cmp	r3, #0
 8003490:	d004      	beq.n	800349c <UART_SetConfig+0x118>
 8003492:	2280      	movs	r2, #128	; 0x80
 8003494:	0252      	lsls	r2, r2, #9
 8003496:	4293      	cmp	r3, r2
 8003498:	d00a      	beq.n	80034b0 <UART_SetConfig+0x12c>
 800349a:	e013      	b.n	80034c4 <UART_SetConfig+0x140>
 800349c:	231f      	movs	r3, #31
 800349e:	18fb      	adds	r3, r7, r3
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]
 80034a4:	e083      	b.n	80035ae <UART_SetConfig+0x22a>
 80034a6:	231f      	movs	r3, #31
 80034a8:	18fb      	adds	r3, r7, r3
 80034aa:	2202      	movs	r2, #2
 80034ac:	701a      	strb	r2, [r3, #0]
 80034ae:	e07e      	b.n	80035ae <UART_SetConfig+0x22a>
 80034b0:	231f      	movs	r3, #31
 80034b2:	18fb      	adds	r3, r7, r3
 80034b4:	2204      	movs	r2, #4
 80034b6:	701a      	strb	r2, [r3, #0]
 80034b8:	e079      	b.n	80035ae <UART_SetConfig+0x22a>
 80034ba:	231f      	movs	r3, #31
 80034bc:	18fb      	adds	r3, r7, r3
 80034be:	2208      	movs	r2, #8
 80034c0:	701a      	strb	r2, [r3, #0]
 80034c2:	e074      	b.n	80035ae <UART_SetConfig+0x22a>
 80034c4:	231f      	movs	r3, #31
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	2210      	movs	r2, #16
 80034ca:	701a      	strb	r2, [r3, #0]
 80034cc:	e06f      	b.n	80035ae <UART_SetConfig+0x22a>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7c      	ldr	r2, [pc, #496]	; (80036c4 <UART_SetConfig+0x340>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d134      	bne.n	8003542 <UART_SetConfig+0x1be>
 80034d8:	4b78      	ldr	r3, [pc, #480]	; (80036bc <UART_SetConfig+0x338>)
 80034da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034dc:	23c0      	movs	r3, #192	; 0xc0
 80034de:	031b      	lsls	r3, r3, #12
 80034e0:	4013      	ands	r3, r2
 80034e2:	22c0      	movs	r2, #192	; 0xc0
 80034e4:	0312      	lsls	r2, r2, #12
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d017      	beq.n	800351a <UART_SetConfig+0x196>
 80034ea:	22c0      	movs	r2, #192	; 0xc0
 80034ec:	0312      	lsls	r2, r2, #12
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d822      	bhi.n	8003538 <UART_SetConfig+0x1b4>
 80034f2:	2280      	movs	r2, #128	; 0x80
 80034f4:	0312      	lsls	r2, r2, #12
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d019      	beq.n	800352e <UART_SetConfig+0x1aa>
 80034fa:	2280      	movs	r2, #128	; 0x80
 80034fc:	0312      	lsls	r2, r2, #12
 80034fe:	4293      	cmp	r3, r2
 8003500:	d81a      	bhi.n	8003538 <UART_SetConfig+0x1b4>
 8003502:	2b00      	cmp	r3, #0
 8003504:	d004      	beq.n	8003510 <UART_SetConfig+0x18c>
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	02d2      	lsls	r2, r2, #11
 800350a:	4293      	cmp	r3, r2
 800350c:	d00a      	beq.n	8003524 <UART_SetConfig+0x1a0>
 800350e:	e013      	b.n	8003538 <UART_SetConfig+0x1b4>
 8003510:	231f      	movs	r3, #31
 8003512:	18fb      	adds	r3, r7, r3
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
 8003518:	e049      	b.n	80035ae <UART_SetConfig+0x22a>
 800351a:	231f      	movs	r3, #31
 800351c:	18fb      	adds	r3, r7, r3
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	e044      	b.n	80035ae <UART_SetConfig+0x22a>
 8003524:	231f      	movs	r3, #31
 8003526:	18fb      	adds	r3, r7, r3
 8003528:	2204      	movs	r2, #4
 800352a:	701a      	strb	r2, [r3, #0]
 800352c:	e03f      	b.n	80035ae <UART_SetConfig+0x22a>
 800352e:	231f      	movs	r3, #31
 8003530:	18fb      	adds	r3, r7, r3
 8003532:	2208      	movs	r2, #8
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	e03a      	b.n	80035ae <UART_SetConfig+0x22a>
 8003538:	231f      	movs	r3, #31
 800353a:	18fb      	adds	r3, r7, r3
 800353c:	2210      	movs	r2, #16
 800353e:	701a      	strb	r2, [r3, #0]
 8003540:	e035      	b.n	80035ae <UART_SetConfig+0x22a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a60      	ldr	r2, [pc, #384]	; (80036c8 <UART_SetConfig+0x344>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d104      	bne.n	8003556 <UART_SetConfig+0x1d2>
 800354c:	231f      	movs	r3, #31
 800354e:	18fb      	adds	r3, r7, r3
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
 8003554:	e02b      	b.n	80035ae <UART_SetConfig+0x22a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a5c      	ldr	r2, [pc, #368]	; (80036cc <UART_SetConfig+0x348>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d104      	bne.n	800356a <UART_SetConfig+0x1e6>
 8003560:	231f      	movs	r3, #31
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	2200      	movs	r2, #0
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e021      	b.n	80035ae <UART_SetConfig+0x22a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a58      	ldr	r2, [pc, #352]	; (80036d0 <UART_SetConfig+0x34c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d104      	bne.n	800357e <UART_SetConfig+0x1fa>
 8003574:	231f      	movs	r3, #31
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	2200      	movs	r2, #0
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	e017      	b.n	80035ae <UART_SetConfig+0x22a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a54      	ldr	r2, [pc, #336]	; (80036d4 <UART_SetConfig+0x350>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d104      	bne.n	8003592 <UART_SetConfig+0x20e>
 8003588:	231f      	movs	r3, #31
 800358a:	18fb      	adds	r3, r7, r3
 800358c:	2200      	movs	r2, #0
 800358e:	701a      	strb	r2, [r3, #0]
 8003590:	e00d      	b.n	80035ae <UART_SetConfig+0x22a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a50      	ldr	r2, [pc, #320]	; (80036d8 <UART_SetConfig+0x354>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d104      	bne.n	80035a6 <UART_SetConfig+0x222>
 800359c:	231f      	movs	r3, #31
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e003      	b.n	80035ae <UART_SetConfig+0x22a>
 80035a6:	231f      	movs	r3, #31
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2210      	movs	r2, #16
 80035ac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69da      	ldr	r2, [r3, #28]
 80035b2:	2380      	movs	r3, #128	; 0x80
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d15d      	bne.n	8003676 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80035ba:	231f      	movs	r3, #31
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d015      	beq.n	80035f0 <UART_SetConfig+0x26c>
 80035c4:	dc18      	bgt.n	80035f8 <UART_SetConfig+0x274>
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00d      	beq.n	80035e6 <UART_SetConfig+0x262>
 80035ca:	dc15      	bgt.n	80035f8 <UART_SetConfig+0x274>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d002      	beq.n	80035d6 <UART_SetConfig+0x252>
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d005      	beq.n	80035e0 <UART_SetConfig+0x25c>
 80035d4:	e010      	b.n	80035f8 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7ff fcc1 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 80035da:	0003      	movs	r3, r0
 80035dc:	61bb      	str	r3, [r7, #24]
        break;
 80035de:	e012      	b.n	8003606 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035e0:	4b3e      	ldr	r3, [pc, #248]	; (80036dc <UART_SetConfig+0x358>)
 80035e2:	61bb      	str	r3, [r7, #24]
        break;
 80035e4:	e00f      	b.n	8003606 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035e6:	f7ff fc2f 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80035ea:	0003      	movs	r3, r0
 80035ec:	61bb      	str	r3, [r7, #24]
        break;
 80035ee:	e00a      	b.n	8003606 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035f0:	2380      	movs	r3, #128	; 0x80
 80035f2:	021b      	lsls	r3, r3, #8
 80035f4:	61bb      	str	r3, [r7, #24]
        break;
 80035f6:	e006      	b.n	8003606 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80035fc:	231e      	movs	r3, #30
 80035fe:	18fb      	adds	r3, r7, r3
 8003600:	2201      	movs	r2, #1
 8003602:	701a      	strb	r2, [r3, #0]
        break;
 8003604:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d100      	bne.n	800360e <UART_SetConfig+0x28a>
 800360c:	e095      	b.n	800373a <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	005a      	lsls	r2, r3, #1
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	085b      	lsrs	r3, r3, #1
 8003618:	18d2      	adds	r2, r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	0019      	movs	r1, r3
 8003620:	0010      	movs	r0, r2
 8003622:	f7fc fd81 	bl	8000128 <__udivsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	b29b      	uxth	r3, r3
 800362a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b0f      	cmp	r3, #15
 8003630:	d91c      	bls.n	800366c <UART_SetConfig+0x2e8>
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	2380      	movs	r3, #128	; 0x80
 8003636:	025b      	lsls	r3, r3, #9
 8003638:	429a      	cmp	r2, r3
 800363a:	d217      	bcs.n	800366c <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	b29a      	uxth	r2, r3
 8003640:	200e      	movs	r0, #14
 8003642:	183b      	adds	r3, r7, r0
 8003644:	210f      	movs	r1, #15
 8003646:	438a      	bics	r2, r1
 8003648:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	b29b      	uxth	r3, r3
 8003650:	2207      	movs	r2, #7
 8003652:	4013      	ands	r3, r2
 8003654:	b299      	uxth	r1, r3
 8003656:	183b      	adds	r3, r7, r0
 8003658:	183a      	adds	r2, r7, r0
 800365a:	8812      	ldrh	r2, [r2, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	183a      	adds	r2, r7, r0
 8003666:	8812      	ldrh	r2, [r2, #0]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	e066      	b.n	800373a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800366c:	231e      	movs	r3, #30
 800366e:	18fb      	adds	r3, r7, r3
 8003670:	2201      	movs	r2, #1
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e061      	b.n	800373a <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003676:	231f      	movs	r3, #31
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b08      	cmp	r3, #8
 800367e:	d02f      	beq.n	80036e0 <UART_SetConfig+0x35c>
 8003680:	dc32      	bgt.n	80036e8 <UART_SetConfig+0x364>
 8003682:	2b04      	cmp	r3, #4
 8003684:	d00d      	beq.n	80036a2 <UART_SetConfig+0x31e>
 8003686:	dc2f      	bgt.n	80036e8 <UART_SetConfig+0x364>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d002      	beq.n	8003692 <UART_SetConfig+0x30e>
 800368c:	2b02      	cmp	r3, #2
 800368e:	d005      	beq.n	800369c <UART_SetConfig+0x318>
 8003690:	e02a      	b.n	80036e8 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003692:	f7ff fc63 	bl	8002f5c <HAL_RCC_GetPCLK1Freq>
 8003696:	0003      	movs	r3, r0
 8003698:	61bb      	str	r3, [r7, #24]
        break;
 800369a:	e02c      	b.n	80036f6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <UART_SetConfig+0x358>)
 800369e:	61bb      	str	r3, [r7, #24]
        break;
 80036a0:	e029      	b.n	80036f6 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036a2:	f7ff fbd1 	bl	8002e48 <HAL_RCC_GetSysClockFreq>
 80036a6:	0003      	movs	r3, r0
 80036a8:	61bb      	str	r3, [r7, #24]
        break;
 80036aa:	e024      	b.n	80036f6 <UART_SetConfig+0x372>
 80036ac:	efff69f3 	.word	0xefff69f3
 80036b0:	ffffcfff 	.word	0xffffcfff
 80036b4:	fffff4ff 	.word	0xfffff4ff
 80036b8:	40013800 	.word	0x40013800
 80036bc:	40021000 	.word	0x40021000
 80036c0:	40004400 	.word	0x40004400
 80036c4:	40004800 	.word	0x40004800
 80036c8:	40004c00 	.word	0x40004c00
 80036cc:	40005000 	.word	0x40005000
 80036d0:	40011400 	.word	0x40011400
 80036d4:	40011800 	.word	0x40011800
 80036d8:	40011c00 	.word	0x40011c00
 80036dc:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036e0:	2380      	movs	r3, #128	; 0x80
 80036e2:	021b      	lsls	r3, r3, #8
 80036e4:	61bb      	str	r3, [r7, #24]
        break;
 80036e6:	e006      	b.n	80036f6 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80036ec:	231e      	movs	r3, #30
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	2201      	movs	r2, #1
 80036f2:	701a      	strb	r2, [r3, #0]
        break;
 80036f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d01e      	beq.n	800373a <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	085a      	lsrs	r2, r3, #1
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	18d2      	adds	r2, r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	0019      	movs	r1, r3
 800370c:	0010      	movs	r0, r2
 800370e:	f7fc fd0b 	bl	8000128 <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	b29b      	uxth	r3, r3
 8003716:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d909      	bls.n	8003732 <UART_SetConfig+0x3ae>
 800371e:	693a      	ldr	r2, [r7, #16]
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	025b      	lsls	r3, r3, #9
 8003724:	429a      	cmp	r2, r3
 8003726:	d204      	bcs.n	8003732 <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	60da      	str	r2, [r3, #12]
 8003730:	e003      	b.n	800373a <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8003732:	231e      	movs	r3, #30
 8003734:	18fb      	adds	r3, r7, r3
 8003736:	2201      	movs	r2, #1
 8003738:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003746:	231e      	movs	r3, #30
 8003748:	18fb      	adds	r3, r7, r3
 800374a:	781b      	ldrb	r3, [r3, #0]
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b008      	add	sp, #32
 8003752:	bd80      	pop	{r7, pc}

08003754 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	2201      	movs	r2, #1
 8003762:	4013      	ands	r3, r2
 8003764:	d00b      	beq.n	800377e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a4a      	ldr	r2, [pc, #296]	; (8003898 <UART_AdvFeatureConfig+0x144>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	2202      	movs	r2, #2
 8003784:	4013      	ands	r3, r2
 8003786:	d00b      	beq.n	80037a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a43      	ldr	r2, [pc, #268]	; (800389c <UART_AdvFeatureConfig+0x148>)
 8003790:	4013      	ands	r3, r2
 8003792:	0019      	movs	r1, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	2204      	movs	r2, #4
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a3b      	ldr	r2, [pc, #236]	; (80038a0 <UART_AdvFeatureConfig+0x14c>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	2208      	movs	r2, #8
 80037c8:	4013      	ands	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a34      	ldr	r2, [pc, #208]	; (80038a4 <UART_AdvFeatureConfig+0x150>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	2210      	movs	r2, #16
 80037ea:	4013      	ands	r3, r2
 80037ec:	d00b      	beq.n	8003806 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	4a2c      	ldr	r2, [pc, #176]	; (80038a8 <UART_AdvFeatureConfig+0x154>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	2220      	movs	r2, #32
 800380c:	4013      	ands	r3, r2
 800380e:	d00b      	beq.n	8003828 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <UART_AdvFeatureConfig+0x158>)
 8003818:	4013      	ands	r3, r2
 800381a:	0019      	movs	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2240      	movs	r2, #64	; 0x40
 800382e:	4013      	ands	r3, r2
 8003830:	d01d      	beq.n	800386e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a1d      	ldr	r2, [pc, #116]	; (80038b0 <UART_AdvFeatureConfig+0x15c>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	035b      	lsls	r3, r3, #13
 8003852:	429a      	cmp	r2, r3
 8003854:	d10b      	bne.n	800386e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4a15      	ldr	r2, [pc, #84]	; (80038b4 <UART_AdvFeatureConfig+0x160>)
 800385e:	4013      	ands	r3, r2
 8003860:	0019      	movs	r1, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	2280      	movs	r2, #128	; 0x80
 8003874:	4013      	ands	r3, r2
 8003876:	d00b      	beq.n	8003890 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	4a0e      	ldr	r2, [pc, #56]	; (80038b8 <UART_AdvFeatureConfig+0x164>)
 8003880:	4013      	ands	r3, r2
 8003882:	0019      	movs	r1, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	430a      	orrs	r2, r1
 800388e:	605a      	str	r2, [r3, #4]
  }
}
 8003890:	46c0      	nop			; (mov r8, r8)
 8003892:	46bd      	mov	sp, r7
 8003894:	b002      	add	sp, #8
 8003896:	bd80      	pop	{r7, pc}
 8003898:	fffdffff 	.word	0xfffdffff
 800389c:	fffeffff 	.word	0xfffeffff
 80038a0:	fffbffff 	.word	0xfffbffff
 80038a4:	ffff7fff 	.word	0xffff7fff
 80038a8:	ffffefff 	.word	0xffffefff
 80038ac:	ffffdfff 	.word	0xffffdfff
 80038b0:	ffefffff 	.word	0xffefffff
 80038b4:	ff9fffff 	.word	0xff9fffff
 80038b8:	fff7ffff 	.word	0xfff7ffff

080038bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af02      	add	r7, sp, #8
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	2100      	movs	r1, #0
 80038ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038cc:	f7fd feae 	bl	800162c <HAL_GetTick>
 80038d0:	0003      	movs	r3, r0
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2208      	movs	r2, #8
 80038dc:	4013      	ands	r3, r2
 80038de:	2b08      	cmp	r3, #8
 80038e0:	d10c      	bne.n	80038fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2280      	movs	r2, #128	; 0x80
 80038e6:	0391      	lsls	r1, r2, #14
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	4a17      	ldr	r2, [pc, #92]	; (8003948 <UART_CheckIdleState+0x8c>)
 80038ec:	9200      	str	r2, [sp, #0]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f000 f82c 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 80038f4:	1e03      	subs	r3, r0, #0
 80038f6:	d001      	beq.n	80038fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e021      	b.n	8003940 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2204      	movs	r2, #4
 8003904:	4013      	ands	r3, r2
 8003906:	2b04      	cmp	r3, #4
 8003908:	d10c      	bne.n	8003924 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	03d1      	lsls	r1, r2, #15
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4a0d      	ldr	r2, [pc, #52]	; (8003948 <UART_CheckIdleState+0x8c>)
 8003914:	9200      	str	r2, [sp, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	f000 f818 	bl	800394c <UART_WaitOnFlagUntilTimeout>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d001      	beq.n	8003924 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e00d      	b.n	8003940 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2220      	movs	r2, #32
 8003928:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2274      	movs	r2, #116	; 0x74
 800393a:	2100      	movs	r1, #0
 800393c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	0018      	movs	r0, r3
 8003942:	46bd      	mov	sp, r7
 8003944:	b004      	add	sp, #16
 8003946:	bd80      	pop	{r7, pc}
 8003948:	01ffffff 	.word	0x01ffffff

0800394c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b094      	sub	sp, #80	; 0x50
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800395c:	e0a3      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003960:	3301      	adds	r3, #1
 8003962:	d100      	bne.n	8003966 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003964:	e09f      	b.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003966:	f7fd fe61 	bl	800162c <HAL_GetTick>
 800396a:	0002      	movs	r2, r0
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003972:	429a      	cmp	r2, r3
 8003974:	d302      	bcc.n	800397c <UART_WaitOnFlagUntilTimeout+0x30>
 8003976:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13d      	bne.n	80039f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800397c:	f3ef 8310 	mrs	r3, PRIMASK
 8003980:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	2301      	movs	r3, #1
 8003988:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398c:	f383 8810 	msr	PRIMASK, r3
}
 8003990:	46c0      	nop			; (mov r8, r8)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	494c      	ldr	r1, [pc, #304]	; (8003ad0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800399e:	400a      	ands	r2, r1
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a8:	f383 8810 	msr	PRIMASK, r3
}
 80039ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ae:	f3ef 8310 	mrs	r3, PRIMASK
 80039b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80039b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b6:	643b      	str	r3, [r7, #64]	; 0x40
 80039b8:	2301      	movs	r3, #1
 80039ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	f383 8810 	msr	PRIMASK, r3
}
 80039c2:	46c0      	nop			; (mov r8, r8)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	689a      	ldr	r2, [r3, #8]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	2101      	movs	r1, #1
 80039d0:	438a      	bics	r2, r1
 80039d2:	609a      	str	r2, [r3, #8]
 80039d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039da:	f383 8810 	msr	PRIMASK, r3
}
 80039de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2220      	movs	r2, #32
 80039ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2274      	movs	r2, #116	; 0x74
 80039f0:	2100      	movs	r1, #0
 80039f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e067      	b.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2204      	movs	r2, #4
 8003a00:	4013      	ands	r3, r2
 8003a02:	d050      	beq.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69da      	ldr	r2, [r3, #28]
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	401a      	ands	r2, r3
 8003a10:	2380      	movs	r3, #128	; 0x80
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d146      	bne.n	8003aa6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2280      	movs	r2, #128	; 0x80
 8003a1e:	0112      	lsls	r2, r2, #4
 8003a20:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a22:	f3ef 8310 	mrs	r3, PRIMASK
 8003a26:	613b      	str	r3, [r7, #16]
  return(result);
 8003a28:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a2a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	f383 8810 	msr	PRIMASK, r3
}
 8003a36:	46c0      	nop			; (mov r8, r8)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4923      	ldr	r1, [pc, #140]	; (8003ad0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003a44:	400a      	ands	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a54:	f3ef 8310 	mrs	r3, PRIMASK
 8003a58:	61fb      	str	r3, [r7, #28]
  return(result);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a5e:	2301      	movs	r3, #1
 8003a60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	f383 8810 	msr	PRIMASK, r3
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2101      	movs	r1, #1
 8003a76:	438a      	bics	r2, r1
 8003a78:	609a      	str	r2, [r3, #8]
 8003a7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2280      	movs	r2, #128	; 0x80
 8003a96:	2120      	movs	r1, #32
 8003a98:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2274      	movs	r2, #116	; 0x74
 8003a9e:	2100      	movs	r1, #0
 8003aa0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e010      	b.n	8003ac8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	68ba      	ldr	r2, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	425a      	negs	r2, r3
 8003ab6:	4153      	adcs	r3, r2
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	001a      	movs	r2, r3
 8003abc:	1dfb      	adds	r3, r7, #7
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d100      	bne.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003ac4:	e74b      	b.n	800395e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	0018      	movs	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	b014      	add	sp, #80	; 0x50
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	fffffe5f 	.word	0xfffffe5f

08003ad4 <__errno>:
 8003ad4:	4b01      	ldr	r3, [pc, #4]	; (8003adc <__errno+0x8>)
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	4770      	bx	lr
 8003ada:	46c0      	nop			; (mov r8, r8)
 8003adc:	2000000c 	.word	0x2000000c

08003ae0 <__libc_init_array>:
 8003ae0:	b570      	push	{r4, r5, r6, lr}
 8003ae2:	2600      	movs	r6, #0
 8003ae4:	4d0c      	ldr	r5, [pc, #48]	; (8003b18 <__libc_init_array+0x38>)
 8003ae6:	4c0d      	ldr	r4, [pc, #52]	; (8003b1c <__libc_init_array+0x3c>)
 8003ae8:	1b64      	subs	r4, r4, r5
 8003aea:	10a4      	asrs	r4, r4, #2
 8003aec:	42a6      	cmp	r6, r4
 8003aee:	d109      	bne.n	8003b04 <__libc_init_array+0x24>
 8003af0:	2600      	movs	r6, #0
 8003af2:	f000 fc8b 	bl	800440c <_init>
 8003af6:	4d0a      	ldr	r5, [pc, #40]	; (8003b20 <__libc_init_array+0x40>)
 8003af8:	4c0a      	ldr	r4, [pc, #40]	; (8003b24 <__libc_init_array+0x44>)
 8003afa:	1b64      	subs	r4, r4, r5
 8003afc:	10a4      	asrs	r4, r4, #2
 8003afe:	42a6      	cmp	r6, r4
 8003b00:	d105      	bne.n	8003b0e <__libc_init_array+0x2e>
 8003b02:	bd70      	pop	{r4, r5, r6, pc}
 8003b04:	00b3      	lsls	r3, r6, #2
 8003b06:	58eb      	ldr	r3, [r5, r3]
 8003b08:	4798      	blx	r3
 8003b0a:	3601      	adds	r6, #1
 8003b0c:	e7ee      	b.n	8003aec <__libc_init_array+0xc>
 8003b0e:	00b3      	lsls	r3, r6, #2
 8003b10:	58eb      	ldr	r3, [r5, r3]
 8003b12:	4798      	blx	r3
 8003b14:	3601      	adds	r6, #1
 8003b16:	e7f2      	b.n	8003afe <__libc_init_array+0x1e>
 8003b18:	080045d0 	.word	0x080045d0
 8003b1c:	080045d0 	.word	0x080045d0
 8003b20:	080045d0 	.word	0x080045d0
 8003b24:	080045d4 	.word	0x080045d4

08003b28 <memset>:
 8003b28:	0003      	movs	r3, r0
 8003b2a:	1882      	adds	r2, r0, r2
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d100      	bne.n	8003b32 <memset+0xa>
 8003b30:	4770      	bx	lr
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	3301      	adds	r3, #1
 8003b36:	e7f9      	b.n	8003b2c <memset+0x4>

08003b38 <siprintf>:
 8003b38:	b40e      	push	{r1, r2, r3}
 8003b3a:	b500      	push	{lr}
 8003b3c:	490b      	ldr	r1, [pc, #44]	; (8003b6c <siprintf+0x34>)
 8003b3e:	b09c      	sub	sp, #112	; 0x70
 8003b40:	ab1d      	add	r3, sp, #116	; 0x74
 8003b42:	9002      	str	r0, [sp, #8]
 8003b44:	9006      	str	r0, [sp, #24]
 8003b46:	9107      	str	r1, [sp, #28]
 8003b48:	9104      	str	r1, [sp, #16]
 8003b4a:	4809      	ldr	r0, [pc, #36]	; (8003b70 <siprintf+0x38>)
 8003b4c:	4909      	ldr	r1, [pc, #36]	; (8003b74 <siprintf+0x3c>)
 8003b4e:	cb04      	ldmia	r3!, {r2}
 8003b50:	9105      	str	r1, [sp, #20]
 8003b52:	6800      	ldr	r0, [r0, #0]
 8003b54:	a902      	add	r1, sp, #8
 8003b56:	9301      	str	r3, [sp, #4]
 8003b58:	f000 f870 	bl	8003c3c <_svfiprintf_r>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9a02      	ldr	r2, [sp, #8]
 8003b60:	7013      	strb	r3, [r2, #0]
 8003b62:	b01c      	add	sp, #112	; 0x70
 8003b64:	bc08      	pop	{r3}
 8003b66:	b003      	add	sp, #12
 8003b68:	4718      	bx	r3
 8003b6a:	46c0      	nop			; (mov r8, r8)
 8003b6c:	7fffffff 	.word	0x7fffffff
 8003b70:	2000000c 	.word	0x2000000c
 8003b74:	ffff0208 	.word	0xffff0208

08003b78 <__ssputs_r>:
 8003b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b7a:	688e      	ldr	r6, [r1, #8]
 8003b7c:	b085      	sub	sp, #20
 8003b7e:	0007      	movs	r7, r0
 8003b80:	000c      	movs	r4, r1
 8003b82:	9203      	str	r2, [sp, #12]
 8003b84:	9301      	str	r3, [sp, #4]
 8003b86:	429e      	cmp	r6, r3
 8003b88:	d83c      	bhi.n	8003c04 <__ssputs_r+0x8c>
 8003b8a:	2390      	movs	r3, #144	; 0x90
 8003b8c:	898a      	ldrh	r2, [r1, #12]
 8003b8e:	00db      	lsls	r3, r3, #3
 8003b90:	421a      	tst	r2, r3
 8003b92:	d034      	beq.n	8003bfe <__ssputs_r+0x86>
 8003b94:	6909      	ldr	r1, [r1, #16]
 8003b96:	6823      	ldr	r3, [r4, #0]
 8003b98:	6960      	ldr	r0, [r4, #20]
 8003b9a:	1a5b      	subs	r3, r3, r1
 8003b9c:	9302      	str	r3, [sp, #8]
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	4343      	muls	r3, r0
 8003ba2:	0fdd      	lsrs	r5, r3, #31
 8003ba4:	18ed      	adds	r5, r5, r3
 8003ba6:	9b01      	ldr	r3, [sp, #4]
 8003ba8:	9802      	ldr	r0, [sp, #8]
 8003baa:	3301      	adds	r3, #1
 8003bac:	181b      	adds	r3, r3, r0
 8003bae:	106d      	asrs	r5, r5, #1
 8003bb0:	42ab      	cmp	r3, r5
 8003bb2:	d900      	bls.n	8003bb6 <__ssputs_r+0x3e>
 8003bb4:	001d      	movs	r5, r3
 8003bb6:	0553      	lsls	r3, r2, #21
 8003bb8:	d532      	bpl.n	8003c20 <__ssputs_r+0xa8>
 8003bba:	0029      	movs	r1, r5
 8003bbc:	0038      	movs	r0, r7
 8003bbe:	f000 fb53 	bl	8004268 <_malloc_r>
 8003bc2:	1e06      	subs	r6, r0, #0
 8003bc4:	d109      	bne.n	8003bda <__ssputs_r+0x62>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	2340      	movs	r3, #64	; 0x40
 8003bcc:	2001      	movs	r0, #1
 8003bce:	89a2      	ldrh	r2, [r4, #12]
 8003bd0:	4240      	negs	r0, r0
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	81a3      	strh	r3, [r4, #12]
 8003bd6:	b005      	add	sp, #20
 8003bd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bda:	9a02      	ldr	r2, [sp, #8]
 8003bdc:	6921      	ldr	r1, [r4, #16]
 8003bde:	f000 faba 	bl	8004156 <memcpy>
 8003be2:	89a3      	ldrh	r3, [r4, #12]
 8003be4:	4a14      	ldr	r2, [pc, #80]	; (8003c38 <__ssputs_r+0xc0>)
 8003be6:	401a      	ands	r2, r3
 8003be8:	2380      	movs	r3, #128	; 0x80
 8003bea:	4313      	orrs	r3, r2
 8003bec:	81a3      	strh	r3, [r4, #12]
 8003bee:	9b02      	ldr	r3, [sp, #8]
 8003bf0:	6126      	str	r6, [r4, #16]
 8003bf2:	18f6      	adds	r6, r6, r3
 8003bf4:	6026      	str	r6, [r4, #0]
 8003bf6:	6165      	str	r5, [r4, #20]
 8003bf8:	9e01      	ldr	r6, [sp, #4]
 8003bfa:	1aed      	subs	r5, r5, r3
 8003bfc:	60a5      	str	r5, [r4, #8]
 8003bfe:	9b01      	ldr	r3, [sp, #4]
 8003c00:	429e      	cmp	r6, r3
 8003c02:	d900      	bls.n	8003c06 <__ssputs_r+0x8e>
 8003c04:	9e01      	ldr	r6, [sp, #4]
 8003c06:	0032      	movs	r2, r6
 8003c08:	9903      	ldr	r1, [sp, #12]
 8003c0a:	6820      	ldr	r0, [r4, #0]
 8003c0c:	f000 faac 	bl	8004168 <memmove>
 8003c10:	68a3      	ldr	r3, [r4, #8]
 8003c12:	2000      	movs	r0, #0
 8003c14:	1b9b      	subs	r3, r3, r6
 8003c16:	60a3      	str	r3, [r4, #8]
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	199e      	adds	r6, r3, r6
 8003c1c:	6026      	str	r6, [r4, #0]
 8003c1e:	e7da      	b.n	8003bd6 <__ssputs_r+0x5e>
 8003c20:	002a      	movs	r2, r5
 8003c22:	0038      	movs	r0, r7
 8003c24:	f000 fb96 	bl	8004354 <_realloc_r>
 8003c28:	1e06      	subs	r6, r0, #0
 8003c2a:	d1e0      	bne.n	8003bee <__ssputs_r+0x76>
 8003c2c:	0038      	movs	r0, r7
 8003c2e:	6921      	ldr	r1, [r4, #16]
 8003c30:	f000 faae 	bl	8004190 <_free_r>
 8003c34:	e7c7      	b.n	8003bc6 <__ssputs_r+0x4e>
 8003c36:	46c0      	nop			; (mov r8, r8)
 8003c38:	fffffb7f 	.word	0xfffffb7f

08003c3c <_svfiprintf_r>:
 8003c3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c3e:	b0a1      	sub	sp, #132	; 0x84
 8003c40:	9003      	str	r0, [sp, #12]
 8003c42:	001d      	movs	r5, r3
 8003c44:	898b      	ldrh	r3, [r1, #12]
 8003c46:	000f      	movs	r7, r1
 8003c48:	0016      	movs	r6, r2
 8003c4a:	061b      	lsls	r3, r3, #24
 8003c4c:	d511      	bpl.n	8003c72 <_svfiprintf_r+0x36>
 8003c4e:	690b      	ldr	r3, [r1, #16]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10e      	bne.n	8003c72 <_svfiprintf_r+0x36>
 8003c54:	2140      	movs	r1, #64	; 0x40
 8003c56:	f000 fb07 	bl	8004268 <_malloc_r>
 8003c5a:	6038      	str	r0, [r7, #0]
 8003c5c:	6138      	str	r0, [r7, #16]
 8003c5e:	2800      	cmp	r0, #0
 8003c60:	d105      	bne.n	8003c6e <_svfiprintf_r+0x32>
 8003c62:	230c      	movs	r3, #12
 8003c64:	9a03      	ldr	r2, [sp, #12]
 8003c66:	3801      	subs	r0, #1
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	b021      	add	sp, #132	; 0x84
 8003c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	ac08      	add	r4, sp, #32
 8003c76:	6163      	str	r3, [r4, #20]
 8003c78:	3320      	adds	r3, #32
 8003c7a:	7663      	strb	r3, [r4, #25]
 8003c7c:	3310      	adds	r3, #16
 8003c7e:	76a3      	strb	r3, [r4, #26]
 8003c80:	9507      	str	r5, [sp, #28]
 8003c82:	0035      	movs	r5, r6
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d001      	beq.n	8003c8e <_svfiprintf_r+0x52>
 8003c8a:	2b25      	cmp	r3, #37	; 0x25
 8003c8c:	d147      	bne.n	8003d1e <_svfiprintf_r+0xe2>
 8003c8e:	1bab      	subs	r3, r5, r6
 8003c90:	9305      	str	r3, [sp, #20]
 8003c92:	42b5      	cmp	r5, r6
 8003c94:	d00c      	beq.n	8003cb0 <_svfiprintf_r+0x74>
 8003c96:	0032      	movs	r2, r6
 8003c98:	0039      	movs	r1, r7
 8003c9a:	9803      	ldr	r0, [sp, #12]
 8003c9c:	f7ff ff6c 	bl	8003b78 <__ssputs_r>
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	d100      	bne.n	8003ca6 <_svfiprintf_r+0x6a>
 8003ca4:	e0ae      	b.n	8003e04 <_svfiprintf_r+0x1c8>
 8003ca6:	6962      	ldr	r2, [r4, #20]
 8003ca8:	9b05      	ldr	r3, [sp, #20]
 8003caa:	4694      	mov	ip, r2
 8003cac:	4463      	add	r3, ip
 8003cae:	6163      	str	r3, [r4, #20]
 8003cb0:	782b      	ldrb	r3, [r5, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d100      	bne.n	8003cb8 <_svfiprintf_r+0x7c>
 8003cb6:	e0a5      	b.n	8003e04 <_svfiprintf_r+0x1c8>
 8003cb8:	2201      	movs	r2, #1
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4252      	negs	r2, r2
 8003cbe:	6062      	str	r2, [r4, #4]
 8003cc0:	a904      	add	r1, sp, #16
 8003cc2:	3254      	adds	r2, #84	; 0x54
 8003cc4:	1852      	adds	r2, r2, r1
 8003cc6:	1c6e      	adds	r6, r5, #1
 8003cc8:	6023      	str	r3, [r4, #0]
 8003cca:	60e3      	str	r3, [r4, #12]
 8003ccc:	60a3      	str	r3, [r4, #8]
 8003cce:	7013      	strb	r3, [r2, #0]
 8003cd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8003cd2:	2205      	movs	r2, #5
 8003cd4:	7831      	ldrb	r1, [r6, #0]
 8003cd6:	4854      	ldr	r0, [pc, #336]	; (8003e28 <_svfiprintf_r+0x1ec>)
 8003cd8:	f000 fa32 	bl	8004140 <memchr>
 8003cdc:	1c75      	adds	r5, r6, #1
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	d11f      	bne.n	8003d22 <_svfiprintf_r+0xe6>
 8003ce2:	6822      	ldr	r2, [r4, #0]
 8003ce4:	06d3      	lsls	r3, r2, #27
 8003ce6:	d504      	bpl.n	8003cf2 <_svfiprintf_r+0xb6>
 8003ce8:	2353      	movs	r3, #83	; 0x53
 8003cea:	a904      	add	r1, sp, #16
 8003cec:	185b      	adds	r3, r3, r1
 8003cee:	2120      	movs	r1, #32
 8003cf0:	7019      	strb	r1, [r3, #0]
 8003cf2:	0713      	lsls	r3, r2, #28
 8003cf4:	d504      	bpl.n	8003d00 <_svfiprintf_r+0xc4>
 8003cf6:	2353      	movs	r3, #83	; 0x53
 8003cf8:	a904      	add	r1, sp, #16
 8003cfa:	185b      	adds	r3, r3, r1
 8003cfc:	212b      	movs	r1, #43	; 0x2b
 8003cfe:	7019      	strb	r1, [r3, #0]
 8003d00:	7833      	ldrb	r3, [r6, #0]
 8003d02:	2b2a      	cmp	r3, #42	; 0x2a
 8003d04:	d016      	beq.n	8003d34 <_svfiprintf_r+0xf8>
 8003d06:	0035      	movs	r5, r6
 8003d08:	2100      	movs	r1, #0
 8003d0a:	200a      	movs	r0, #10
 8003d0c:	68e3      	ldr	r3, [r4, #12]
 8003d0e:	782a      	ldrb	r2, [r5, #0]
 8003d10:	1c6e      	adds	r6, r5, #1
 8003d12:	3a30      	subs	r2, #48	; 0x30
 8003d14:	2a09      	cmp	r2, #9
 8003d16:	d94e      	bls.n	8003db6 <_svfiprintf_r+0x17a>
 8003d18:	2900      	cmp	r1, #0
 8003d1a:	d111      	bne.n	8003d40 <_svfiprintf_r+0x104>
 8003d1c:	e017      	b.n	8003d4e <_svfiprintf_r+0x112>
 8003d1e:	3501      	adds	r5, #1
 8003d20:	e7b0      	b.n	8003c84 <_svfiprintf_r+0x48>
 8003d22:	4b41      	ldr	r3, [pc, #260]	; (8003e28 <_svfiprintf_r+0x1ec>)
 8003d24:	6822      	ldr	r2, [r4, #0]
 8003d26:	1ac0      	subs	r0, r0, r3
 8003d28:	2301      	movs	r3, #1
 8003d2a:	4083      	lsls	r3, r0
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	002e      	movs	r6, r5
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	e7ce      	b.n	8003cd2 <_svfiprintf_r+0x96>
 8003d34:	9b07      	ldr	r3, [sp, #28]
 8003d36:	1d19      	adds	r1, r3, #4
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	9107      	str	r1, [sp, #28]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db01      	blt.n	8003d44 <_svfiprintf_r+0x108>
 8003d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8003d42:	e004      	b.n	8003d4e <_svfiprintf_r+0x112>
 8003d44:	425b      	negs	r3, r3
 8003d46:	60e3      	str	r3, [r4, #12]
 8003d48:	2302      	movs	r3, #2
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	6023      	str	r3, [r4, #0]
 8003d4e:	782b      	ldrb	r3, [r5, #0]
 8003d50:	2b2e      	cmp	r3, #46	; 0x2e
 8003d52:	d10a      	bne.n	8003d6a <_svfiprintf_r+0x12e>
 8003d54:	786b      	ldrb	r3, [r5, #1]
 8003d56:	2b2a      	cmp	r3, #42	; 0x2a
 8003d58:	d135      	bne.n	8003dc6 <_svfiprintf_r+0x18a>
 8003d5a:	9b07      	ldr	r3, [sp, #28]
 8003d5c:	3502      	adds	r5, #2
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	9207      	str	r2, [sp, #28]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	db2b      	blt.n	8003dc0 <_svfiprintf_r+0x184>
 8003d68:	9309      	str	r3, [sp, #36]	; 0x24
 8003d6a:	4e30      	ldr	r6, [pc, #192]	; (8003e2c <_svfiprintf_r+0x1f0>)
 8003d6c:	2203      	movs	r2, #3
 8003d6e:	0030      	movs	r0, r6
 8003d70:	7829      	ldrb	r1, [r5, #0]
 8003d72:	f000 f9e5 	bl	8004140 <memchr>
 8003d76:	2800      	cmp	r0, #0
 8003d78:	d006      	beq.n	8003d88 <_svfiprintf_r+0x14c>
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	1b80      	subs	r0, r0, r6
 8003d7e:	4083      	lsls	r3, r0
 8003d80:	6822      	ldr	r2, [r4, #0]
 8003d82:	3501      	adds	r5, #1
 8003d84:	4313      	orrs	r3, r2
 8003d86:	6023      	str	r3, [r4, #0]
 8003d88:	7829      	ldrb	r1, [r5, #0]
 8003d8a:	2206      	movs	r2, #6
 8003d8c:	4828      	ldr	r0, [pc, #160]	; (8003e30 <_svfiprintf_r+0x1f4>)
 8003d8e:	1c6e      	adds	r6, r5, #1
 8003d90:	7621      	strb	r1, [r4, #24]
 8003d92:	f000 f9d5 	bl	8004140 <memchr>
 8003d96:	2800      	cmp	r0, #0
 8003d98:	d03c      	beq.n	8003e14 <_svfiprintf_r+0x1d8>
 8003d9a:	4b26      	ldr	r3, [pc, #152]	; (8003e34 <_svfiprintf_r+0x1f8>)
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d125      	bne.n	8003dec <_svfiprintf_r+0x1b0>
 8003da0:	2207      	movs	r2, #7
 8003da2:	9b07      	ldr	r3, [sp, #28]
 8003da4:	3307      	adds	r3, #7
 8003da6:	4393      	bics	r3, r2
 8003da8:	3308      	adds	r3, #8
 8003daa:	9307      	str	r3, [sp, #28]
 8003dac:	6963      	ldr	r3, [r4, #20]
 8003dae:	9a04      	ldr	r2, [sp, #16]
 8003db0:	189b      	adds	r3, r3, r2
 8003db2:	6163      	str	r3, [r4, #20]
 8003db4:	e765      	b.n	8003c82 <_svfiprintf_r+0x46>
 8003db6:	4343      	muls	r3, r0
 8003db8:	0035      	movs	r5, r6
 8003dba:	2101      	movs	r1, #1
 8003dbc:	189b      	adds	r3, r3, r2
 8003dbe:	e7a6      	b.n	8003d0e <_svfiprintf_r+0xd2>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	425b      	negs	r3, r3
 8003dc4:	e7d0      	b.n	8003d68 <_svfiprintf_r+0x12c>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	200a      	movs	r0, #10
 8003dca:	001a      	movs	r2, r3
 8003dcc:	3501      	adds	r5, #1
 8003dce:	6063      	str	r3, [r4, #4]
 8003dd0:	7829      	ldrb	r1, [r5, #0]
 8003dd2:	1c6e      	adds	r6, r5, #1
 8003dd4:	3930      	subs	r1, #48	; 0x30
 8003dd6:	2909      	cmp	r1, #9
 8003dd8:	d903      	bls.n	8003de2 <_svfiprintf_r+0x1a6>
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0c5      	beq.n	8003d6a <_svfiprintf_r+0x12e>
 8003dde:	9209      	str	r2, [sp, #36]	; 0x24
 8003de0:	e7c3      	b.n	8003d6a <_svfiprintf_r+0x12e>
 8003de2:	4342      	muls	r2, r0
 8003de4:	0035      	movs	r5, r6
 8003de6:	2301      	movs	r3, #1
 8003de8:	1852      	adds	r2, r2, r1
 8003dea:	e7f1      	b.n	8003dd0 <_svfiprintf_r+0x194>
 8003dec:	ab07      	add	r3, sp, #28
 8003dee:	9300      	str	r3, [sp, #0]
 8003df0:	003a      	movs	r2, r7
 8003df2:	0021      	movs	r1, r4
 8003df4:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <_svfiprintf_r+0x1fc>)
 8003df6:	9803      	ldr	r0, [sp, #12]
 8003df8:	e000      	b.n	8003dfc <_svfiprintf_r+0x1c0>
 8003dfa:	bf00      	nop
 8003dfc:	9004      	str	r0, [sp, #16]
 8003dfe:	9b04      	ldr	r3, [sp, #16]
 8003e00:	3301      	adds	r3, #1
 8003e02:	d1d3      	bne.n	8003dac <_svfiprintf_r+0x170>
 8003e04:	89bb      	ldrh	r3, [r7, #12]
 8003e06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003e08:	065b      	lsls	r3, r3, #25
 8003e0a:	d400      	bmi.n	8003e0e <_svfiprintf_r+0x1d2>
 8003e0c:	e72d      	b.n	8003c6a <_svfiprintf_r+0x2e>
 8003e0e:	2001      	movs	r0, #1
 8003e10:	4240      	negs	r0, r0
 8003e12:	e72a      	b.n	8003c6a <_svfiprintf_r+0x2e>
 8003e14:	ab07      	add	r3, sp, #28
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	003a      	movs	r2, r7
 8003e1a:	0021      	movs	r1, r4
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <_svfiprintf_r+0x1fc>)
 8003e1e:	9803      	ldr	r0, [sp, #12]
 8003e20:	f000 f87c 	bl	8003f1c <_printf_i>
 8003e24:	e7ea      	b.n	8003dfc <_svfiprintf_r+0x1c0>
 8003e26:	46c0      	nop			; (mov r8, r8)
 8003e28:	0800459c 	.word	0x0800459c
 8003e2c:	080045a2 	.word	0x080045a2
 8003e30:	080045a6 	.word	0x080045a6
 8003e34:	00000000 	.word	0x00000000
 8003e38:	08003b79 	.word	0x08003b79

08003e3c <_printf_common>:
 8003e3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e3e:	0015      	movs	r5, r2
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	688a      	ldr	r2, [r1, #8]
 8003e44:	690b      	ldr	r3, [r1, #16]
 8003e46:	000c      	movs	r4, r1
 8003e48:	9000      	str	r0, [sp, #0]
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	da00      	bge.n	8003e50 <_printf_common+0x14>
 8003e4e:	0013      	movs	r3, r2
 8003e50:	0022      	movs	r2, r4
 8003e52:	602b      	str	r3, [r5, #0]
 8003e54:	3243      	adds	r2, #67	; 0x43
 8003e56:	7812      	ldrb	r2, [r2, #0]
 8003e58:	2a00      	cmp	r2, #0
 8003e5a:	d001      	beq.n	8003e60 <_printf_common+0x24>
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	602b      	str	r3, [r5, #0]
 8003e60:	6823      	ldr	r3, [r4, #0]
 8003e62:	069b      	lsls	r3, r3, #26
 8003e64:	d502      	bpl.n	8003e6c <_printf_common+0x30>
 8003e66:	682b      	ldr	r3, [r5, #0]
 8003e68:	3302      	adds	r3, #2
 8003e6a:	602b      	str	r3, [r5, #0]
 8003e6c:	6822      	ldr	r2, [r4, #0]
 8003e6e:	2306      	movs	r3, #6
 8003e70:	0017      	movs	r7, r2
 8003e72:	401f      	ands	r7, r3
 8003e74:	421a      	tst	r2, r3
 8003e76:	d027      	beq.n	8003ec8 <_printf_common+0x8c>
 8003e78:	0023      	movs	r3, r4
 8003e7a:	3343      	adds	r3, #67	; 0x43
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	1e5a      	subs	r2, r3, #1
 8003e80:	4193      	sbcs	r3, r2
 8003e82:	6822      	ldr	r2, [r4, #0]
 8003e84:	0692      	lsls	r2, r2, #26
 8003e86:	d430      	bmi.n	8003eea <_printf_common+0xae>
 8003e88:	0022      	movs	r2, r4
 8003e8a:	9901      	ldr	r1, [sp, #4]
 8003e8c:	9800      	ldr	r0, [sp, #0]
 8003e8e:	9e08      	ldr	r6, [sp, #32]
 8003e90:	3243      	adds	r2, #67	; 0x43
 8003e92:	47b0      	blx	r6
 8003e94:	1c43      	adds	r3, r0, #1
 8003e96:	d025      	beq.n	8003ee4 <_printf_common+0xa8>
 8003e98:	2306      	movs	r3, #6
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	682a      	ldr	r2, [r5, #0]
 8003e9e:	68e1      	ldr	r1, [r4, #12]
 8003ea0:	2500      	movs	r5, #0
 8003ea2:	4003      	ands	r3, r0
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d103      	bne.n	8003eb0 <_printf_common+0x74>
 8003ea8:	1a8d      	subs	r5, r1, r2
 8003eaa:	43eb      	mvns	r3, r5
 8003eac:	17db      	asrs	r3, r3, #31
 8003eae:	401d      	ands	r5, r3
 8003eb0:	68a3      	ldr	r3, [r4, #8]
 8003eb2:	6922      	ldr	r2, [r4, #16]
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	dd01      	ble.n	8003ebc <_printf_common+0x80>
 8003eb8:	1a9b      	subs	r3, r3, r2
 8003eba:	18ed      	adds	r5, r5, r3
 8003ebc:	2700      	movs	r7, #0
 8003ebe:	42bd      	cmp	r5, r7
 8003ec0:	d120      	bne.n	8003f04 <_printf_common+0xc8>
 8003ec2:	2000      	movs	r0, #0
 8003ec4:	e010      	b.n	8003ee8 <_printf_common+0xac>
 8003ec6:	3701      	adds	r7, #1
 8003ec8:	68e3      	ldr	r3, [r4, #12]
 8003eca:	682a      	ldr	r2, [r5, #0]
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	42bb      	cmp	r3, r7
 8003ed0:	ddd2      	ble.n	8003e78 <_printf_common+0x3c>
 8003ed2:	0022      	movs	r2, r4
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	9901      	ldr	r1, [sp, #4]
 8003ed8:	9800      	ldr	r0, [sp, #0]
 8003eda:	9e08      	ldr	r6, [sp, #32]
 8003edc:	3219      	adds	r2, #25
 8003ede:	47b0      	blx	r6
 8003ee0:	1c43      	adds	r3, r0, #1
 8003ee2:	d1f0      	bne.n	8003ec6 <_printf_common+0x8a>
 8003ee4:	2001      	movs	r0, #1
 8003ee6:	4240      	negs	r0, r0
 8003ee8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003eea:	2030      	movs	r0, #48	; 0x30
 8003eec:	18e1      	adds	r1, r4, r3
 8003eee:	3143      	adds	r1, #67	; 0x43
 8003ef0:	7008      	strb	r0, [r1, #0]
 8003ef2:	0021      	movs	r1, r4
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	3145      	adds	r1, #69	; 0x45
 8003ef8:	7809      	ldrb	r1, [r1, #0]
 8003efa:	18a2      	adds	r2, r4, r2
 8003efc:	3243      	adds	r2, #67	; 0x43
 8003efe:	3302      	adds	r3, #2
 8003f00:	7011      	strb	r1, [r2, #0]
 8003f02:	e7c1      	b.n	8003e88 <_printf_common+0x4c>
 8003f04:	0022      	movs	r2, r4
 8003f06:	2301      	movs	r3, #1
 8003f08:	9901      	ldr	r1, [sp, #4]
 8003f0a:	9800      	ldr	r0, [sp, #0]
 8003f0c:	9e08      	ldr	r6, [sp, #32]
 8003f0e:	321a      	adds	r2, #26
 8003f10:	47b0      	blx	r6
 8003f12:	1c43      	adds	r3, r0, #1
 8003f14:	d0e6      	beq.n	8003ee4 <_printf_common+0xa8>
 8003f16:	3701      	adds	r7, #1
 8003f18:	e7d1      	b.n	8003ebe <_printf_common+0x82>
	...

08003f1c <_printf_i>:
 8003f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f1e:	b08b      	sub	sp, #44	; 0x2c
 8003f20:	9206      	str	r2, [sp, #24]
 8003f22:	000a      	movs	r2, r1
 8003f24:	3243      	adds	r2, #67	; 0x43
 8003f26:	9307      	str	r3, [sp, #28]
 8003f28:	9005      	str	r0, [sp, #20]
 8003f2a:	9204      	str	r2, [sp, #16]
 8003f2c:	7e0a      	ldrb	r2, [r1, #24]
 8003f2e:	000c      	movs	r4, r1
 8003f30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003f32:	2a78      	cmp	r2, #120	; 0x78
 8003f34:	d807      	bhi.n	8003f46 <_printf_i+0x2a>
 8003f36:	2a62      	cmp	r2, #98	; 0x62
 8003f38:	d809      	bhi.n	8003f4e <_printf_i+0x32>
 8003f3a:	2a00      	cmp	r2, #0
 8003f3c:	d100      	bne.n	8003f40 <_printf_i+0x24>
 8003f3e:	e0c1      	b.n	80040c4 <_printf_i+0x1a8>
 8003f40:	2a58      	cmp	r2, #88	; 0x58
 8003f42:	d100      	bne.n	8003f46 <_printf_i+0x2a>
 8003f44:	e08c      	b.n	8004060 <_printf_i+0x144>
 8003f46:	0026      	movs	r6, r4
 8003f48:	3642      	adds	r6, #66	; 0x42
 8003f4a:	7032      	strb	r2, [r6, #0]
 8003f4c:	e022      	b.n	8003f94 <_printf_i+0x78>
 8003f4e:	0010      	movs	r0, r2
 8003f50:	3863      	subs	r0, #99	; 0x63
 8003f52:	2815      	cmp	r0, #21
 8003f54:	d8f7      	bhi.n	8003f46 <_printf_i+0x2a>
 8003f56:	f7fc f8dd 	bl	8000114 <__gnu_thumb1_case_shi>
 8003f5a:	0016      	.short	0x0016
 8003f5c:	fff6001f 	.word	0xfff6001f
 8003f60:	fff6fff6 	.word	0xfff6fff6
 8003f64:	001ffff6 	.word	0x001ffff6
 8003f68:	fff6fff6 	.word	0xfff6fff6
 8003f6c:	fff6fff6 	.word	0xfff6fff6
 8003f70:	003600a8 	.word	0x003600a8
 8003f74:	fff6009a 	.word	0xfff6009a
 8003f78:	00b9fff6 	.word	0x00b9fff6
 8003f7c:	0036fff6 	.word	0x0036fff6
 8003f80:	fff6fff6 	.word	0xfff6fff6
 8003f84:	009e      	.short	0x009e
 8003f86:	0026      	movs	r6, r4
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	3642      	adds	r6, #66	; 0x42
 8003f8c:	1d11      	adds	r1, r2, #4
 8003f8e:	6019      	str	r1, [r3, #0]
 8003f90:	6813      	ldr	r3, [r2, #0]
 8003f92:	7033      	strb	r3, [r6, #0]
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0a7      	b.n	80040e8 <_printf_i+0x1cc>
 8003f98:	6808      	ldr	r0, [r1, #0]
 8003f9a:	6819      	ldr	r1, [r3, #0]
 8003f9c:	1d0a      	adds	r2, r1, #4
 8003f9e:	0605      	lsls	r5, r0, #24
 8003fa0:	d50b      	bpl.n	8003fba <_printf_i+0x9e>
 8003fa2:	680d      	ldr	r5, [r1, #0]
 8003fa4:	601a      	str	r2, [r3, #0]
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	da03      	bge.n	8003fb2 <_printf_i+0x96>
 8003faa:	232d      	movs	r3, #45	; 0x2d
 8003fac:	9a04      	ldr	r2, [sp, #16]
 8003fae:	426d      	negs	r5, r5
 8003fb0:	7013      	strb	r3, [r2, #0]
 8003fb2:	4b61      	ldr	r3, [pc, #388]	; (8004138 <_printf_i+0x21c>)
 8003fb4:	270a      	movs	r7, #10
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	e01b      	b.n	8003ff2 <_printf_i+0xd6>
 8003fba:	680d      	ldr	r5, [r1, #0]
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	0641      	lsls	r1, r0, #25
 8003fc0:	d5f1      	bpl.n	8003fa6 <_printf_i+0x8a>
 8003fc2:	b22d      	sxth	r5, r5
 8003fc4:	e7ef      	b.n	8003fa6 <_printf_i+0x8a>
 8003fc6:	680d      	ldr	r5, [r1, #0]
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	1d08      	adds	r0, r1, #4
 8003fcc:	6018      	str	r0, [r3, #0]
 8003fce:	062e      	lsls	r6, r5, #24
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0xba>
 8003fd2:	680d      	ldr	r5, [r1, #0]
 8003fd4:	e003      	b.n	8003fde <_printf_i+0xc2>
 8003fd6:	066d      	lsls	r5, r5, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0xb6>
 8003fda:	680d      	ldr	r5, [r1, #0]
 8003fdc:	b2ad      	uxth	r5, r5
 8003fde:	4b56      	ldr	r3, [pc, #344]	; (8004138 <_printf_i+0x21c>)
 8003fe0:	2708      	movs	r7, #8
 8003fe2:	9303      	str	r3, [sp, #12]
 8003fe4:	2a6f      	cmp	r2, #111	; 0x6f
 8003fe6:	d000      	beq.n	8003fea <_printf_i+0xce>
 8003fe8:	3702      	adds	r7, #2
 8003fea:	0023      	movs	r3, r4
 8003fec:	2200      	movs	r2, #0
 8003fee:	3343      	adds	r3, #67	; 0x43
 8003ff0:	701a      	strb	r2, [r3, #0]
 8003ff2:	6863      	ldr	r3, [r4, #4]
 8003ff4:	60a3      	str	r3, [r4, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	db03      	blt.n	8004002 <_printf_i+0xe6>
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	6821      	ldr	r1, [r4, #0]
 8003ffe:	4391      	bics	r1, r2
 8004000:	6021      	str	r1, [r4, #0]
 8004002:	2d00      	cmp	r5, #0
 8004004:	d102      	bne.n	800400c <_printf_i+0xf0>
 8004006:	9e04      	ldr	r6, [sp, #16]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00c      	beq.n	8004026 <_printf_i+0x10a>
 800400c:	9e04      	ldr	r6, [sp, #16]
 800400e:	0028      	movs	r0, r5
 8004010:	0039      	movs	r1, r7
 8004012:	f7fc f90f 	bl	8000234 <__aeabi_uidivmod>
 8004016:	9b03      	ldr	r3, [sp, #12]
 8004018:	3e01      	subs	r6, #1
 800401a:	5c5b      	ldrb	r3, [r3, r1]
 800401c:	7033      	strb	r3, [r6, #0]
 800401e:	002b      	movs	r3, r5
 8004020:	0005      	movs	r5, r0
 8004022:	429f      	cmp	r7, r3
 8004024:	d9f3      	bls.n	800400e <_printf_i+0xf2>
 8004026:	2f08      	cmp	r7, #8
 8004028:	d109      	bne.n	800403e <_printf_i+0x122>
 800402a:	6823      	ldr	r3, [r4, #0]
 800402c:	07db      	lsls	r3, r3, #31
 800402e:	d506      	bpl.n	800403e <_printf_i+0x122>
 8004030:	6863      	ldr	r3, [r4, #4]
 8004032:	6922      	ldr	r2, [r4, #16]
 8004034:	4293      	cmp	r3, r2
 8004036:	dc02      	bgt.n	800403e <_printf_i+0x122>
 8004038:	2330      	movs	r3, #48	; 0x30
 800403a:	3e01      	subs	r6, #1
 800403c:	7033      	strb	r3, [r6, #0]
 800403e:	9b04      	ldr	r3, [sp, #16]
 8004040:	1b9b      	subs	r3, r3, r6
 8004042:	6123      	str	r3, [r4, #16]
 8004044:	9b07      	ldr	r3, [sp, #28]
 8004046:	0021      	movs	r1, r4
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	9805      	ldr	r0, [sp, #20]
 800404c:	9b06      	ldr	r3, [sp, #24]
 800404e:	aa09      	add	r2, sp, #36	; 0x24
 8004050:	f7ff fef4 	bl	8003e3c <_printf_common>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d14c      	bne.n	80040f2 <_printf_i+0x1d6>
 8004058:	2001      	movs	r0, #1
 800405a:	4240      	negs	r0, r0
 800405c:	b00b      	add	sp, #44	; 0x2c
 800405e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004060:	3145      	adds	r1, #69	; 0x45
 8004062:	700a      	strb	r2, [r1, #0]
 8004064:	4a34      	ldr	r2, [pc, #208]	; (8004138 <_printf_i+0x21c>)
 8004066:	9203      	str	r2, [sp, #12]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	6821      	ldr	r1, [r4, #0]
 800406c:	ca20      	ldmia	r2!, {r5}
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	0608      	lsls	r0, r1, #24
 8004072:	d516      	bpl.n	80040a2 <_printf_i+0x186>
 8004074:	07cb      	lsls	r3, r1, #31
 8004076:	d502      	bpl.n	800407e <_printf_i+0x162>
 8004078:	2320      	movs	r3, #32
 800407a:	4319      	orrs	r1, r3
 800407c:	6021      	str	r1, [r4, #0]
 800407e:	2710      	movs	r7, #16
 8004080:	2d00      	cmp	r5, #0
 8004082:	d1b2      	bne.n	8003fea <_printf_i+0xce>
 8004084:	2320      	movs	r3, #32
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	439a      	bics	r2, r3
 800408a:	6022      	str	r2, [r4, #0]
 800408c:	e7ad      	b.n	8003fea <_printf_i+0xce>
 800408e:	2220      	movs	r2, #32
 8004090:	6809      	ldr	r1, [r1, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	6022      	str	r2, [r4, #0]
 8004096:	0022      	movs	r2, r4
 8004098:	2178      	movs	r1, #120	; 0x78
 800409a:	3245      	adds	r2, #69	; 0x45
 800409c:	7011      	strb	r1, [r2, #0]
 800409e:	4a27      	ldr	r2, [pc, #156]	; (800413c <_printf_i+0x220>)
 80040a0:	e7e1      	b.n	8004066 <_printf_i+0x14a>
 80040a2:	0648      	lsls	r0, r1, #25
 80040a4:	d5e6      	bpl.n	8004074 <_printf_i+0x158>
 80040a6:	b2ad      	uxth	r5, r5
 80040a8:	e7e4      	b.n	8004074 <_printf_i+0x158>
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	680d      	ldr	r5, [r1, #0]
 80040ae:	1d10      	adds	r0, r2, #4
 80040b0:	6949      	ldr	r1, [r1, #20]
 80040b2:	6018      	str	r0, [r3, #0]
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	062e      	lsls	r6, r5, #24
 80040b8:	d501      	bpl.n	80040be <_printf_i+0x1a2>
 80040ba:	6019      	str	r1, [r3, #0]
 80040bc:	e002      	b.n	80040c4 <_printf_i+0x1a8>
 80040be:	066d      	lsls	r5, r5, #25
 80040c0:	d5fb      	bpl.n	80040ba <_printf_i+0x19e>
 80040c2:	8019      	strh	r1, [r3, #0]
 80040c4:	2300      	movs	r3, #0
 80040c6:	9e04      	ldr	r6, [sp, #16]
 80040c8:	6123      	str	r3, [r4, #16]
 80040ca:	e7bb      	b.n	8004044 <_printf_i+0x128>
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	1d11      	adds	r1, r2, #4
 80040d0:	6019      	str	r1, [r3, #0]
 80040d2:	6816      	ldr	r6, [r2, #0]
 80040d4:	2100      	movs	r1, #0
 80040d6:	0030      	movs	r0, r6
 80040d8:	6862      	ldr	r2, [r4, #4]
 80040da:	f000 f831 	bl	8004140 <memchr>
 80040de:	2800      	cmp	r0, #0
 80040e0:	d001      	beq.n	80040e6 <_printf_i+0x1ca>
 80040e2:	1b80      	subs	r0, r0, r6
 80040e4:	6060      	str	r0, [r4, #4]
 80040e6:	6863      	ldr	r3, [r4, #4]
 80040e8:	6123      	str	r3, [r4, #16]
 80040ea:	2300      	movs	r3, #0
 80040ec:	9a04      	ldr	r2, [sp, #16]
 80040ee:	7013      	strb	r3, [r2, #0]
 80040f0:	e7a8      	b.n	8004044 <_printf_i+0x128>
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	0032      	movs	r2, r6
 80040f6:	9906      	ldr	r1, [sp, #24]
 80040f8:	9805      	ldr	r0, [sp, #20]
 80040fa:	9d07      	ldr	r5, [sp, #28]
 80040fc:	47a8      	blx	r5
 80040fe:	1c43      	adds	r3, r0, #1
 8004100:	d0aa      	beq.n	8004058 <_printf_i+0x13c>
 8004102:	6823      	ldr	r3, [r4, #0]
 8004104:	079b      	lsls	r3, r3, #30
 8004106:	d415      	bmi.n	8004134 <_printf_i+0x218>
 8004108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800410a:	68e0      	ldr	r0, [r4, #12]
 800410c:	4298      	cmp	r0, r3
 800410e:	daa5      	bge.n	800405c <_printf_i+0x140>
 8004110:	0018      	movs	r0, r3
 8004112:	e7a3      	b.n	800405c <_printf_i+0x140>
 8004114:	0022      	movs	r2, r4
 8004116:	2301      	movs	r3, #1
 8004118:	9906      	ldr	r1, [sp, #24]
 800411a:	9805      	ldr	r0, [sp, #20]
 800411c:	9e07      	ldr	r6, [sp, #28]
 800411e:	3219      	adds	r2, #25
 8004120:	47b0      	blx	r6
 8004122:	1c43      	adds	r3, r0, #1
 8004124:	d098      	beq.n	8004058 <_printf_i+0x13c>
 8004126:	3501      	adds	r5, #1
 8004128:	68e3      	ldr	r3, [r4, #12]
 800412a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	42ab      	cmp	r3, r5
 8004130:	dcf0      	bgt.n	8004114 <_printf_i+0x1f8>
 8004132:	e7e9      	b.n	8004108 <_printf_i+0x1ec>
 8004134:	2500      	movs	r5, #0
 8004136:	e7f7      	b.n	8004128 <_printf_i+0x20c>
 8004138:	080045ad 	.word	0x080045ad
 800413c:	080045be 	.word	0x080045be

08004140 <memchr>:
 8004140:	b2c9      	uxtb	r1, r1
 8004142:	1882      	adds	r2, r0, r2
 8004144:	4290      	cmp	r0, r2
 8004146:	d101      	bne.n	800414c <memchr+0xc>
 8004148:	2000      	movs	r0, #0
 800414a:	4770      	bx	lr
 800414c:	7803      	ldrb	r3, [r0, #0]
 800414e:	428b      	cmp	r3, r1
 8004150:	d0fb      	beq.n	800414a <memchr+0xa>
 8004152:	3001      	adds	r0, #1
 8004154:	e7f6      	b.n	8004144 <memchr+0x4>

08004156 <memcpy>:
 8004156:	2300      	movs	r3, #0
 8004158:	b510      	push	{r4, lr}
 800415a:	429a      	cmp	r2, r3
 800415c:	d100      	bne.n	8004160 <memcpy+0xa>
 800415e:	bd10      	pop	{r4, pc}
 8004160:	5ccc      	ldrb	r4, [r1, r3]
 8004162:	54c4      	strb	r4, [r0, r3]
 8004164:	3301      	adds	r3, #1
 8004166:	e7f8      	b.n	800415a <memcpy+0x4>

08004168 <memmove>:
 8004168:	b510      	push	{r4, lr}
 800416a:	4288      	cmp	r0, r1
 800416c:	d902      	bls.n	8004174 <memmove+0xc>
 800416e:	188b      	adds	r3, r1, r2
 8004170:	4298      	cmp	r0, r3
 8004172:	d303      	bcc.n	800417c <memmove+0x14>
 8004174:	2300      	movs	r3, #0
 8004176:	e007      	b.n	8004188 <memmove+0x20>
 8004178:	5c8b      	ldrb	r3, [r1, r2]
 800417a:	5483      	strb	r3, [r0, r2]
 800417c:	3a01      	subs	r2, #1
 800417e:	d2fb      	bcs.n	8004178 <memmove+0x10>
 8004180:	bd10      	pop	{r4, pc}
 8004182:	5ccc      	ldrb	r4, [r1, r3]
 8004184:	54c4      	strb	r4, [r0, r3]
 8004186:	3301      	adds	r3, #1
 8004188:	429a      	cmp	r2, r3
 800418a:	d1fa      	bne.n	8004182 <memmove+0x1a>
 800418c:	e7f8      	b.n	8004180 <memmove+0x18>
	...

08004190 <_free_r>:
 8004190:	b570      	push	{r4, r5, r6, lr}
 8004192:	0005      	movs	r5, r0
 8004194:	2900      	cmp	r1, #0
 8004196:	d010      	beq.n	80041ba <_free_r+0x2a>
 8004198:	1f0c      	subs	r4, r1, #4
 800419a:	6823      	ldr	r3, [r4, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	da00      	bge.n	80041a2 <_free_r+0x12>
 80041a0:	18e4      	adds	r4, r4, r3
 80041a2:	0028      	movs	r0, r5
 80041a4:	f000 f918 	bl	80043d8 <__malloc_lock>
 80041a8:	4a1d      	ldr	r2, [pc, #116]	; (8004220 <_free_r+0x90>)
 80041aa:	6813      	ldr	r3, [r2, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d105      	bne.n	80041bc <_free_r+0x2c>
 80041b0:	6063      	str	r3, [r4, #4]
 80041b2:	6014      	str	r4, [r2, #0]
 80041b4:	0028      	movs	r0, r5
 80041b6:	f000 f917 	bl	80043e8 <__malloc_unlock>
 80041ba:	bd70      	pop	{r4, r5, r6, pc}
 80041bc:	42a3      	cmp	r3, r4
 80041be:	d908      	bls.n	80041d2 <_free_r+0x42>
 80041c0:	6821      	ldr	r1, [r4, #0]
 80041c2:	1860      	adds	r0, r4, r1
 80041c4:	4283      	cmp	r3, r0
 80041c6:	d1f3      	bne.n	80041b0 <_free_r+0x20>
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	1841      	adds	r1, r0, r1
 80041ce:	6021      	str	r1, [r4, #0]
 80041d0:	e7ee      	b.n	80041b0 <_free_r+0x20>
 80041d2:	001a      	movs	r2, r3
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <_free_r+0x4e>
 80041da:	42a3      	cmp	r3, r4
 80041dc:	d9f9      	bls.n	80041d2 <_free_r+0x42>
 80041de:	6811      	ldr	r1, [r2, #0]
 80041e0:	1850      	adds	r0, r2, r1
 80041e2:	42a0      	cmp	r0, r4
 80041e4:	d10b      	bne.n	80041fe <_free_r+0x6e>
 80041e6:	6820      	ldr	r0, [r4, #0]
 80041e8:	1809      	adds	r1, r1, r0
 80041ea:	1850      	adds	r0, r2, r1
 80041ec:	6011      	str	r1, [r2, #0]
 80041ee:	4283      	cmp	r3, r0
 80041f0:	d1e0      	bne.n	80041b4 <_free_r+0x24>
 80041f2:	6818      	ldr	r0, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	1841      	adds	r1, r0, r1
 80041f8:	6011      	str	r1, [r2, #0]
 80041fa:	6053      	str	r3, [r2, #4]
 80041fc:	e7da      	b.n	80041b4 <_free_r+0x24>
 80041fe:	42a0      	cmp	r0, r4
 8004200:	d902      	bls.n	8004208 <_free_r+0x78>
 8004202:	230c      	movs	r3, #12
 8004204:	602b      	str	r3, [r5, #0]
 8004206:	e7d5      	b.n	80041b4 <_free_r+0x24>
 8004208:	6821      	ldr	r1, [r4, #0]
 800420a:	1860      	adds	r0, r4, r1
 800420c:	4283      	cmp	r3, r0
 800420e:	d103      	bne.n	8004218 <_free_r+0x88>
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	1841      	adds	r1, r0, r1
 8004216:	6021      	str	r1, [r4, #0]
 8004218:	6063      	str	r3, [r4, #4]
 800421a:	6054      	str	r4, [r2, #4]
 800421c:	e7ca      	b.n	80041b4 <_free_r+0x24>
 800421e:	46c0      	nop			; (mov r8, r8)
 8004220:	20000164 	.word	0x20000164

08004224 <sbrk_aligned>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	4e0f      	ldr	r6, [pc, #60]	; (8004264 <sbrk_aligned+0x40>)
 8004228:	000d      	movs	r5, r1
 800422a:	6831      	ldr	r1, [r6, #0]
 800422c:	0004      	movs	r4, r0
 800422e:	2900      	cmp	r1, #0
 8004230:	d102      	bne.n	8004238 <sbrk_aligned+0x14>
 8004232:	f000 f8bf 	bl	80043b4 <_sbrk_r>
 8004236:	6030      	str	r0, [r6, #0]
 8004238:	0029      	movs	r1, r5
 800423a:	0020      	movs	r0, r4
 800423c:	f000 f8ba 	bl	80043b4 <_sbrk_r>
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d00a      	beq.n	800425a <sbrk_aligned+0x36>
 8004244:	2303      	movs	r3, #3
 8004246:	1cc5      	adds	r5, r0, #3
 8004248:	439d      	bics	r5, r3
 800424a:	42a8      	cmp	r0, r5
 800424c:	d007      	beq.n	800425e <sbrk_aligned+0x3a>
 800424e:	1a29      	subs	r1, r5, r0
 8004250:	0020      	movs	r0, r4
 8004252:	f000 f8af 	bl	80043b4 <_sbrk_r>
 8004256:	1c43      	adds	r3, r0, #1
 8004258:	d101      	bne.n	800425e <sbrk_aligned+0x3a>
 800425a:	2501      	movs	r5, #1
 800425c:	426d      	negs	r5, r5
 800425e:	0028      	movs	r0, r5
 8004260:	bd70      	pop	{r4, r5, r6, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20000168 	.word	0x20000168

08004268 <_malloc_r>:
 8004268:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800426a:	2203      	movs	r2, #3
 800426c:	1ccb      	adds	r3, r1, #3
 800426e:	4393      	bics	r3, r2
 8004270:	3308      	adds	r3, #8
 8004272:	0006      	movs	r6, r0
 8004274:	001f      	movs	r7, r3
 8004276:	2b0c      	cmp	r3, #12
 8004278:	d232      	bcs.n	80042e0 <_malloc_r+0x78>
 800427a:	270c      	movs	r7, #12
 800427c:	42b9      	cmp	r1, r7
 800427e:	d831      	bhi.n	80042e4 <_malloc_r+0x7c>
 8004280:	0030      	movs	r0, r6
 8004282:	f000 f8a9 	bl	80043d8 <__malloc_lock>
 8004286:	4d32      	ldr	r5, [pc, #200]	; (8004350 <_malloc_r+0xe8>)
 8004288:	682b      	ldr	r3, [r5, #0]
 800428a:	001c      	movs	r4, r3
 800428c:	2c00      	cmp	r4, #0
 800428e:	d12e      	bne.n	80042ee <_malloc_r+0x86>
 8004290:	0039      	movs	r1, r7
 8004292:	0030      	movs	r0, r6
 8004294:	f7ff ffc6 	bl	8004224 <sbrk_aligned>
 8004298:	0004      	movs	r4, r0
 800429a:	1c43      	adds	r3, r0, #1
 800429c:	d11e      	bne.n	80042dc <_malloc_r+0x74>
 800429e:	682c      	ldr	r4, [r5, #0]
 80042a0:	0025      	movs	r5, r4
 80042a2:	2d00      	cmp	r5, #0
 80042a4:	d14a      	bne.n	800433c <_malloc_r+0xd4>
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	0029      	movs	r1, r5
 80042aa:	18e3      	adds	r3, r4, r3
 80042ac:	0030      	movs	r0, r6
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	f000 f880 	bl	80043b4 <_sbrk_r>
 80042b4:	9b01      	ldr	r3, [sp, #4]
 80042b6:	4283      	cmp	r3, r0
 80042b8:	d143      	bne.n	8004342 <_malloc_r+0xda>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	3703      	adds	r7, #3
 80042be:	1aff      	subs	r7, r7, r3
 80042c0:	2303      	movs	r3, #3
 80042c2:	439f      	bics	r7, r3
 80042c4:	3708      	adds	r7, #8
 80042c6:	2f0c      	cmp	r7, #12
 80042c8:	d200      	bcs.n	80042cc <_malloc_r+0x64>
 80042ca:	270c      	movs	r7, #12
 80042cc:	0039      	movs	r1, r7
 80042ce:	0030      	movs	r0, r6
 80042d0:	f7ff ffa8 	bl	8004224 <sbrk_aligned>
 80042d4:	1c43      	adds	r3, r0, #1
 80042d6:	d034      	beq.n	8004342 <_malloc_r+0xda>
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	19df      	adds	r7, r3, r7
 80042dc:	6027      	str	r7, [r4, #0]
 80042de:	e013      	b.n	8004308 <_malloc_r+0xa0>
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dacb      	bge.n	800427c <_malloc_r+0x14>
 80042e4:	230c      	movs	r3, #12
 80042e6:	2500      	movs	r5, #0
 80042e8:	6033      	str	r3, [r6, #0]
 80042ea:	0028      	movs	r0, r5
 80042ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042ee:	6822      	ldr	r2, [r4, #0]
 80042f0:	1bd1      	subs	r1, r2, r7
 80042f2:	d420      	bmi.n	8004336 <_malloc_r+0xce>
 80042f4:	290b      	cmp	r1, #11
 80042f6:	d917      	bls.n	8004328 <_malloc_r+0xc0>
 80042f8:	19e2      	adds	r2, r4, r7
 80042fa:	6027      	str	r7, [r4, #0]
 80042fc:	42a3      	cmp	r3, r4
 80042fe:	d111      	bne.n	8004324 <_malloc_r+0xbc>
 8004300:	602a      	str	r2, [r5, #0]
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	6011      	str	r1, [r2, #0]
 8004306:	6053      	str	r3, [r2, #4]
 8004308:	0030      	movs	r0, r6
 800430a:	0025      	movs	r5, r4
 800430c:	f000 f86c 	bl	80043e8 <__malloc_unlock>
 8004310:	2207      	movs	r2, #7
 8004312:	350b      	adds	r5, #11
 8004314:	1d23      	adds	r3, r4, #4
 8004316:	4395      	bics	r5, r2
 8004318:	1aea      	subs	r2, r5, r3
 800431a:	429d      	cmp	r5, r3
 800431c:	d0e5      	beq.n	80042ea <_malloc_r+0x82>
 800431e:	1b5b      	subs	r3, r3, r5
 8004320:	50a3      	str	r3, [r4, r2]
 8004322:	e7e2      	b.n	80042ea <_malloc_r+0x82>
 8004324:	605a      	str	r2, [r3, #4]
 8004326:	e7ec      	b.n	8004302 <_malloc_r+0x9a>
 8004328:	6862      	ldr	r2, [r4, #4]
 800432a:	42a3      	cmp	r3, r4
 800432c:	d101      	bne.n	8004332 <_malloc_r+0xca>
 800432e:	602a      	str	r2, [r5, #0]
 8004330:	e7ea      	b.n	8004308 <_malloc_r+0xa0>
 8004332:	605a      	str	r2, [r3, #4]
 8004334:	e7e8      	b.n	8004308 <_malloc_r+0xa0>
 8004336:	0023      	movs	r3, r4
 8004338:	6864      	ldr	r4, [r4, #4]
 800433a:	e7a7      	b.n	800428c <_malloc_r+0x24>
 800433c:	002c      	movs	r4, r5
 800433e:	686d      	ldr	r5, [r5, #4]
 8004340:	e7af      	b.n	80042a2 <_malloc_r+0x3a>
 8004342:	230c      	movs	r3, #12
 8004344:	0030      	movs	r0, r6
 8004346:	6033      	str	r3, [r6, #0]
 8004348:	f000 f84e 	bl	80043e8 <__malloc_unlock>
 800434c:	e7cd      	b.n	80042ea <_malloc_r+0x82>
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	20000164 	.word	0x20000164

08004354 <_realloc_r>:
 8004354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004356:	0007      	movs	r7, r0
 8004358:	000e      	movs	r6, r1
 800435a:	0014      	movs	r4, r2
 800435c:	2900      	cmp	r1, #0
 800435e:	d105      	bne.n	800436c <_realloc_r+0x18>
 8004360:	0011      	movs	r1, r2
 8004362:	f7ff ff81 	bl	8004268 <_malloc_r>
 8004366:	0005      	movs	r5, r0
 8004368:	0028      	movs	r0, r5
 800436a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800436c:	2a00      	cmp	r2, #0
 800436e:	d103      	bne.n	8004378 <_realloc_r+0x24>
 8004370:	f7ff ff0e 	bl	8004190 <_free_r>
 8004374:	0025      	movs	r5, r4
 8004376:	e7f7      	b.n	8004368 <_realloc_r+0x14>
 8004378:	f000 f83e 	bl	80043f8 <_malloc_usable_size_r>
 800437c:	9001      	str	r0, [sp, #4]
 800437e:	4284      	cmp	r4, r0
 8004380:	d803      	bhi.n	800438a <_realloc_r+0x36>
 8004382:	0035      	movs	r5, r6
 8004384:	0843      	lsrs	r3, r0, #1
 8004386:	42a3      	cmp	r3, r4
 8004388:	d3ee      	bcc.n	8004368 <_realloc_r+0x14>
 800438a:	0021      	movs	r1, r4
 800438c:	0038      	movs	r0, r7
 800438e:	f7ff ff6b 	bl	8004268 <_malloc_r>
 8004392:	1e05      	subs	r5, r0, #0
 8004394:	d0e8      	beq.n	8004368 <_realloc_r+0x14>
 8004396:	9b01      	ldr	r3, [sp, #4]
 8004398:	0022      	movs	r2, r4
 800439a:	429c      	cmp	r4, r3
 800439c:	d900      	bls.n	80043a0 <_realloc_r+0x4c>
 800439e:	001a      	movs	r2, r3
 80043a0:	0031      	movs	r1, r6
 80043a2:	0028      	movs	r0, r5
 80043a4:	f7ff fed7 	bl	8004156 <memcpy>
 80043a8:	0031      	movs	r1, r6
 80043aa:	0038      	movs	r0, r7
 80043ac:	f7ff fef0 	bl	8004190 <_free_r>
 80043b0:	e7da      	b.n	8004368 <_realloc_r+0x14>
	...

080043b4 <_sbrk_r>:
 80043b4:	2300      	movs	r3, #0
 80043b6:	b570      	push	{r4, r5, r6, lr}
 80043b8:	4d06      	ldr	r5, [pc, #24]	; (80043d4 <_sbrk_r+0x20>)
 80043ba:	0004      	movs	r4, r0
 80043bc:	0008      	movs	r0, r1
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	f7fd f874 	bl	80014ac <_sbrk>
 80043c4:	1c43      	adds	r3, r0, #1
 80043c6:	d103      	bne.n	80043d0 <_sbrk_r+0x1c>
 80043c8:	682b      	ldr	r3, [r5, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d000      	beq.n	80043d0 <_sbrk_r+0x1c>
 80043ce:	6023      	str	r3, [r4, #0]
 80043d0:	bd70      	pop	{r4, r5, r6, pc}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	2000016c 	.word	0x2000016c

080043d8 <__malloc_lock>:
 80043d8:	b510      	push	{r4, lr}
 80043da:	4802      	ldr	r0, [pc, #8]	; (80043e4 <__malloc_lock+0xc>)
 80043dc:	f000 f814 	bl	8004408 <__retarget_lock_acquire_recursive>
 80043e0:	bd10      	pop	{r4, pc}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	20000170 	.word	0x20000170

080043e8 <__malloc_unlock>:
 80043e8:	b510      	push	{r4, lr}
 80043ea:	4802      	ldr	r0, [pc, #8]	; (80043f4 <__malloc_unlock+0xc>)
 80043ec:	f000 f80d 	bl	800440a <__retarget_lock_release_recursive>
 80043f0:	bd10      	pop	{r4, pc}
 80043f2:	46c0      	nop			; (mov r8, r8)
 80043f4:	20000170 	.word	0x20000170

080043f8 <_malloc_usable_size_r>:
 80043f8:	1f0b      	subs	r3, r1, #4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	1f18      	subs	r0, r3, #4
 80043fe:	2b00      	cmp	r3, #0
 8004400:	da01      	bge.n	8004406 <_malloc_usable_size_r+0xe>
 8004402:	580b      	ldr	r3, [r1, r0]
 8004404:	18c0      	adds	r0, r0, r3
 8004406:	4770      	bx	lr

08004408 <__retarget_lock_acquire_recursive>:
 8004408:	4770      	bx	lr

0800440a <__retarget_lock_release_recursive>:
 800440a:	4770      	bx	lr

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
